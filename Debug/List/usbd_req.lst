###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       06/May/2016  23:31:38
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\IAR Workspace\STM32F407\VCP_ESP\usb_lib\core\usbd_req.c
#    Command line =  
#        "D:\IAR Workspace\STM32F407\VCP_ESP\usb_lib\core\usbd_req.c" -D
#        USE_STDPERIPH_DRIVER -D STM32F4XX -D USE_FULL_ASSERT -lCN "D:\IAR
#        Workspace\STM32F407\VCP_ESP\Debug\List" -o "D:\IAR
#        Workspace\STM32F407\VCP_ESP\Debug\Obj" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\"
#        -I "D:\IAR Workspace\STM32F407\VCP_ESP\..\Libraries\CMSIS\Include\" -I
#        "D:\IAR Workspace\STM32F407\VCP_ESP\..\Utilities\STM32F4-Discovery\"
#        -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\..\Libraries\CMSIS\ST\STM32F4xx\Include\"
#        -I "D:\IAR Workspace\STM32F407\VCP_ESP\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_conf\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\cdc\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\otg\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\core\" -On --use_c++_inline -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  D:\IAR Workspace\STM32F407\VCP_ESP\Debug\List\usbd_req.lst
#    Object file  =  D:\IAR Workspace\STM32F407\VCP_ESP\Debug\Obj\usbd_req.o
#
###############################################################################

D:\IAR Workspace\STM32F407\VCP_ESP\usb_lib\core\usbd_req.c
      1          /**
      2            ******************************************************************************
      3            * @file    usbd_req.c
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    22-July-2011  
      7            * @brief   This file provides the standard USB requests following chapter 9.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */ 
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "usbd_req.h"
     24          #include "usbd_ioreq.h"
     25          #include "usbd_desc.h"
     26          
     27          
     28          /** @addtogroup STM32_USB_OTG_DEVICE_LIBRARY
     29            * @{
     30            */
     31          
     32          
     33          /** @defgroup USBD_REQ 
     34            * @brief USB standard requests module
     35            * @{
     36            */ 
     37          
     38          /** @defgroup USBD_REQ_Private_TypesDefinitions
     39            * @{
     40            */ 
     41          /**
     42            * @}
     43            */ 
     44          
     45          
     46          /** @defgroup USBD_REQ_Private_Defines
     47            * @{
     48            */ 
     49          
     50          /**
     51            * @}
     52            */ 
     53          
     54          
     55          /** @defgroup USBD_REQ_Private_Macros
     56            * @{
     57            */ 
     58          /**
     59            * @}
     60            */ 
     61          
     62          
     63          /** @defgroup USBD_REQ_Private_Variables
     64            * @{
     65            */ 
     66          
     67          #ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
     68            #if defined ( __ICCARM__ ) /*!< IAR Compiler */
     69              #pragma data_alignment=4   
     70            #endif
     71          #endif /* USB_OTG_HS_INTERNAL_DMA_ENABLED */  

   \                                 In section .bss, align 4
     72          __ALIGN_BEGIN uint32_t USBD_ep_status __ALIGN_END  = 0; 
   \                     USBD_ep_status:
   \   00000000                      DS8 4
     73          
     74          #ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
     75            #if defined ( __ICCARM__ ) /*!< IAR Compiler */
     76              #pragma data_alignment=4   
     77            #endif
     78          #endif /* USB_OTG_HS_INTERNAL_DMA_ENABLED */

   \                                 In section .bss, align 4
     79          __ALIGN_BEGIN uint32_t  USBD_default_cfg __ALIGN_END  = 0;
   \                     USBD_default_cfg:
   \   00000000                      DS8 4
     80          
     81          #ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
     82            #if defined ( __ICCARM__ ) /*!< IAR Compiler */
     83              #pragma data_alignment=4   
     84            #endif
     85          #endif /* USB_OTG_HS_INTERNAL_DMA_ENABLED */

   \                                 In section .bss, align 4
     86          __ALIGN_BEGIN uint32_t  USBD_cfg_status __ALIGN_END  = 0;  
   \                     USBD_cfg_status:
   \   00000000                      DS8 4
     87          
     88          #ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
     89            #if defined ( __ICCARM__ ) /*!< IAR Compiler */
     90              #pragma data_alignment=4   
     91            #endif
     92          #endif /* USB_OTG_HS_INTERNAL_DMA_ENABLED */

   \                                 In section .bss, align 4
     93          __ALIGN_BEGIN uint8_t USBD_StrDesc[USB_MAX_STR_DESC_SIZ] __ALIGN_END ;
   \                     USBD_StrDesc:
   \   00000000                      DS8 52
     94          /**
     95            * @}
     96            */ 
     97          
     98          
     99          /** @defgroup USBD_REQ_Private_FunctionPrototypes
    100            * @{
    101            */ 
    102          static void USBD_GetDescriptor(USB_OTG_CORE_HANDLE  *pdev, 
    103                                         USB_SETUP_REQ *req);
    104          
    105          static void USBD_SetAddress(USB_OTG_CORE_HANDLE  *pdev, 
    106                                      USB_SETUP_REQ *req);
    107          
    108          static void USBD_SetConfig(USB_OTG_CORE_HANDLE  *pdev, 
    109                                     USB_SETUP_REQ *req);
    110          
    111          static void USBD_GetConfig(USB_OTG_CORE_HANDLE  *pdev, 
    112                                     USB_SETUP_REQ *req);
    113          
    114          static void USBD_GetStatus(USB_OTG_CORE_HANDLE  *pdev, 
    115                                     USB_SETUP_REQ *req);
    116          
    117          static void USBD_SetFeature(USB_OTG_CORE_HANDLE  *pdev, 
    118                                      USB_SETUP_REQ *req);
    119          
    120          static void USBD_ClrFeature(USB_OTG_CORE_HANDLE  *pdev, 
    121                                      USB_SETUP_REQ *req);
    122          
    123          static uint8_t USBD_GetLen(uint8_t *buf);
    124          /**
    125            * @}
    126            */ 
    127          
    128          
    129          /** @defgroup USBD_REQ_Private_Functions
    130            * @{
    131            */ 
    132          
    133          
    134          /**
    135          * @brief  USBD_StdDevReq
    136          *         Handle standard usb device requests
    137          * @param  pdev: device instance
    138          * @param  req: usb request
    139          * @retval status
    140          */

   \                                 In section .text, align 2, keep-with-next
    141          USBD_Status  USBD_StdDevReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
    142          {
   \                     USBD_StdDevReq: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    143            USBD_Status ret = USBD_OK;  
   \   00000006   0x2600             MOVS     R6,#+0
    144            
    145            switch (req->bRequest) 
   \   00000008   0x7868             LDRB     R0,[R5, #+1]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD020             BEQ.N    ??USBD_StdDevReq_0
   \   0000000E   0x2801             CMP      R0,#+1
   \   00000010   0xD028             BEQ.N    ??USBD_StdDevReq_1
   \   00000012   0x2803             CMP      R0,#+3
   \   00000014   0xD021             BEQ.N    ??USBD_StdDevReq_2
   \   00000016   0x2805             CMP      R0,#+5
   \   00000018   0xD00B             BEQ.N    ??USBD_StdDevReq_3
   \   0000001A   0x2806             CMP      R0,#+6
   \   0000001C   0xD004             BEQ.N    ??USBD_StdDevReq_4
   \   0000001E   0x2808             CMP      R0,#+8
   \   00000020   0xD011             BEQ.N    ??USBD_StdDevReq_5
   \   00000022   0x2809             CMP      R0,#+9
   \   00000024   0xD00A             BEQ.N    ??USBD_StdDevReq_6
   \   00000026   0xE022             B.N      ??USBD_StdDevReq_7
    146            {
    147            case USB_REQ_GET_DESCRIPTOR: 
    148              
    149              USBD_GetDescriptor (pdev, req) ;
   \                     ??USBD_StdDevReq_4: (+1)
   \   00000028   0x0029             MOVS     R1,R5
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0x.... 0x....      BL       USBD_GetDescriptor
    150              break;
   \   00000030   0xE021             B.N      ??USBD_StdDevReq_8
    151              
    152            case USB_REQ_SET_ADDRESS:                      
    153              USBD_SetAddress(pdev, req);
   \                     ??USBD_StdDevReq_3: (+1)
   \   00000032   0x0029             MOVS     R1,R5
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0x.... 0x....      BL       USBD_SetAddress
    154              break;
   \   0000003A   0xE01C             B.N      ??USBD_StdDevReq_8
    155              
    156            case USB_REQ_SET_CONFIGURATION:                    
    157              USBD_SetConfig (pdev , req);
   \                     ??USBD_StdDevReq_6: (+1)
   \   0000003C   0x0029             MOVS     R1,R5
   \   0000003E   0x0020             MOVS     R0,R4
   \   00000040   0x.... 0x....      BL       USBD_SetConfig
    158              break;
   \   00000044   0xE017             B.N      ??USBD_StdDevReq_8
    159              
    160            case USB_REQ_GET_CONFIGURATION:                 
    161              USBD_GetConfig (pdev , req);
   \                     ??USBD_StdDevReq_5: (+1)
   \   00000046   0x0029             MOVS     R1,R5
   \   00000048   0x0020             MOVS     R0,R4
   \   0000004A   0x.... 0x....      BL       USBD_GetConfig
    162              break;
   \   0000004E   0xE012             B.N      ??USBD_StdDevReq_8
    163              
    164            case USB_REQ_GET_STATUS:                                  
    165              USBD_GetStatus (pdev , req);
   \                     ??USBD_StdDevReq_0: (+1)
   \   00000050   0x0029             MOVS     R1,R5
   \   00000052   0x0020             MOVS     R0,R4
   \   00000054   0x.... 0x....      BL       USBD_GetStatus
    166              break;
   \   00000058   0xE00D             B.N      ??USBD_StdDevReq_8
    167              
    168              
    169            case USB_REQ_SET_FEATURE:   
    170              USBD_SetFeature (pdev , req);    
   \                     ??USBD_StdDevReq_2: (+1)
   \   0000005A   0x0029             MOVS     R1,R5
   \   0000005C   0x0020             MOVS     R0,R4
   \   0000005E   0x.... 0x....      BL       USBD_SetFeature
    171              break;
   \   00000062   0xE008             B.N      ??USBD_StdDevReq_8
    172              
    173            case USB_REQ_CLEAR_FEATURE:                                   
    174              USBD_ClrFeature (pdev , req);
   \                     ??USBD_StdDevReq_1: (+1)
   \   00000064   0x0029             MOVS     R1,R5
   \   00000066   0x0020             MOVS     R0,R4
   \   00000068   0x.... 0x....      BL       USBD_ClrFeature
    175              break;
   \   0000006C   0xE003             B.N      ??USBD_StdDevReq_8
    176              
    177            default:  
    178              USBD_CtlError(pdev , req);
   \                     ??USBD_StdDevReq_7: (+1)
   \   0000006E   0x0029             MOVS     R1,R5
   \   00000070   0x0020             MOVS     R0,R4
   \   00000072   0x.... 0x....      BL       USBD_CtlError
    179              break;
    180            }
    181            
    182            return ret;
   \                     ??USBD_StdDevReq_8: (+1)
   \   00000076   0x0030             MOVS     R0,R6
   \   00000078   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007A   0xBD70             POP      {R4-R6,PC}       ;; return
    183          }
    184          
    185          /**
    186          * @brief  USBD_StdItfReq
    187          *         Handle standard usb interface requests
    188          * @param  pdev: USB OTG device instance
    189          * @param  req: usb request
    190          * @retval status
    191          */

   \                                 In section .text, align 2, keep-with-next
    192          USBD_Status  USBD_StdItfReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
    193          {
   \                     USBD_StdItfReq: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    194            USBD_Status ret = USBD_OK; 
   \   00000006   0x2600             MOVS     R6,#+0
    195            
    196            switch (pdev->dev.device_status) 
   \   00000008   0xF894 0x0112      LDRB     R0,[R4, #+274]
   \   0000000C   0x2803             CMP      R0,#+3
   \   0000000E   0xD117             BNE.N    ??USBD_StdItfReq_0
    197            {
    198            case USB_OTG_CONFIGURED:
    199              
    200              if (LOBYTE(req->wIndex) <= USBD_ITF_MAX_NUM) 
   \   00000010   0x7928             LDRB     R0,[R5, #+4]
   \   00000012   0x2802             CMP      R0,#+2
   \   00000014   0xDA0F             BGE.N    ??USBD_StdItfReq_1
    201              {
    202                pdev->dev.class_cb->Setup (pdev, req); 
   \   00000016   0x0029             MOVS     R1,R5
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0xF8D4 0x25E0      LDR      R2,[R4, #+1504]
   \   0000001E   0x6892             LDR      R2,[R2, #+8]
   \   00000020   0x4790             BLX      R2
    203                
    204                if((req->wLength == 0)&& (ret == USBD_OK))
   \   00000022   0x88E8             LDRH     R0,[R5, #+6]
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD10A             BNE.N    ??USBD_StdItfReq_2
   \   00000028   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000002A   0x2E00             CMP      R6,#+0
   \   0000002C   0xD107             BNE.N    ??USBD_StdItfReq_2
    205                {
    206                   USBD_CtlSendStatus(pdev);
   \   0000002E   0x0020             MOVS     R0,R4
   \   00000030   0x.... 0x....      BL       USBD_CtlSendStatus
   \   00000034   0xE003             B.N      ??USBD_StdItfReq_2
    207                }
    208              } 
    209              else 
    210              {                                               
    211                 USBD_CtlError(pdev , req);
   \                     ??USBD_StdItfReq_1: (+1)
   \   00000036   0x0029             MOVS     R1,R5
   \   00000038   0x0020             MOVS     R0,R4
   \   0000003A   0x.... 0x....      BL       USBD_CtlError
    212              }
    213              break;
   \                     ??USBD_StdItfReq_2: (+1)
   \   0000003E   0xE003             B.N      ??USBD_StdItfReq_3
    214              
    215            default:
    216               USBD_CtlError(pdev , req);
   \                     ??USBD_StdItfReq_0: (+1)
   \   00000040   0x0029             MOVS     R1,R5
   \   00000042   0x0020             MOVS     R0,R4
   \   00000044   0x.... 0x....      BL       USBD_CtlError
    217              break;
    218            }
    219            return ret;
   \                     ??USBD_StdItfReq_3: (+1)
   \   00000048   0x0030             MOVS     R0,R6
   \   0000004A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004C   0xBD70             POP      {R4-R6,PC}       ;; return
    220          }
    221          
    222          /**
    223          * @brief  USBD_StdEPReq
    224          *         Handle standard usb endpoint requests
    225          * @param  pdev: USB OTG device instance
    226          * @param  req: usb request
    227          * @retval status
    228          */

   \                                 In section .text, align 2, keep-with-next
    229          USBD_Status  USBD_StdEPReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
    230          {
   \                     USBD_StdEPReq: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    231            
    232            uint8_t   ep_addr;
    233            USBD_Status ret = USBD_OK; 
   \   00000006   0x2700             MOVS     R7,#+0
    234            
    235            ep_addr  = LOBYTE(req->wIndex);   
   \   00000008   0x88A8             LDRH     R0,[R5, #+4]
   \   0000000A   0x0006             MOVS     R6,R0
    236            
    237            switch (req->bRequest) 
   \   0000000C   0x7868             LDRB     R0,[R5, #+1]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD064             BEQ.N    ??USBD_StdEPReq_0
   \   00000012   0x2801             CMP      R0,#+1
   \   00000014   0xD032             BEQ.N    ??USBD_StdEPReq_1
   \   00000016   0x2803             CMP      R0,#+3
   \   00000018   0xF040 0x80A5      BNE.W    ??USBD_StdEPReq_2
    238            {
    239              
    240            case USB_REQ_SET_FEATURE :
    241              
    242              switch (pdev->dev.device_status) 
   \                     ??USBD_StdEPReq_3: (+1)
   \   0000001C   0xF894 0x0112      LDRB     R0,[R4, #+274]
   \   00000020   0x2802             CMP      R0,#+2
   \   00000022   0xD002             BEQ.N    ??USBD_StdEPReq_4
   \   00000024   0x2803             CMP      R0,#+3
   \   00000026   0xD00C             BEQ.N    ??USBD_StdEPReq_5
   \   00000028   0xE023             B.N      ??USBD_StdEPReq_6
    243              {
    244              case USB_OTG_ADDRESSED:          
    245                if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
   \                     ??USBD_StdEPReq_4: (+1)
   \   0000002A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000002C   0x2E00             CMP      R6,#+0
   \   0000002E   0xD007             BEQ.N    ??USBD_StdEPReq_7
   \   00000030   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000032   0x2E80             CMP      R6,#+128
   \   00000034   0xD004             BEQ.N    ??USBD_StdEPReq_7
    246                {
    247                  DCD_EP_Stall(pdev , ep_addr);
   \   00000036   0x0031             MOVS     R1,R6
   \   00000038   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0x.... 0x....      BL       DCD_EP_Stall
    248                }
    249                break;	
   \                     ??USBD_StdEPReq_7: (+1)
   \   00000040   0xE01B             B.N      ??USBD_StdEPReq_8
    250                
    251              case USB_OTG_CONFIGURED:   
    252                if (req->wValue == USB_FEATURE_EP_HALT)
   \                     ??USBD_StdEPReq_5: (+1)
   \   00000042   0x8868             LDRH     R0,[R5, #+2]
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD10A             BNE.N    ??USBD_StdEPReq_9
    253                {
    254                  if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
   \   00000048   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000004A   0x2E00             CMP      R6,#+0
   \   0000004C   0xD007             BEQ.N    ??USBD_StdEPReq_9
   \   0000004E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000050   0x2E80             CMP      R6,#+128
   \   00000052   0xD004             BEQ.N    ??USBD_StdEPReq_9
    255                  { 
    256                    DCD_EP_Stall(pdev , ep_addr);
   \   00000054   0x0031             MOVS     R1,R6
   \   00000056   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000058   0x0020             MOVS     R0,R4
   \   0000005A   0x.... 0x....      BL       DCD_EP_Stall
    257                    
    258                  }
    259                }
    260                pdev->dev.class_cb->Setup (pdev, req);   
   \                     ??USBD_StdEPReq_9: (+1)
   \   0000005E   0x0029             MOVS     R1,R5
   \   00000060   0x0020             MOVS     R0,R4
   \   00000062   0xF8D4 0x25E0      LDR      R2,[R4, #+1504]
   \   00000066   0x6892             LDR      R2,[R2, #+8]
   \   00000068   0x4790             BLX      R2
    261                USBD_CtlSendStatus(pdev);
   \   0000006A   0x0020             MOVS     R0,R4
   \   0000006C   0x.... 0x....      BL       USBD_CtlSendStatus
    262                
    263                break;
   \   00000070   0xE003             B.N      ??USBD_StdEPReq_8
    264                
    265              default:                         
    266                USBD_CtlError(pdev , req);
   \                     ??USBD_StdEPReq_6: (+1)
   \   00000072   0x0029             MOVS     R1,R5
   \   00000074   0x0020             MOVS     R0,R4
   \   00000076   0x.... 0x....      BL       USBD_CtlError
    267                break;    
    268              }
    269              break;
   \                     ??USBD_StdEPReq_8: (+1)
   \   0000007A   0xE074             B.N      ??USBD_StdEPReq_10
    270              
    271            case USB_REQ_CLEAR_FEATURE :
    272              
    273              switch (pdev->dev.device_status) 
   \                     ??USBD_StdEPReq_1: (+1)
   \   0000007C   0xF894 0x0112      LDRB     R0,[R4, #+274]
   \   00000080   0x2802             CMP      R0,#+2
   \   00000082   0xD002             BEQ.N    ??USBD_StdEPReq_11
   \   00000084   0x2803             CMP      R0,#+3
   \   00000086   0xD00C             BEQ.N    ??USBD_StdEPReq_12
   \   00000088   0xE023             B.N      ??USBD_StdEPReq_13
    274              {
    275              case USB_OTG_ADDRESSED:          
    276                if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
   \                     ??USBD_StdEPReq_11: (+1)
   \   0000008A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000008C   0x2E00             CMP      R6,#+0
   \   0000008E   0xD007             BEQ.N    ??USBD_StdEPReq_14
   \   00000090   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000092   0x2E80             CMP      R6,#+128
   \   00000094   0xD004             BEQ.N    ??USBD_StdEPReq_14
    277                {
    278                  DCD_EP_Stall(pdev , ep_addr);
   \   00000096   0x0031             MOVS     R1,R6
   \   00000098   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000009A   0x0020             MOVS     R0,R4
   \   0000009C   0x.... 0x....      BL       DCD_EP_Stall
    279                }
    280                break;	
   \                     ??USBD_StdEPReq_14: (+1)
   \   000000A0   0xE01B             B.N      ??USBD_StdEPReq_15
    281                
    282              case USB_OTG_CONFIGURED:   
    283                if (req->wValue == USB_FEATURE_EP_HALT)
   \                     ??USBD_StdEPReq_12: (+1)
   \   000000A2   0x8868             LDRH     R0,[R5, #+2]
   \   000000A4   0x2800             CMP      R0,#+0
   \   000000A6   0xD113             BNE.N    ??USBD_StdEPReq_16
    284                {
    285                  if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
   \   000000A8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000AA   0x2E00             CMP      R6,#+0
   \   000000AC   0xD00D             BEQ.N    ??USBD_StdEPReq_17
   \   000000AE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000B0   0x2E80             CMP      R6,#+128
   \   000000B2   0xD00A             BEQ.N    ??USBD_StdEPReq_17
    286                  {        
    287                    DCD_EP_ClrStall(pdev , ep_addr);
   \   000000B4   0x0031             MOVS     R1,R6
   \   000000B6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000B8   0x0020             MOVS     R0,R4
   \   000000BA   0x.... 0x....      BL       DCD_EP_ClrStall
    288                    pdev->dev.class_cb->Setup (pdev, req);
   \   000000BE   0x0029             MOVS     R1,R5
   \   000000C0   0x0020             MOVS     R0,R4
   \   000000C2   0xF8D4 0x25E0      LDR      R2,[R4, #+1504]
   \   000000C6   0x6892             LDR      R2,[R2, #+8]
   \   000000C8   0x4790             BLX      R2
    289                  }
    290                  USBD_CtlSendStatus(pdev);
   \                     ??USBD_StdEPReq_17: (+1)
   \   000000CA   0x0020             MOVS     R0,R4
   \   000000CC   0x.... 0x....      BL       USBD_CtlSendStatus
    291                }
    292                break;
   \                     ??USBD_StdEPReq_16: (+1)
   \   000000D0   0xE003             B.N      ??USBD_StdEPReq_15
    293                
    294              default:                         
    295                 USBD_CtlError(pdev , req);
   \                     ??USBD_StdEPReq_13: (+1)
   \   000000D2   0x0029             MOVS     R1,R5
   \   000000D4   0x0020             MOVS     R0,R4
   \   000000D6   0x.... 0x....      BL       USBD_CtlError
    296                break;    
    297              }
    298              break;
   \                     ??USBD_StdEPReq_15: (+1)
   \   000000DA   0xE044             B.N      ??USBD_StdEPReq_10
    299              
    300            case USB_REQ_GET_STATUS:                  
    301              switch (pdev->dev.device_status) 
   \                     ??USBD_StdEPReq_0: (+1)
   \   000000DC   0xF894 0x0112      LDRB     R0,[R4, #+274]
   \   000000E0   0x2802             CMP      R0,#+2
   \   000000E2   0xD002             BEQ.N    ??USBD_StdEPReq_18
   \   000000E4   0x2803             CMP      R0,#+3
   \   000000E6   0xD00C             BEQ.N    ??USBD_StdEPReq_19
   \   000000E8   0xE038             B.N      ??USBD_StdEPReq_20
    302              {
    303              case USB_OTG_ADDRESSED:          
    304                if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
   \                     ??USBD_StdEPReq_18: (+1)
   \   000000EA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000EC   0x2E00             CMP      R6,#+0
   \   000000EE   0xD007             BEQ.N    ??USBD_StdEPReq_21
   \   000000F0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000F2   0x2E80             CMP      R6,#+128
   \   000000F4   0xD004             BEQ.N    ??USBD_StdEPReq_21
    305                {
    306                  DCD_EP_Stall(pdev , ep_addr);
   \   000000F6   0x0031             MOVS     R1,R6
   \   000000F8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000FA   0x0020             MOVS     R0,R4
   \   000000FC   0x.... 0x....      BL       DCD_EP_Stall
    307                }
    308                break;	
   \                     ??USBD_StdEPReq_21: (+1)
   \   00000100   0xE030             B.N      ??USBD_StdEPReq_22
    309                
    310              case USB_OTG_CONFIGURED:         
    311                
    312                
    313                if ((ep_addr & 0x80)== 0x80)
   \                     ??USBD_StdEPReq_19: (+1)
   \   00000102   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000104   0x0630             LSLS     R0,R6,#+24
   \   00000106   0xD512             BPL.N    ??USBD_StdEPReq_23
    314                {
    315                  if(pdev->dev.in_ep[ep_addr & 0x7F].is_stall)
   \   00000108   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000010A   0xF016 0x007F      ANDS     R0,R6,#0x7F
   \   0000010E   0x2128             MOVS     R1,#+40
   \   00000110   0xFB01 0x4000      MLA      R0,R1,R0,R4
   \   00000114   0xF890 0x011A      LDRB     R0,[R0, #+282]
   \   00000118   0x2800             CMP      R0,#+0
   \   0000011A   0xD004             BEQ.N    ??USBD_StdEPReq_24
    316                  {
    317                    USBD_ep_status = 0x0001;     
   \   0000011C   0x2001             MOVS     R0,#+1
   \   0000011E   0x.... 0x....      LDR.W    R1,??DataTable3
   \   00000122   0x6008             STR      R0,[R1, #+0]
   \   00000124   0xE014             B.N      ??USBD_StdEPReq_25
    318                  }
    319                  else
    320                  {
    321                    USBD_ep_status = 0x0000;  
   \                     ??USBD_StdEPReq_24: (+1)
   \   00000126   0x2000             MOVS     R0,#+0
   \   00000128   0x....             LDR.N    R1,??DataTable3
   \   0000012A   0x6008             STR      R0,[R1, #+0]
   \   0000012C   0xE010             B.N      ??USBD_StdEPReq_25
    322                  }
    323                }
    324                else if ((ep_addr & 0x80)== 0x00)
   \                     ??USBD_StdEPReq_23: (+1)
   \   0000012E   0x0630             LSLS     R0,R6,#+24
   \   00000130   0xD40E             BMI.N    ??USBD_StdEPReq_25
    325                {
    326                  if(pdev->dev.out_ep[ep_addr].is_stall)
   \   00000132   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000134   0x2028             MOVS     R0,#+40
   \   00000136   0xFB00 0x4006      MLA      R0,R0,R6,R4
   \   0000013A   0xF890 0x0372      LDRB     R0,[R0, #+882]
   \   0000013E   0x2800             CMP      R0,#+0
   \   00000140   0xD003             BEQ.N    ??USBD_StdEPReq_26
    327                  {
    328                    USBD_ep_status = 0x0001;     
   \   00000142   0x2001             MOVS     R0,#+1
   \   00000144   0x....             LDR.N    R1,??DataTable3
   \   00000146   0x6008             STR      R0,[R1, #+0]
   \   00000148   0xE002             B.N      ??USBD_StdEPReq_25
    329                  }
    330                  
    331                  else 
    332                  {
    333                    USBD_ep_status = 0x0000;     
   \                     ??USBD_StdEPReq_26: (+1)
   \   0000014A   0x2000             MOVS     R0,#+0
   \   0000014C   0x....             LDR.N    R1,??DataTable3
   \   0000014E   0x6008             STR      R0,[R1, #+0]
    334                  }      
    335                }
    336                USBD_CtlSendData (pdev,
    337                                  (uint8_t *)&USBD_ep_status,
    338                                  2);
   \                     ??USBD_StdEPReq_25: (+1)
   \   00000150   0x2202             MOVS     R2,#+2
   \   00000152   0x....             LDR.N    R1,??DataTable3
   \   00000154   0x0020             MOVS     R0,R4
   \   00000156   0x.... 0x....      BL       USBD_CtlSendData
    339                break;
   \   0000015A   0xE003             B.N      ??USBD_StdEPReq_22
    340                
    341              default:                         
    342                 USBD_CtlError(pdev , req);
   \                     ??USBD_StdEPReq_20: (+1)
   \   0000015C   0x0029             MOVS     R1,R5
   \   0000015E   0x0020             MOVS     R0,R4
   \   00000160   0x.... 0x....      BL       USBD_CtlError
    343                break;
    344              }
    345              break;
   \                     ??USBD_StdEPReq_22: (+1)
   \   00000164   0xE7FF             B.N      ??USBD_StdEPReq_10
    346              
    347            default:
    348              break;
    349            }
    350            return ret;
   \                     ??USBD_StdEPReq_2: (+1)
   \                     ??USBD_StdEPReq_10: (+1)
   \   00000166   0x0038             MOVS     R0,R7
   \   00000168   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000016A   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    351          }
    352          /**
    353          * @brief  USBD_GetDescriptor
    354          *         Handle Get Descriptor requests
    355          * @param  pdev: device instance
    356          * @param  req: usb request
    357          * @retval status
    358          */

   \                                 In section .text, align 2, keep-with-next
    359          static void USBD_GetDescriptor(USB_OTG_CORE_HANDLE  *pdev, 
    360                                         USB_SETUP_REQ *req)
    361          {
   \                     USBD_GetDescriptor: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    362            uint16_t len;
    363            uint8_t *pbuf;
    364            
    365            switch (req->wValue >> 8)
   \   00000008   0x8868             LDRH     R0,[R5, #+2]
   \   0000000A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000C   0x0A00             LSRS     R0,R0,#+8
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x2801             CMP      R0,#+1
   \   00000012   0xD008             BEQ.N    ??USBD_GetDescriptor_0
   \   00000014   0x2802             CMP      R0,#+2
   \   00000016   0xD018             BEQ.N    ??USBD_GetDescriptor_1
   \   00000018   0x2803             CMP      R0,#+3
   \   0000001A   0xD022             BEQ.N    ??USBD_GetDescriptor_2
   \   0000001C   0x2806             CMP      R0,#+6
   \   0000001E   0xD062             BEQ.N    ??USBD_GetDescriptor_3
   \   00000020   0x2807             CMP      R0,#+7
   \   00000022   0xD065             BEQ.N    ??USBD_GetDescriptor_4
   \   00000024   0xE069             B.N      ??USBD_GetDescriptor_5
    366            {
    367            case USB_DESC_TYPE_DEVICE:
    368              pbuf = pdev->dev.usr_device->GetDeviceDescriptor(pdev->cfg.speed, &len);
   \                     ??USBD_GetDescriptor_0: (+1)
   \   00000026   0x4669             MOV      R1,SP
   \   00000028   0x78A0             LDRB     R0,[R4, #+2]
   \   0000002A   0xF8D4 0x25E8      LDR      R2,[R4, #+1512]
   \   0000002E   0x6812             LDR      R2,[R2, #+0]
   \   00000030   0x4790             BLX      R2
   \   00000032   0x0006             MOVS     R6,R0
    369              if ((req->wLength == 64) ||( pdev->dev.device_status == USB_OTG_DEFAULT))  
   \   00000034   0x88E8             LDRH     R0,[R5, #+6]
   \   00000036   0x2840             CMP      R0,#+64
   \   00000038   0xD003             BEQ.N    ??USBD_GetDescriptor_6
   \   0000003A   0xF894 0x0112      LDRB     R0,[R4, #+274]
   \   0000003E   0x2801             CMP      R0,#+1
   \   00000040   0xD102             BNE.N    ??USBD_GetDescriptor_7
    370              {                  
    371                len = 8;
   \                     ??USBD_GetDescriptor_6: (+1)
   \   00000042   0x2008             MOVS     R0,#+8
   \   00000044   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    372              }
    373              break;
   \                     ??USBD_GetDescriptor_7: (+1)
   \   00000048   0xE05C             B.N      ??USBD_GetDescriptor_8
    374              
    375            case USB_DESC_TYPE_CONFIGURATION:
    376                pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->cfg.speed, &len);
   \                     ??USBD_GetDescriptor_1: (+1)
   \   0000004A   0x4669             MOV      R1,SP
   \   0000004C   0x78A0             LDRB     R0,[R4, #+2]
   \   0000004E   0xF8D4 0x25E0      LDR      R2,[R4, #+1504]
   \   00000052   0x6A92             LDR      R2,[R2, #+40]
   \   00000054   0x4790             BLX      R2
   \   00000056   0x0006             MOVS     R6,R0
    377          #ifdef USB_OTG_HS_CORE
    378              if((pdev->cfg.speed == USB_OTG_SPEED_FULL )&&
    379                 (pdev->cfg.phy_itface  == USB_OTG_ULPI_PHY))
    380              {
    381                pbuf   = (uint8_t *)pdev->dev.class_cb->GetOtherConfigDescriptor(pdev->cfg.speed, &len);
    382              }
    383          #endif  
    384              pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
   \   00000058   0x2002             MOVS     R0,#+2
   \   0000005A   0x7070             STRB     R0,[R6, #+1]
    385              pdev->dev.pConfig_descriptor = pbuf;    
   \   0000005C   0xF8C4 0x65EC      STR      R6,[R4, #+1516]
    386              break;
   \   00000060   0xE050             B.N      ??USBD_GetDescriptor_8
    387              
    388            case USB_DESC_TYPE_STRING:
    389              switch ((uint8_t)(req->wValue))
   \                     ??USBD_GetDescriptor_2: (+1)
   \   00000062   0x78A8             LDRB     R0,[R5, #+2]
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD008             BEQ.N    ??USBD_GetDescriptor_9
   \   00000068   0x2802             CMP      R0,#+2
   \   0000006A   0xD016             BEQ.N    ??USBD_GetDescriptor_10
   \   0000006C   0xD30D             BCC.N    ??USBD_GetDescriptor_11
   \   0000006E   0x2804             CMP      R0,#+4
   \   00000070   0xD023             BEQ.N    ??USBD_GetDescriptor_12
   \   00000072   0xD31A             BCC.N    ??USBD_GetDescriptor_13
   \   00000074   0x2805             CMP      R0,#+5
   \   00000076   0xD028             BEQ.N    ??USBD_GetDescriptor_14
   \   00000078   0xE02F             B.N      ??USBD_GetDescriptor_15
    390              {
    391              case USBD_IDX_LANGID_STR:
    392               pbuf = pdev->dev.usr_device->GetLangIDStrDescriptor(pdev->cfg.speed, &len);        
   \                     ??USBD_GetDescriptor_9: (+1)
   \   0000007A   0x4669             MOV      R1,SP
   \   0000007C   0x78A0             LDRB     R0,[R4, #+2]
   \   0000007E   0xF8D4 0x25E8      LDR      R2,[R4, #+1512]
   \   00000082   0x6852             LDR      R2,[R2, #+4]
   \   00000084   0x4790             BLX      R2
   \   00000086   0x0006             MOVS     R6,R0
    393                break;
   \   00000088   0xE02C             B.N      ??USBD_GetDescriptor_16
    394                
    395              case USBD_IDX_MFC_STR:
    396                pbuf = pdev->dev.usr_device->GetManufacturerStrDescriptor(pdev->cfg.speed, &len);
   \                     ??USBD_GetDescriptor_11: (+1)
   \   0000008A   0x4669             MOV      R1,SP
   \   0000008C   0x78A0             LDRB     R0,[R4, #+2]
   \   0000008E   0xF8D4 0x25E8      LDR      R2,[R4, #+1512]
   \   00000092   0x6892             LDR      R2,[R2, #+8]
   \   00000094   0x4790             BLX      R2
   \   00000096   0x0006             MOVS     R6,R0
    397                break;
   \   00000098   0xE024             B.N      ??USBD_GetDescriptor_16
    398                
    399              case USBD_IDX_PRODUCT_STR:
    400                pbuf = pdev->dev.usr_device->GetProductStrDescriptor(pdev->cfg.speed, &len);
   \                     ??USBD_GetDescriptor_10: (+1)
   \   0000009A   0x4669             MOV      R1,SP
   \   0000009C   0x78A0             LDRB     R0,[R4, #+2]
   \   0000009E   0xF8D4 0x25E8      LDR      R2,[R4, #+1512]
   \   000000A2   0x68D2             LDR      R2,[R2, #+12]
   \   000000A4   0x4790             BLX      R2
   \   000000A6   0x0006             MOVS     R6,R0
    401                break;
   \   000000A8   0xE01C             B.N      ??USBD_GetDescriptor_16
    402                
    403              case USBD_IDX_SERIAL_STR:
    404                pbuf = pdev->dev.usr_device->GetSerialStrDescriptor(pdev->cfg.speed, &len);
   \                     ??USBD_GetDescriptor_13: (+1)
   \   000000AA   0x4669             MOV      R1,SP
   \   000000AC   0x78A0             LDRB     R0,[R4, #+2]
   \   000000AE   0xF8D4 0x25E8      LDR      R2,[R4, #+1512]
   \   000000B2   0x6912             LDR      R2,[R2, #+16]
   \   000000B4   0x4790             BLX      R2
   \   000000B6   0x0006             MOVS     R6,R0
    405                break;
   \   000000B8   0xE014             B.N      ??USBD_GetDescriptor_16
    406                
    407              case USBD_IDX_CONFIG_STR:
    408                pbuf = pdev->dev.usr_device->GetConfigurationStrDescriptor(pdev->cfg.speed, &len);
   \                     ??USBD_GetDescriptor_12: (+1)
   \   000000BA   0x4669             MOV      R1,SP
   \   000000BC   0x78A0             LDRB     R0,[R4, #+2]
   \   000000BE   0xF8D4 0x25E8      LDR      R2,[R4, #+1512]
   \   000000C2   0x6952             LDR      R2,[R2, #+20]
   \   000000C4   0x4790             BLX      R2
   \   000000C6   0x0006             MOVS     R6,R0
    409                break;
   \   000000C8   0xE00C             B.N      ??USBD_GetDescriptor_16
    410                
    411              case USBD_IDX_INTERFACE_STR:
    412                pbuf = pdev->dev.usr_device->GetInterfaceStrDescriptor(pdev->cfg.speed, &len);
   \                     ??USBD_GetDescriptor_14: (+1)
   \   000000CA   0x4669             MOV      R1,SP
   \   000000CC   0x78A0             LDRB     R0,[R4, #+2]
   \   000000CE   0xF8D4 0x25E8      LDR      R2,[R4, #+1512]
   \   000000D2   0x6992             LDR      R2,[R2, #+24]
   \   000000D4   0x4790             BLX      R2
   \   000000D6   0x0006             MOVS     R6,R0
    413                break;
   \   000000D8   0xE004             B.N      ??USBD_GetDescriptor_16
    414                
    415              default:
    416          #ifdef USB_SUPPORT_USER_STRING_DESC
    417                pbuf = pdev->dev.class_cb->GetUsrStrDescriptor(pdev->cfg.speed, (req->wValue) , &len);
    418                break;
    419          #else      
    420                 USBD_CtlError(pdev , req);
   \                     ??USBD_GetDescriptor_15: (+1)
   \   000000DA   0x0029             MOVS     R1,R5
   \   000000DC   0x0020             MOVS     R0,R4
   \   000000DE   0x.... 0x....      BL       USBD_CtlError
    421                return;
   \   000000E2   0xE029             B.N      ??USBD_GetDescriptor_17
    422          #endif /* USBD_CtlError(pdev , req); */      
    423              }
    424              break;
   \                     ??USBD_GetDescriptor_16: (+1)
   \   000000E4   0xE00E             B.N      ??USBD_GetDescriptor_8
    425            case USB_DESC_TYPE_DEVICE_QUALIFIER:                   
    426          #ifdef USB_OTG_HS_CORE
    427              if(pdev->cfg.speed == USB_OTG_SPEED_HIGH  )   
    428              {
    429                
    430                pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->cfg.speed, &len);
    431                      
    432                USBD_DeviceQualifierDesc[4]= pbuf[14];
    433                USBD_DeviceQualifierDesc[5]= pbuf[15];
    434                USBD_DeviceQualifierDesc[6]= pbuf[16];
    435                
    436                pbuf = USBD_DeviceQualifierDesc;
    437                len  = USB_LEN_DEV_QUALIFIER_DESC;
    438                break;
    439              }
    440              else
    441              {
    442                USBD_CtlError(pdev , req);
    443                return;
    444              }
    445          #else
    446                USBD_CtlError(pdev , req);
   \                     ??USBD_GetDescriptor_3: (+1)
   \   000000E6   0x0029             MOVS     R1,R5
   \   000000E8   0x0020             MOVS     R0,R4
   \   000000EA   0x.... 0x....      BL       USBD_CtlError
    447                return;
   \   000000EE   0xE023             B.N      ??USBD_GetDescriptor_17
    448          #endif    
    449          
    450            case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    451          #ifdef USB_OTG_HS_CORE   
    452          
    453              if(pdev->cfg.speed == USB_OTG_SPEED_HIGH  )   
    454              {
    455                pbuf   = (uint8_t *)pdev->dev.class_cb->GetOtherConfigDescriptor(pdev->cfg.speed, &len);
    456                pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
    457                break; 
    458              }
    459              else
    460              {
    461                USBD_CtlError(pdev , req);
    462                return;
    463              }
    464          #else
    465                USBD_CtlError(pdev , req);
   \                     ??USBD_GetDescriptor_4: (+1)
   \   000000F0   0x0029             MOVS     R1,R5
   \   000000F2   0x0020             MOVS     R0,R4
   \   000000F4   0x.... 0x....      BL       USBD_CtlError
    466                return;
   \   000000F8   0xE01E             B.N      ??USBD_GetDescriptor_17
    467          #endif     
    468          
    469              
    470            default: 
    471               USBD_CtlError(pdev , req);
   \                     ??USBD_GetDescriptor_5: (+1)
   \   000000FA   0x0029             MOVS     R1,R5
   \   000000FC   0x0020             MOVS     R0,R4
   \   000000FE   0x.... 0x....      BL       USBD_CtlError
    472              return;
   \   00000102   0xE019             B.N      ??USBD_GetDescriptor_17
    473            }
    474            
    475            if((len != 0)&& (req->wLength != 0))
   \                     ??USBD_GetDescriptor_8: (+1)
   \   00000104   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000108   0x2800             CMP      R0,#+0
   \   0000010A   0xD015             BEQ.N    ??USBD_GetDescriptor_18
   \   0000010C   0x88E8             LDRH     R0,[R5, #+6]
   \   0000010E   0x2800             CMP      R0,#+0
   \   00000110   0xD012             BEQ.N    ??USBD_GetDescriptor_18
    476            {
    477              
    478              len = MIN(len , req->wLength);
   \   00000112   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000116   0x88E9             LDRH     R1,[R5, #+6]
   \   00000118   0x4288             CMP      R0,R1
   \   0000011A   0xD204             BCS.N    ??USBD_GetDescriptor_19
   \   0000011C   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000120   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \   00000124   0xE002             B.N      ??USBD_GetDescriptor_20
   \                     ??USBD_GetDescriptor_19: (+1)
   \   00000126   0x88E8             LDRH     R0,[R5, #+6]
   \   00000128   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    479              
    480              USBD_CtlSendData (pdev, 
    481                                pbuf,
    482                                len);
   \                     ??USBD_GetDescriptor_20: (+1)
   \   0000012C   0xF8BD 0x2000      LDRH     R2,[SP, #+0]
   \   00000130   0x0031             MOVS     R1,R6
   \   00000132   0x0020             MOVS     R0,R4
   \   00000134   0x.... 0x....      BL       USBD_CtlSendData
    483            }
    484            
    485          }
   \                     ??USBD_GetDescriptor_18: (+1)
   \                     ??USBD_GetDescriptor_17: (+1)
   \   00000138   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    486          
    487          /**
    488          * @brief  USBD_SetAddress
    489          *         Set device address
    490          * @param  pdev: device instance
    491          * @param  req: usb request
    492          * @retval status
    493          */

   \                                 In section .text, align 2, keep-with-next
    494          static void USBD_SetAddress(USB_OTG_CORE_HANDLE  *pdev, 
    495                                      USB_SETUP_REQ *req)
    496          {
   \                     USBD_SetAddress: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    497            uint8_t  dev_addr; 
    498            
    499            if ((req->wIndex == 0) && (req->wLength == 0)) 
   \   00000006   0x88A8             LDRH     R0,[R5, #+4]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD124             BNE.N    ??USBD_SetAddress_0
   \   0000000C   0x88E8             LDRH     R0,[R5, #+6]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD121             BNE.N    ??USBD_SetAddress_0
    500            {
    501              dev_addr = (uint8_t)(req->wValue) & 0x7F;     
   \   00000012   0x78A8             LDRB     R0,[R5, #+2]
   \   00000014   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   00000018   0x0006             MOVS     R6,R0
    502              
    503              if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
   \   0000001A   0xF894 0x0112      LDRB     R0,[R4, #+274]
   \   0000001E   0x2803             CMP      R0,#+3
   \   00000020   0xD104             BNE.N    ??USBD_SetAddress_1
    504              {
    505                USBD_CtlError(pdev , req);
   \   00000022   0x0029             MOVS     R1,R5
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x.... 0x....      BL       USBD_CtlError
   \   0000002A   0xE018             B.N      ??USBD_SetAddress_2
    506              } 
    507              else 
    508              {
    509                pdev->dev.device_address = dev_addr;
   \                     ??USBD_SetAddress_1: (+1)
   \   0000002C   0xF884 0x6113      STRB     R6,[R4, #+275]
    510                DCD_EP_SetAddress(pdev, dev_addr);               
   \   00000030   0x0031             MOVS     R1,R6
   \   00000032   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0x.... 0x....      BL       DCD_EP_SetAddress
    511                USBD_CtlSendStatus(pdev);                         
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0x.... 0x....      BL       USBD_CtlSendStatus
    512                
    513                if (dev_addr != 0) 
   \   00000040   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000042   0x2E00             CMP      R6,#+0
   \   00000044   0xD003             BEQ.N    ??USBD_SetAddress_3
    514                {
    515                  pdev->dev.device_status  = USB_OTG_ADDRESSED;
   \   00000046   0x2002             MOVS     R0,#+2
   \   00000048   0xF884 0x0112      STRB     R0,[R4, #+274]
   \   0000004C   0xE007             B.N      ??USBD_SetAddress_2
    516                } 
    517                else 
    518                {
    519                  pdev->dev.device_status  = USB_OTG_DEFAULT; 
   \                     ??USBD_SetAddress_3: (+1)
   \   0000004E   0x2001             MOVS     R0,#+1
   \   00000050   0xF884 0x0112      STRB     R0,[R4, #+274]
   \   00000054   0xE003             B.N      ??USBD_SetAddress_2
    520                }
    521              }
    522            } 
    523            else 
    524            {
    525               USBD_CtlError(pdev , req);                        
   \                     ??USBD_SetAddress_0: (+1)
   \   00000056   0x0029             MOVS     R1,R5
   \   00000058   0x0020             MOVS     R0,R4
   \   0000005A   0x.... 0x....      BL       USBD_CtlError
    526            } 
    527          }
   \                     ??USBD_SetAddress_2: (+1)
   \   0000005E   0xBD70             POP      {R4-R6,PC}       ;; return
    528          
    529          /**
    530          * @brief  USBD_SetConfig
    531          *         Handle Set device configuration request
    532          * @param  pdev: device instance
    533          * @param  req: usb request
    534          * @retval status
    535          */

   \                                 In section .text, align 2, keep-with-next
    536          static void USBD_SetConfig(USB_OTG_CORE_HANDLE  *pdev, 
    537                                     USB_SETUP_REQ *req)
    538          {
   \                     USBD_SetConfig: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    539            
    540            static uint8_t  cfgidx;
    541            
    542            cfgidx = (uint8_t)(req->wValue);                 
   \   00000006   0x8868             LDRH     R0,[R5, #+2]
   \   00000008   0x....             LDR.N    R1,??DataTable3_1
   \   0000000A   0x7008             STRB     R0,[R1, #+0]
    543            
    544            if (cfgidx > USBD_CFG_MAX_NUM ) 
   \   0000000C   0x....             LDR.N    R0,??DataTable3_1
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x2802             CMP      R0,#+2
   \   00000012   0xDB04             BLT.N    ??USBD_SetConfig_0
    545            {            
    546               USBD_CtlError(pdev , req);                              
   \   00000014   0x0029             MOVS     R1,R5
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x.... 0x....      BL       USBD_CtlError
   \   0000001C   0xE052             B.N      ??USBD_SetConfig_1
    547            } 
    548            else 
    549            {
    550              switch (pdev->dev.device_status) 
   \                     ??USBD_SetConfig_0: (+1)
   \   0000001E   0xF894 0x0112      LDRB     R0,[R4, #+274]
   \   00000022   0x2802             CMP      R0,#+2
   \   00000024   0xD002             BEQ.N    ??USBD_SetConfig_2
   \   00000026   0x2803             CMP      R0,#+3
   \   00000028   0xD018             BEQ.N    ??USBD_SetConfig_3
   \   0000002A   0xE047             B.N      ??USBD_SetConfig_4
    551              {
    552              case USB_OTG_ADDRESSED:
    553                if (cfgidx) 
   \                     ??USBD_SetConfig_2: (+1)
   \   0000002C   0x....             LDR.N    R0,??DataTable3_1
   \   0000002E   0x7800             LDRB     R0,[R0, #+0]
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD00F             BEQ.N    ??USBD_SetConfig_5
    554                {                                			   							   							   				
    555                  pdev->dev.device_config = cfgidx;
   \   00000034   0x....             LDR.N    R0,??DataTable3_1
   \   00000036   0x7800             LDRB     R0,[R0, #+0]
   \   00000038   0xF884 0x0110      STRB     R0,[R4, #+272]
    556                  pdev->dev.device_status = USB_OTG_CONFIGURED;
   \   0000003C   0x2003             MOVS     R0,#+3
   \   0000003E   0xF884 0x0112      STRB     R0,[R4, #+274]
    557                  USBD_SetCfg(pdev , cfgidx);
   \   00000042   0x....             LDR.N    R0,??DataTable3_1
   \   00000044   0x7801             LDRB     R1,[R0, #+0]
   \   00000046   0x0020             MOVS     R0,R4
   \   00000048   0x.... 0x....      BL       USBD_SetCfg
    558                  USBD_CtlSendStatus(pdev);
   \   0000004C   0x0020             MOVS     R0,R4
   \   0000004E   0x.... 0x....      BL       USBD_CtlSendStatus
   \   00000052   0xE002             B.N      ??USBD_SetConfig_6
    559                }
    560                else 
    561                {
    562                   USBD_CtlSendStatus(pdev);
   \                     ??USBD_SetConfig_5: (+1)
   \   00000054   0x0020             MOVS     R0,R4
   \   00000056   0x.... 0x....      BL       USBD_CtlSendStatus
    563                }
    564                break;
   \                     ??USBD_SetConfig_6: (+1)
   \   0000005A   0xE033             B.N      ??USBD_SetConfig_1
    565                
    566              case USB_OTG_CONFIGURED:
    567                if (cfgidx == 0) 
   \                     ??USBD_SetConfig_3: (+1)
   \   0000005C   0x....             LDR.N    R0,??DataTable3_1
   \   0000005E   0x7800             LDRB     R0,[R0, #+0]
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD10F             BNE.N    ??USBD_SetConfig_7
    568                {                           
    569                  pdev->dev.device_status = USB_OTG_ADDRESSED;
   \   00000064   0x2002             MOVS     R0,#+2
   \   00000066   0xF884 0x0112      STRB     R0,[R4, #+274]
    570                  pdev->dev.device_config = cfgidx;          
   \   0000006A   0x....             LDR.N    R0,??DataTable3_1
   \   0000006C   0x7800             LDRB     R0,[R0, #+0]
   \   0000006E   0xF884 0x0110      STRB     R0,[R4, #+272]
    571                  USBD_ClrCfg(pdev , cfgidx);
   \   00000072   0x....             LDR.N    R0,??DataTable3_1
   \   00000074   0x7801             LDRB     R1,[R0, #+0]
   \   00000076   0x0020             MOVS     R0,R4
   \   00000078   0x.... 0x....      BL       USBD_ClrCfg
    572                  USBD_CtlSendStatus(pdev);
   \   0000007C   0x0020             MOVS     R0,R4
   \   0000007E   0x.... 0x....      BL       USBD_CtlSendStatus
   \   00000082   0xE01A             B.N      ??USBD_SetConfig_8
    573                  
    574                } 
    575                else  if (cfgidx != pdev->dev.device_config) 
   \                     ??USBD_SetConfig_7: (+1)
   \   00000084   0x....             LDR.N    R0,??DataTable3_1
   \   00000086   0x7800             LDRB     R0,[R0, #+0]
   \   00000088   0xF894 0x1110      LDRB     R1,[R4, #+272]
   \   0000008C   0x4288             CMP      R0,R1
   \   0000008E   0xD011             BEQ.N    ??USBD_SetConfig_9
    576                {
    577                  /* Clear old configuration */
    578                  USBD_ClrCfg(pdev , pdev->dev.device_config);
   \   00000090   0xF894 0x1110      LDRB     R1,[R4, #+272]
   \   00000094   0x0020             MOVS     R0,R4
   \   00000096   0x.... 0x....      BL       USBD_ClrCfg
    579                  
    580                  /* set new configuration */
    581                  pdev->dev.device_config = cfgidx;
   \   0000009A   0x....             LDR.N    R0,??DataTable3_1
   \   0000009C   0x7800             LDRB     R0,[R0, #+0]
   \   0000009E   0xF884 0x0110      STRB     R0,[R4, #+272]
    582                  USBD_SetCfg(pdev , cfgidx);
   \   000000A2   0x....             LDR.N    R0,??DataTable3_1
   \   000000A4   0x7801             LDRB     R1,[R0, #+0]
   \   000000A6   0x0020             MOVS     R0,R4
   \   000000A8   0x.... 0x....      BL       USBD_SetCfg
    583                  USBD_CtlSendStatus(pdev);
   \   000000AC   0x0020             MOVS     R0,R4
   \   000000AE   0x.... 0x....      BL       USBD_CtlSendStatus
   \   000000B2   0xE002             B.N      ??USBD_SetConfig_8
    584                }
    585                else
    586                {
    587                  USBD_CtlSendStatus(pdev);
   \                     ??USBD_SetConfig_9: (+1)
   \   000000B4   0x0020             MOVS     R0,R4
   \   000000B6   0x.... 0x....      BL       USBD_CtlSendStatus
    588                }
    589                break;
   \                     ??USBD_SetConfig_8: (+1)
   \   000000BA   0xE003             B.N      ??USBD_SetConfig_1
    590                
    591              default:					
    592                 USBD_CtlError(pdev , req);                     
   \                     ??USBD_SetConfig_4: (+1)
   \   000000BC   0x0029             MOVS     R1,R5
   \   000000BE   0x0020             MOVS     R0,R4
   \   000000C0   0x.... 0x....      BL       USBD_CtlError
    593                break;
    594              }
    595            }
    596          }
   \                     ??USBD_SetConfig_1: (+1)
   \   000000C4   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .bss, align 1
   \                     ??cfgidx:
   \   00000000                      DS8 1
    597          
    598          /**
    599          * @brief  USBD_GetConfig
    600          *         Handle Get device configuration request
    601          * @param  pdev: device instance
    602          * @param  req: usb request
    603          * @retval status
    604          */

   \                                 In section .text, align 2, keep-with-next
    605          static void USBD_GetConfig(USB_OTG_CORE_HANDLE  *pdev, 
    606                                     USB_SETUP_REQ *req)
    607          {
   \                     USBD_GetConfig: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    608           
    609            if (req->wLength != 1) 
   \   00000006   0x88E8             LDRH     R0,[R5, #+6]
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD004             BEQ.N    ??USBD_GetConfig_0
    610            {                   
    611               USBD_CtlError(pdev , req);
   \   0000000C   0x0029             MOVS     R1,R5
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       USBD_CtlError
   \   00000014   0xE017             B.N      ??USBD_GetConfig_1
    612            }
    613            else 
    614            {
    615              switch (pdev->dev.device_status )  
   \                     ??USBD_GetConfig_0: (+1)
   \   00000016   0xF894 0x0112      LDRB     R0,[R4, #+274]
   \   0000001A   0x2802             CMP      R0,#+2
   \   0000001C   0xD002             BEQ.N    ??USBD_GetConfig_2
   \   0000001E   0x2803             CMP      R0,#+3
   \   00000020   0xD006             BEQ.N    ??USBD_GetConfig_3
   \   00000022   0xE00C             B.N      ??USBD_GetConfig_4
    616              {
    617              case USB_OTG_ADDRESSED:                     
    618                
    619                USBD_CtlSendData (pdev, 
    620                                  (uint8_t *)&USBD_default_cfg,
    621                                  1);
   \                     ??USBD_GetConfig_2: (+1)
   \   00000024   0x2201             MOVS     R2,#+1
   \   00000026   0x....             LDR.N    R1,??DataTable3_2
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0x.... 0x....      BL       USBD_CtlSendData
    622                break;
   \   0000002E   0xE00A             B.N      ??USBD_GetConfig_1
    623                
    624              case USB_OTG_CONFIGURED:                   
    625                
    626                USBD_CtlSendData (pdev, 
    627                                  &pdev->dev.device_config,
    628                                  1);
   \                     ??USBD_GetConfig_3: (+1)
   \   00000030   0x2201             MOVS     R2,#+1
   \   00000032   0xF514 0x7188      ADDS     R1,R4,#+272
   \   00000036   0x0020             MOVS     R0,R4
   \   00000038   0x.... 0x....      BL       USBD_CtlSendData
    629                break;
   \   0000003C   0xE003             B.N      ??USBD_GetConfig_1
    630                
    631              default:
    632                 USBD_CtlError(pdev , req);
   \                     ??USBD_GetConfig_4: (+1)
   \   0000003E   0x0029             MOVS     R1,R5
   \   00000040   0x0020             MOVS     R0,R4
   \   00000042   0x.... 0x....      BL       USBD_CtlError
    633                break;
    634              }
    635            }
    636          }
   \                     ??USBD_GetConfig_1: (+1)
   \   00000046   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    637          
    638          /**
    639          * @brief  USBD_GetStatus
    640          *         Handle Get Status request
    641          * @param  pdev: device instance
    642          * @param  req: usb request
    643          * @retval status
    644          */

   \                                 In section .text, align 2, keep-with-next
    645          static void USBD_GetStatus(USB_OTG_CORE_HANDLE  *pdev, 
    646                                     USB_SETUP_REQ *req)
    647          {
   \                     USBD_GetStatus: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    648            
    649            switch (pdev->dev.device_status) 
   \   00000006   0xF894 0x0112      LDRB     R0,[R4, #+274]
   \   0000000A   0x1E80             SUBS     R0,R0,#+2
   \   0000000C   0x2801             CMP      R0,#+1
   \   0000000E   0xD810             BHI.N    ??USBD_GetStatus_0
    650            {
    651            case USB_OTG_ADDRESSED:
    652            case USB_OTG_CONFIGURED:
    653              
    654              if (pdev->dev.DevRemoteWakeup) 
   \                     ??USBD_GetStatus_1: (+1)
   \   00000010   0xF8D4 0x0114      LDR      R0,[R4, #+276]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD003             BEQ.N    ??USBD_GetStatus_2
    655              {
    656                USBD_cfg_status = USB_CONFIG_SELF_POWERED | USB_CONFIG_REMOTE_WAKEUP;                                
   \   00000018   0x2003             MOVS     R0,#+3
   \   0000001A   0x....             LDR.N    R1,??DataTable3_3
   \   0000001C   0x6008             STR      R0,[R1, #+0]
   \   0000001E   0xE002             B.N      ??USBD_GetStatus_3
    657              }
    658              else
    659              {
    660                USBD_cfg_status = USB_CONFIG_SELF_POWERED;   
   \                     ??USBD_GetStatus_2: (+1)
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x....             LDR.N    R1,??DataTable3_3
   \   00000024   0x6008             STR      R0,[R1, #+0]
    661              }
    662              
    663              USBD_CtlSendData (pdev, 
    664                                (uint8_t *)&USBD_cfg_status,
    665                                1);
   \                     ??USBD_GetStatus_3: (+1)
   \   00000026   0x2201             MOVS     R2,#+1
   \   00000028   0x....             LDR.N    R1,??DataTable3_3
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0x.... 0x....      BL       USBD_CtlSendData
    666              break;
   \   00000030   0xE003             B.N      ??USBD_GetStatus_4
    667              
    668            default :
    669              USBD_CtlError(pdev , req);                        
   \                     ??USBD_GetStatus_0: (+1)
   \   00000032   0x0029             MOVS     R1,R5
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0x.... 0x....      BL       USBD_CtlError
    670              break;
    671            }
    672          }
   \                     ??USBD_GetStatus_4: (+1)
   \   0000003A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    673          
    674          
    675          /**
    676          * @brief  USBD_SetFeature
    677          *         Handle Set device feature request
    678          * @param  pdev: device instance
    679          * @param  req: usb request
    680          * @retval status
    681          */

   \                                 In section .text, align 2, keep-with-next
    682          static void USBD_SetFeature(USB_OTG_CORE_HANDLE  *pdev, 
    683                                      USB_SETUP_REQ *req)
    684          {
   \                     USBD_SetFeature: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    685          
    686            USB_OTG_DCTL_TypeDef     dctl;
    687            uint8_t test_mode = 0;
   \   00000006   0x2700             MOVS     R7,#+0
    688           
    689            if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
   \   00000008   0x8868             LDRH     R0,[R5, #+2]
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xD10C             BNE.N    ??USBD_SetFeature_0
    690            {
    691              pdev->dev.DevRemoteWakeup = 1;  
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xF8C4 0x0114      STR      R0,[R4, #+276]
    692              pdev->dev.class_cb->Setup (pdev, req);   
   \   00000014   0x0029             MOVS     R1,R5
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0xF8D4 0x25E0      LDR      R2,[R4, #+1504]
   \   0000001C   0x6892             LDR      R2,[R2, #+8]
   \   0000001E   0x4790             BLX      R2
    693              USBD_CtlSendStatus(pdev);
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       USBD_CtlSendStatus
   \   00000026   0xE02F             B.N      ??USBD_SetFeature_1
    694            }
    695          
    696            else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
    697                     ((req->wIndex & 0xFF) == 0))
   \                     ??USBD_SetFeature_0: (+1)
   \   00000028   0x8868             LDRH     R0,[R5, #+2]
   \   0000002A   0x2802             CMP      R0,#+2
   \   0000002C   0xD12C             BNE.N    ??USBD_SetFeature_1
   \   0000002E   0x7928             LDRB     R0,[R5, #+4]
   \   00000030   0x0600             LSLS     R0,R0,#+24
   \   00000032   0xD129             BNE.N    ??USBD_SetFeature_1
    698            {
    699              dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
   \   00000034   0x6920             LDR      R0,[R4, #+16]
   \   00000036   0x6840             LDR      R0,[R0, #+4]
   \   00000038   0x0006             MOVS     R6,R0
    700              
    701              test_mode = req->wIndex >> 8;
   \   0000003A   0x88A8             LDRH     R0,[R5, #+4]
   \   0000003C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000003E   0x0A00             LSRS     R0,R0,#+8
   \   00000040   0x0007             MOVS     R7,R0
    702              switch (test_mode) 
   \   00000042   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000044   0x2F01             CMP      R7,#+1
   \   00000046   0xD007             BEQ.N    ??USBD_SetFeature_2
   \   00000048   0xD319             BCC.N    ??USBD_SetFeature_3
   \   0000004A   0x2F03             CMP      R7,#+3
   \   0000004C   0xD00C             BEQ.N    ??USBD_SetFeature_4
   \   0000004E   0xD307             BCC.N    ??USBD_SetFeature_5
   \   00000050   0x2F05             CMP      R7,#+5
   \   00000052   0xD011             BEQ.N    ??USBD_SetFeature_6
   \   00000054   0xD30C             BCC.N    ??USBD_SetFeature_7
   \   00000056   0xE012             B.N      ??USBD_SetFeature_3
    703              {
    704              case 1: // TEST_J
    705                dctl.b.tstctl = 1;
   \                     ??USBD_SetFeature_2: (+1)
   \   00000058   0x2001             MOVS     R0,#+1
   \   0000005A   0xF360 0x1606      BFI      R6,R0,#+4,#+3
    706                break;
   \   0000005E   0xE00E             B.N      ??USBD_SetFeature_3
    707                
    708              case 2: // TEST_K	
    709                dctl.b.tstctl = 2;
   \                     ??USBD_SetFeature_5: (+1)
   \   00000060   0x2002             MOVS     R0,#+2
   \   00000062   0xF360 0x1606      BFI      R6,R0,#+4,#+3
    710                break;
   \   00000066   0xE00A             B.N      ??USBD_SetFeature_3
    711                
    712              case 3: // TEST_SE0_NAK
    713                dctl.b.tstctl = 3;
   \                     ??USBD_SetFeature_4: (+1)
   \   00000068   0x2003             MOVS     R0,#+3
   \   0000006A   0xF360 0x1606      BFI      R6,R0,#+4,#+3
    714                break;
   \   0000006E   0xE006             B.N      ??USBD_SetFeature_3
    715                
    716              case 4: // TEST_PACKET
    717                dctl.b.tstctl = 4;
   \                     ??USBD_SetFeature_7: (+1)
   \   00000070   0x2004             MOVS     R0,#+4
   \   00000072   0xF360 0x1606      BFI      R6,R0,#+4,#+3
    718                break;
   \   00000076   0xE002             B.N      ??USBD_SetFeature_3
    719                
    720              case 5: // TEST_FORCE_ENABLE
    721                dctl.b.tstctl = 5;
   \                     ??USBD_SetFeature_6: (+1)
   \   00000078   0x2005             MOVS     R0,#+5
   \   0000007A   0xF360 0x1606      BFI      R6,R0,#+4,#+3
    722                break;
    723              }
    724              USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, dctl.d32);
   \                     ??USBD_SetFeature_3: (+1)
   \   0000007E   0x6920             LDR      R0,[R4, #+16]
   \   00000080   0x6046             STR      R6,[R0, #+4]
    725              USBD_CtlSendStatus(pdev);
   \   00000082   0x0020             MOVS     R0,R4
   \   00000084   0x.... 0x....      BL       USBD_CtlSendStatus
    726            }
    727          
    728          }
   \                     ??USBD_SetFeature_1: (+1)
   \   00000088   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    729          
    730          
    731          /**
    732          * @brief  USBD_ClrFeature
    733          *         Handle clear device feature request
    734          * @param  pdev: device instance
    735          * @param  req: usb request
    736          * @retval status
    737          */

   \                                 In section .text, align 2, keep-with-next
    738          static void USBD_ClrFeature(USB_OTG_CORE_HANDLE  *pdev, 
    739                                      USB_SETUP_REQ *req)
    740          {
   \                     USBD_ClrFeature: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    741            switch (pdev->dev.device_status)
   \   00000006   0xF894 0x0112      LDRB     R0,[R4, #+274]
   \   0000000A   0x1E80             SUBS     R0,R0,#+2
   \   0000000C   0x2801             CMP      R0,#+1
   \   0000000E   0xD80F             BHI.N    ??USBD_ClrFeature_0
    742            {
    743            case USB_OTG_ADDRESSED:
    744            case USB_OTG_CONFIGURED:
    745              if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
   \                     ??USBD_ClrFeature_1: (+1)
   \   00000010   0x8868             LDRH     R0,[R5, #+2]
   \   00000012   0x2801             CMP      R0,#+1
   \   00000014   0xD10B             BNE.N    ??USBD_ClrFeature_2
    746              {
    747                pdev->dev.DevRemoteWakeup = 0; 
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF8C4 0x0114      STR      R0,[R4, #+276]
    748                pdev->dev.class_cb->Setup (pdev, req);   
   \   0000001C   0x0029             MOVS     R1,R5
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0xF8D4 0x25E0      LDR      R2,[R4, #+1504]
   \   00000024   0x6892             LDR      R2,[R2, #+8]
   \   00000026   0x4790             BLX      R2
    749                USBD_CtlSendStatus(pdev);
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0x.... 0x....      BL       USBD_CtlSendStatus
    750              }
    751              break;
   \                     ??USBD_ClrFeature_2: (+1)
   \   0000002E   0xE003             B.N      ??USBD_ClrFeature_3
    752              
    753            default :
    754               USBD_CtlError(pdev , req);
   \                     ??USBD_ClrFeature_0: (+1)
   \   00000030   0x0029             MOVS     R1,R5
   \   00000032   0x0020             MOVS     R0,R4
   \   00000034   0x.... 0x....      BL       USBD_CtlError
    755              break;
    756            }
    757          }
   \                     ??USBD_ClrFeature_3: (+1)
   \   00000038   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    758          
    759          /**
    760          * @brief  USBD_ParseSetupRequest 
    761          *         Copy buffer into setup structure
    762          * @param  pdev: device instance
    763          * @param  req: usb request
    764          * @retval None
    765          */
    766          

   \                                 In section .text, align 2, keep-with-next
    767          void USBD_ParseSetupRequest( USB_OTG_CORE_HANDLE  *pdev,
    768                                      USB_SETUP_REQ *req)
    769          {
    770            req->bmRequest     = *(uint8_t *)  (pdev->dev.setup_packet);
   \                     USBD_ParseSetupRequest: (+1)
   \   00000000   0xF890 0x25C8      LDRB     R2,[R0, #+1480]
   \   00000004   0x700A             STRB     R2,[R1, #+0]
    771            req->bRequest      = *(uint8_t *)  (pdev->dev.setup_packet +  1);
   \   00000006   0xF890 0x25C9      LDRB     R2,[R0, #+1481]
   \   0000000A   0x704A             STRB     R2,[R1, #+1]
    772            req->wValue        = SWAPBYTE      (pdev->dev.setup_packet +  2);
   \   0000000C   0xF890 0x25CA      LDRB     R2,[R0, #+1482]
   \   00000010   0xF890 0x35CB      LDRB     R3,[R0, #+1483]
   \   00000014   0x021B             LSLS     R3,R3,#+8
   \   00000016   0x189A             ADDS     R2,R3,R2
   \   00000018   0x804A             STRH     R2,[R1, #+2]
    773            req->wIndex        = SWAPBYTE      (pdev->dev.setup_packet +  4);
   \   0000001A   0xF890 0x25CC      LDRB     R2,[R0, #+1484]
   \   0000001E   0xF890 0x35CD      LDRB     R3,[R0, #+1485]
   \   00000022   0x021B             LSLS     R3,R3,#+8
   \   00000024   0x189A             ADDS     R2,R3,R2
   \   00000026   0x808A             STRH     R2,[R1, #+4]
    774            req->wLength       = SWAPBYTE      (pdev->dev.setup_packet +  6);
   \   00000028   0xF890 0x25CE      LDRB     R2,[R0, #+1486]
   \   0000002C   0xF890 0x35CF      LDRB     R3,[R0, #+1487]
   \   00000030   0x021B             LSLS     R3,R3,#+8
   \   00000032   0x189A             ADDS     R2,R3,R2
   \   00000034   0x80CA             STRH     R2,[R1, #+6]
    775            
    776            pdev->dev.in_ep[0].ctl_data_len = req->wLength  ;
   \   00000036   0x88CA             LDRH     R2,[R1, #+6]
   \   00000038   0xF8C0 0x213C      STR      R2,[R0, #+316]
    777            pdev->dev.device_state = USB_OTG_EP0_SETUP;
   \   0000003C   0x2201             MOVS     R2,#+1
   \   0000003E   0xF880 0x2111      STRB     R2,[R0, #+273]
    778          }
   \   00000042   0x4770             BX       LR               ;; return
    779          
    780          /**
    781          * @brief  USBD_CtlError 
    782          *         Handle USB low level Error
    783          * @param  pdev: device instance
    784          * @param  req: usb request
    785          * @retval None
    786          */
    787          

   \                                 In section .text, align 2, keep-with-next
    788          void USBD_CtlError( USB_OTG_CORE_HANDLE  *pdev,
    789                                      USB_SETUP_REQ *req)
    790          {
   \                     USBD_CtlError: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    791            if((req->bmRequest & 0x80) == 0x80)
   \   00000006   0x7828             LDRB     R0,[R5, #+0]
   \   00000008   0x0600             LSLS     R0,R0,#+24
   \   0000000A   0xD504             BPL.N    ??USBD_CtlError_0
    792            {
    793              DCD_EP_Stall(pdev , 0x80);
   \   0000000C   0x2180             MOVS     R1,#+128
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       DCD_EP_Stall
   \   00000014   0xE00B             B.N      ??USBD_CtlError_1
    794            }
    795            else 
    796            {
    797              if(req->wLength == 0)
   \                     ??USBD_CtlError_0: (+1)
   \   00000016   0x88E8             LDRH     R0,[R5, #+6]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD104             BNE.N    ??USBD_CtlError_2
    798              {
    799                 DCD_EP_Stall(pdev , 0x80);
   \   0000001C   0x2180             MOVS     R1,#+128
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x.... 0x....      BL       DCD_EP_Stall
   \   00000024   0xE003             B.N      ??USBD_CtlError_1
    800              }
    801              else
    802              {
    803                DCD_EP_Stall(pdev , 0);
   \                     ??USBD_CtlError_2: (+1)
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0x.... 0x....      BL       DCD_EP_Stall
    804              }
    805            }
    806            USB_OTG_EP0_OutStart(pdev);  
   \                     ??USBD_CtlError_1: (+1)
   \   0000002E   0x0020             MOVS     R0,R4
   \   00000030   0x.... 0x....      BL       USB_OTG_EP0_OutStart
    807          }
   \   00000034   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    808          
    809          
    810          /**
    811            * @brief  USBD_GetString
    812            *         Convert Ascii string into unicode one
    813            * @param  desc : descriptor buffer
    814            * @param  unicode : Formatted string buffer (unicode)
    815            * @param  len : descriptor length
    816            * @retval None
    817            */

   \                                 In section .text, align 2, keep-with-next
    818          void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
    819          {
   \                     USBD_GetString: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    820            uint8_t idx = 0;
   \   00000008   0x2700             MOVS     R7,#+0
    821            
    822            if (desc != NULL) 
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xD01A             BEQ.N    ??USBD_GetString_0
    823            {
    824              *len =  USBD_GetLen(desc) * 2 + 2;    
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       USBD_GetLen
   \   00000014   0x0040             LSLS     R0,R0,#+1
   \   00000016   0x1C80             ADDS     R0,R0,#+2
   \   00000018   0x8030             STRH     R0,[R6, #+0]
    825              unicode[idx++] = *len;
   \   0000001A   0x8830             LDRH     R0,[R6, #+0]
   \   0000001C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000001E   0x5578             STRB     R0,[R7, R5]
   \   00000020   0x1C7F             ADDS     R7,R7,#+1
    826              unicode[idx++] =  USB_DESC_TYPE_STRING;
   \   00000022   0x2003             MOVS     R0,#+3
   \   00000024   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000026   0x5578             STRB     R0,[R7, R5]
   \   00000028   0x1C7F             ADDS     R7,R7,#+1
    827              
    828              while (*desc != NULL) 
   \                     ??USBD_GetString_1: (+1)
   \   0000002A   0x7820             LDRB     R0,[R4, #+0]
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD009             BEQ.N    ??USBD_GetString_0
    829              {
    830                unicode[idx++] = *desc++;
   \   00000030   0x7820             LDRB     R0,[R4, #+0]
   \   00000032   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000034   0x5578             STRB     R0,[R7, R5]
   \   00000036   0x1C64             ADDS     R4,R4,#+1
   \   00000038   0x1C7F             ADDS     R7,R7,#+1
    831                unicode[idx++] =  0x00;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000003E   0x5578             STRB     R0,[R7, R5]
   \   00000040   0x1C7F             ADDS     R7,R7,#+1
   \   00000042   0xE7F2             B.N      ??USBD_GetString_1
    832              }
    833            } 
    834          }
   \                     ??USBD_GetString_0: (+1)
   \   00000044   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    835          
    836          /**
    837            * @brief  USBD_GetLen
    838            *         return the string length
    839             * @param  buf : pointer to the ascii string buffer
    840            * @retval string length
    841            */

   \                                 In section .text, align 2, keep-with-next
    842          static uint8_t USBD_GetLen(uint8_t *buf)
    843          {
   \                     USBD_GetLen: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    844              uint8_t  len = 0;
   \   00000002   0x2000             MOVS     R0,#+0
    845          
    846              while (*buf != NULL) 
   \                     ??USBD_GetLen_0: (+1)
   \   00000004   0x780A             LDRB     R2,[R1, #+0]
   \   00000006   0x2A00             CMP      R2,#+0
   \   00000008   0xD002             BEQ.N    ??USBD_GetLen_1
    847              {
    848                  len++;
   \   0000000A   0x1C40             ADDS     R0,R0,#+1
    849                  buf++;
   \   0000000C   0x1C49             ADDS     R1,R1,#+1
   \   0000000E   0xE7F9             B.N      ??USBD_GetLen_0
    850              }
    851          
    852              return len;
   \                     ??USBD_GetLen_1: (+1)
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x4770             BX       LR               ;; return
    853          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     USBD_ep_status

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     ??cfgidx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     USBD_default_cfg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     USBD_cfg_status
    854          /**
    855            * @}
    856            */ 
    857          
    858          
    859          /**
    860            * @}
    861            */ 
    862          
    863          
    864          /**
    865            * @}
    866            */ 
    867          
    868          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   USBD_ClrFeature
        16   -- Indirect call
        16   -> USBD_CtlError
        16   -> USBD_CtlSendStatus
      16   USBD_CtlError
        16   -> DCD_EP_Stall
        16   -> USB_OTG_EP0_OutStart
      16   USBD_GetConfig
        16   -> USBD_CtlError
        16   -> USBD_CtlSendData
      24   USBD_GetDescriptor
        24   -- Indirect call
        24   -> USBD_CtlError
        24   -> USBD_CtlSendData
       0   USBD_GetLen
      16   USBD_GetStatus
        16   -> USBD_CtlError
        16   -> USBD_CtlSendData
      24   USBD_GetString
        24   -> USBD_GetLen
       0   USBD_ParseSetupRequest
      16   USBD_SetAddress
        16   -> DCD_EP_SetAddress
        16   -> USBD_CtlError
        16   -> USBD_CtlSendStatus
      16   USBD_SetConfig
        16   -> USBD_ClrCfg
        16   -> USBD_CtlError
        16   -> USBD_CtlSendStatus
        16   -> USBD_SetCfg
      24   USBD_SetFeature
        24   -- Indirect call
        24   -> USBD_CtlSendStatus
      16   USBD_StdDevReq
        16   -> USBD_ClrFeature
        16   -> USBD_CtlError
        16   -> USBD_GetConfig
        16   -> USBD_GetDescriptor
        16   -> USBD_GetStatus
        16   -> USBD_SetAddress
        16   -> USBD_SetConfig
        16   -> USBD_SetFeature
      24   USBD_StdEPReq
        24   -- Indirect call
        24   -> DCD_EP_ClrStall
        24   -> DCD_EP_Stall
        24   -> USBD_CtlError
        24   -> USBD_CtlSendData
        24   -> USBD_CtlSendStatus
      16   USBD_StdItfReq
        16   -- Indirect call
        16   -> USBD_CtlError
        16   -> USBD_CtlSendStatus


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
      58  USBD_ClrFeature
      54  USBD_CtlError
      72  USBD_GetConfig
     314  USBD_GetDescriptor
      20  USBD_GetLen
      60  USBD_GetStatus
      70  USBD_GetString
      68  USBD_ParseSetupRequest
      96  USBD_SetAddress
     198  USBD_SetConfig
     138  USBD_SetFeature
     124  USBD_StdDevReq
     364  USBD_StdEPReq
      78  USBD_StdItfReq
      52  USBD_StrDesc
       4  USBD_cfg_status
       4  USBD_default_cfg
       4  USBD_ep_status
       1  cfgidx

 
    65 bytes in section .bss
 1 730 bytes in section .text
 
 1 730 bytes of CODE memory
    65 bytes of DATA memory

Errors: none
Warnings: 1
