###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       06/May/2016  23:31:32
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\IAR
#        Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_exti.c
#    Command line =  
#        "D:\IAR
#        Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_exti.c"
#        -D USE_STDPERIPH_DRIVER -D STM32F4XX -D USE_FULL_ASSERT -lCN "D:\IAR
#        Workspace\STM32F407\VCP_ESP\Debug\List" -o "D:\IAR
#        Workspace\STM32F407\VCP_ESP\Debug\Obj" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\"
#        -I "D:\IAR Workspace\STM32F407\VCP_ESP\..\Libraries\CMSIS\Include\" -I
#        "D:\IAR Workspace\STM32F407\VCP_ESP\..\Utilities\STM32F4-Discovery\"
#        -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\..\Libraries\CMSIS\ST\STM32F4xx\Include\"
#        -I "D:\IAR Workspace\STM32F407\VCP_ESP\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_conf\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\cdc\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\otg\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\core\" -On --use_c++_inline -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        D:\IAR Workspace\STM32F407\VCP_ESP\Debug\List\stm32f4xx_exti.lst
#    Object file  =  
#        D:\IAR Workspace\STM32F407\VCP_ESP\Debug\Obj\stm32f4xx_exti.o
#
###############################################################################

D:\IAR Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_exti.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f4xx_exti.c
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    30-September-2011
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionalities of the EXTI peripheral:           
      9            *           - Initialization and Configuration
     10            *           - Interrupts and flags management
     11            *
     12            *  @verbatim  
     13            *  
     14            *          ===================================================================
     15            *                                     EXTI features
     16            *          ===================================================================
     17            *    
     18            *          External interrupt/event lines are mapped as following:
     19            *            1- All available GPIO pins are connected to the 16 external 
     20            *               interrupt/event lines from EXTI0 to EXTI15.
     21            *            2- EXTI line 16 is connected to the PVD Output
     22            *            3- EXTI line 17 is connected to the RTC Alarm event
     23            *            4- EXTI line 18 is connected to the USB OTG FS Wakeup from suspend event                                    
     24            *            5- EXTI line 19 is connected to the Ethernet Wakeup event
     25            *            6- EXTI line 20 is connected to the USB OTG HS (configured in FS) Wakeup event 
     26            *            7- EXTI line 21 is connected to the RTC Tamper and Time Stamp events                                               
     27            *            8- EXTI line 22 is connected to the RTC Wakeup event
     28            *        
     29            *          ===================================================================
     30            *                                 How to use this driver
     31            *          ===================================================================  
     32            *              
     33            *          In order to use an I/O pin as an external interrupt source, follow
     34            *          steps below:
     35            *            1- Configure the I/O in input mode using GPIO_Init()
     36            *            2- Select the input source pin for the EXTI line using SYSCFG_EXTILineConfig()
     37            *            3- Select the mode(interrupt, event) and configure the trigger 
     38            *               selection (Rising, falling or both) using EXTI_Init()
     39            *            4- Configure NVIC IRQ channel mapped to the EXTI line using NVIC_Init()
     40            *   
     41            *  @note  SYSCFG APB clock must be enabled to get write access to SYSCFG_EXTICRx
     42            *         registers using RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
     43            *          
     44            *  @endverbatim                  
     45            *
     46            ******************************************************************************
     47            * @attention
     48            *
     49            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     50            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     51            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     52            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     53            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     54            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     55            *
     56            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     57            ******************************************************************************
     58            */
     59          
     60          /* Includes ------------------------------------------------------------------*/
     61          #include "stm32f4xx_exti.h"
     62          
     63          /** @addtogroup STM32F4xx_StdPeriph_Driver
     64            * @{
     65            */
     66          
     67          /** @defgroup EXTI 
     68            * @brief EXTI driver modules
     69            * @{
     70            */
     71          
     72          /* Private typedef -----------------------------------------------------------*/
     73          /* Private define ------------------------------------------------------------*/
     74          
     75          #define EXTI_LINENONE    ((uint32_t)0x00000)  /* No interrupt selected */
     76          
     77          /* Private macro -------------------------------------------------------------*/
     78          /* Private variables ---------------------------------------------------------*/
     79          /* Private function prototypes -----------------------------------------------*/
     80          /* Private functions ---------------------------------------------------------*/
     81          
     82          /** @defgroup EXTI_Private_Functions
     83            * @{
     84            */
     85          
     86          /** @defgroup EXTI_Group1 Initialization and Configuration functions
     87           *  @brief   Initialization and Configuration functions 
     88           *
     89          @verbatim   
     90           ===============================================================================
     91                            Initialization and Configuration functions
     92           ===============================================================================  
     93          
     94          @endverbatim
     95            * @{
     96            */
     97          
     98          /**
     99            * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
    100            * @param  None
    101            * @retval None
    102            */

   \                                 In section .text, align 2, keep-with-next
    103          void EXTI_DeInit(void)
    104          {
    105            EXTI->IMR = 0x00000000;
   \                     EXTI_DeInit: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR.N    R1,??DataTable6  ;; 0x40013c00
   \   00000004   0x6008             STR      R0,[R1, #+0]
    106            EXTI->EMR = 0x00000000;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40013c04
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    107            EXTI->RTSR = 0x00000000;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x....             LDR.N    R1,??DataTable6_2  ;; 0x40013c08
   \   00000010   0x6008             STR      R0,[R1, #+0]
    108            EXTI->FTSR = 0x00000000;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x....             LDR.N    R1,??DataTable6_3  ;; 0x40013c0c
   \   00000016   0x6008             STR      R0,[R1, #+0]
    109            EXTI->PR = 0x007FFFFF;
   \   00000018   0x....             LDR.N    R0,??DataTable6_4  ;; 0x7fffff
   \   0000001A   0x....             LDR.N    R1,??DataTable6_5  ;; 0x40013c14
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    110          }
   \   0000001E   0x4770             BX       LR               ;; return
    111          
    112          /**
    113            * @brief  Initializes the EXTI peripheral according to the specified
    114            *         parameters in the EXTI_InitStruct.
    115            * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
    116            *         that contains the configuration information for the EXTI peripheral.
    117            * @retval None
    118            */

   \                                 In section .text, align 2, keep-with-next
    119          void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
    120          {
   \                     EXTI_Init: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    121            uint32_t tmp = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    122          
    123            /* Check the parameters */
    124            assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
   \   00000006   0x7920             LDRB     R0,[R4, #+4]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD006             BEQ.N    ??EXTI_Init_0
   \   0000000C   0x7920             LDRB     R0,[R4, #+4]
   \   0000000E   0x2804             CMP      R0,#+4
   \   00000010   0xD003             BEQ.N    ??EXTI_Init_0
   \   00000012   0x217C             MOVS     R1,#+124
   \   00000014   0x....             LDR.N    R0,??DataTable6_6
   \   00000016   0x.... 0x....      BL       assert_failed
    125            assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
   \                     ??EXTI_Init_0: (+1)
   \   0000001A   0x7960             LDRB     R0,[R4, #+5]
   \   0000001C   0x2808             CMP      R0,#+8
   \   0000001E   0xD009             BEQ.N    ??EXTI_Init_1
   \   00000020   0x7960             LDRB     R0,[R4, #+5]
   \   00000022   0x280C             CMP      R0,#+12
   \   00000024   0xD006             BEQ.N    ??EXTI_Init_1
   \   00000026   0x7960             LDRB     R0,[R4, #+5]
   \   00000028   0x2810             CMP      R0,#+16
   \   0000002A   0xD003             BEQ.N    ??EXTI_Init_1
   \   0000002C   0x217D             MOVS     R1,#+125
   \   0000002E   0x....             LDR.N    R0,??DataTable6_6
   \   00000030   0x.... 0x....      BL       assert_failed
    126            assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
   \                     ??EXTI_Init_1: (+1)
   \   00000034   0x6820             LDR      R0,[R4, #+0]
   \   00000036   0x0DC0             LSRS     R0,R0,#+23
   \   00000038   0x05C0             LSLS     R0,R0,#+23
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD102             BNE.N    ??EXTI_Init_2
   \   0000003E   0x6820             LDR      R0,[R4, #+0]
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD103             BNE.N    ??EXTI_Init_3
   \                     ??EXTI_Init_2: (+1)
   \   00000044   0x217E             MOVS     R1,#+126
   \   00000046   0x....             LDR.N    R0,??DataTable6_6
   \   00000048   0x.... 0x....      BL       assert_failed
    127            assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));
   \                     ??EXTI_Init_3: (+1)
   \   0000004C   0x79A0             LDRB     R0,[R4, #+6]
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD006             BEQ.N    ??EXTI_Init_4
   \   00000052   0x79A0             LDRB     R0,[R4, #+6]
   \   00000054   0x2801             CMP      R0,#+1
   \   00000056   0xD003             BEQ.N    ??EXTI_Init_4
   \   00000058   0x217F             MOVS     R1,#+127
   \   0000005A   0x....             LDR.N    R0,??DataTable6_6
   \   0000005C   0x.... 0x....      BL       assert_failed
    128          
    129            tmp = (uint32_t)EXTI_BASE;
   \                     ??EXTI_Init_4: (+1)
   \   00000060   0x....             LDR.N    R0,??DataTable6  ;; 0x40013c00
   \   00000062   0x0005             MOVS     R5,R0
    130               
    131            if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
   \   00000064   0x79A0             LDRB     R0,[R4, #+6]
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD036             BEQ.N    ??EXTI_Init_5
    132            {
    133              /* Clear EXTI line configuration */
    134              EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
   \   0000006A   0x....             LDR.N    R0,??DataTable6  ;; 0x40013c00
   \   0000006C   0x6800             LDR      R0,[R0, #+0]
   \   0000006E   0x6821             LDR      R1,[R4, #+0]
   \   00000070   0x4388             BICS     R0,R0,R1
   \   00000072   0x....             LDR.N    R1,??DataTable6  ;; 0x40013c00
   \   00000074   0x6008             STR      R0,[R1, #+0]
    135              EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
   \   00000076   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40013c04
   \   00000078   0x6800             LDR      R0,[R0, #+0]
   \   0000007A   0x6821             LDR      R1,[R4, #+0]
   \   0000007C   0x4388             BICS     R0,R0,R1
   \   0000007E   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40013c04
   \   00000080   0x6008             STR      R0,[R1, #+0]
    136              
    137              tmp += EXTI_InitStruct->EXTI_Mode;
   \   00000082   0x7920             LDRB     R0,[R4, #+4]
   \   00000084   0x182D             ADDS     R5,R5,R0
    138          
    139              *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
   \   00000086   0x6828             LDR      R0,[R5, #+0]
   \   00000088   0x6821             LDR      R1,[R4, #+0]
   \   0000008A   0x4308             ORRS     R0,R1,R0
   \   0000008C   0x6028             STR      R0,[R5, #+0]
    140          
    141              /* Clear Rising Falling edge configuration */
    142              EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
   \   0000008E   0x....             LDR.N    R0,??DataTable6_2  ;; 0x40013c08
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x6821             LDR      R1,[R4, #+0]
   \   00000094   0x4388             BICS     R0,R0,R1
   \   00000096   0x....             LDR.N    R1,??DataTable6_2  ;; 0x40013c08
   \   00000098   0x6008             STR      R0,[R1, #+0]
    143              EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
   \   0000009A   0x....             LDR.N    R0,??DataTable6_3  ;; 0x40013c0c
   \   0000009C   0x6800             LDR      R0,[R0, #+0]
   \   0000009E   0x6821             LDR      R1,[R4, #+0]
   \   000000A0   0x4388             BICS     R0,R0,R1
   \   000000A2   0x....             LDR.N    R1,??DataTable6_3  ;; 0x40013c0c
   \   000000A4   0x6008             STR      R0,[R1, #+0]
    144              
    145              /* Select the trigger for the selected external interrupts */
    146              if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
   \   000000A6   0x7960             LDRB     R0,[R4, #+5]
   \   000000A8   0x2810             CMP      R0,#+16
   \   000000AA   0xD10C             BNE.N    ??EXTI_Init_6
    147              {
    148                /* Rising Falling edge */
    149                EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
   \   000000AC   0x....             LDR.N    R0,??DataTable6_2  ;; 0x40013c08
   \   000000AE   0x6800             LDR      R0,[R0, #+0]
   \   000000B0   0x6821             LDR      R1,[R4, #+0]
   \   000000B2   0x4308             ORRS     R0,R1,R0
   \   000000B4   0x....             LDR.N    R1,??DataTable6_2  ;; 0x40013c08
   \   000000B6   0x6008             STR      R0,[R1, #+0]
    150                EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
   \   000000B8   0x....             LDR.N    R0,??DataTable6_3  ;; 0x40013c0c
   \   000000BA   0x6800             LDR      R0,[R0, #+0]
   \   000000BC   0x6821             LDR      R1,[R4, #+0]
   \   000000BE   0x4308             ORRS     R0,R1,R0
   \   000000C0   0x....             LDR.N    R1,??DataTable6_3  ;; 0x40013c0c
   \   000000C2   0x6008             STR      R0,[R1, #+0]
   \   000000C4   0xE00E             B.N      ??EXTI_Init_7
    151              }
    152              else
    153              {
    154                tmp = (uint32_t)EXTI_BASE;
   \                     ??EXTI_Init_6: (+1)
   \   000000C6   0x....             LDR.N    R0,??DataTable6  ;; 0x40013c00
   \   000000C8   0x0005             MOVS     R5,R0
    155                tmp += EXTI_InitStruct->EXTI_Trigger;
   \   000000CA   0x7960             LDRB     R0,[R4, #+5]
   \   000000CC   0x182D             ADDS     R5,R5,R0
    156          
    157                *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
   \   000000CE   0x6828             LDR      R0,[R5, #+0]
   \   000000D0   0x6821             LDR      R1,[R4, #+0]
   \   000000D2   0x4308             ORRS     R0,R1,R0
   \   000000D4   0x6028             STR      R0,[R5, #+0]
   \   000000D6   0xE005             B.N      ??EXTI_Init_7
    158              }
    159            }
    160            else
    161            {
    162              tmp += EXTI_InitStruct->EXTI_Mode;
   \                     ??EXTI_Init_5: (+1)
   \   000000D8   0x7920             LDRB     R0,[R4, #+4]
   \   000000DA   0x182D             ADDS     R5,R5,R0
    163          
    164              /* Disable the selected external lines */
    165              *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
   \   000000DC   0x6828             LDR      R0,[R5, #+0]
   \   000000DE   0x6821             LDR      R1,[R4, #+0]
   \   000000E0   0x4388             BICS     R0,R0,R1
   \   000000E2   0x6028             STR      R0,[R5, #+0]
    166            }
    167          }
   \                     ??EXTI_Init_7: (+1)
   \   000000E4   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    168          
    169          /**
    170            * @brief  Fills each EXTI_InitStruct member with its reset value.
    171            * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
    172            *         be initialized.
    173            * @retval None
    174            */

   \                                 In section .text, align 2, keep-with-next
    175          void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
    176          {
    177            EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
   \                     EXTI_StructInit: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x6001             STR      R1,[R0, #+0]
    178            EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x7101             STRB     R1,[R0, #+4]
    179            EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
   \   00000008   0x210C             MOVS     R1,#+12
   \   0000000A   0x7141             STRB     R1,[R0, #+5]
    180            EXTI_InitStruct->EXTI_LineCmd = DISABLE;
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x7181             STRB     R1,[R0, #+6]
    181          }
   \   00000010   0x4770             BX       LR               ;; return
    182          
    183          /**
    184            * @brief  Generates a Software interrupt on selected EXTI line.
    185            * @param  EXTI_Line: specifies the EXTI line on which the software interrupt
    186            *         will be generated.
    187            *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
    188            * @retval None
    189            */

   \                                 In section .text, align 2, keep-with-next
    190          void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
    191          {
   \                     EXTI_GenerateSWInterrupt: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    192            /* Check the parameters */
    193            assert_param(IS_EXTI_LINE(EXTI_Line));
   \   00000004   0x0DE0             LSRS     R0,R4,#+23
   \   00000006   0x05C0             LSLS     R0,R0,#+23
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD101             BNE.N    ??EXTI_GenerateSWInterrupt_0
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD103             BNE.N    ??EXTI_GenerateSWInterrupt_1
   \                     ??EXTI_GenerateSWInterrupt_0: (+1)
   \   00000010   0x21C1             MOVS     R1,#+193
   \   00000012   0x....             LDR.N    R0,??DataTable6_6
   \   00000014   0x.... 0x....      BL       assert_failed
    194            
    195            EXTI->SWIER |= EXTI_Line;
   \                     ??EXTI_GenerateSWInterrupt_1: (+1)
   \   00000018   0x....             LDR.N    R0,??DataTable6_7  ;; 0x40013c10
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x4320             ORRS     R0,R4,R0
   \   0000001E   0x....             LDR.N    R1,??DataTable6_7  ;; 0x40013c10
   \   00000020   0x6008             STR      R0,[R1, #+0]
    196          }
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    197          
    198          /**
    199            * @}
    200            */
    201          
    202          /** @defgroup EXTI_Group2 Interrupts and flags management functions
    203           *  @brief   Interrupts and flags management functions 
    204           *
    205          @verbatim   
    206           ===============================================================================
    207                            Interrupts and flags management functions
    208           ===============================================================================  
    209          
    210          @endverbatim
    211            * @{
    212            */
    213          
    214          /**
    215            * @brief  Checks whether the specified EXTI line flag is set or not.
    216            * @param  EXTI_Line: specifies the EXTI line flag to check.
    217            *          This parameter can be EXTI_Linex where x can be(0..22)
    218            * @retval The new state of EXTI_Line (SET or RESET).
    219            */

   \                                 In section .text, align 2, keep-with-next
    220          FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
    221          {
   \                     EXTI_GetFlagStatus: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    222            FlagStatus bitstatus = RESET;
   \   00000004   0x2500             MOVS     R5,#+0
    223            /* Check the parameters */
    224            assert_param(IS_GET_EXTI_LINE(EXTI_Line));
   \   00000006   0x2C01             CMP      R4,#+1
   \   00000008   0xD03E             BEQ.N    ??EXTI_GetFlagStatus_0
   \   0000000A   0x2C02             CMP      R4,#+2
   \   0000000C   0xD03C             BEQ.N    ??EXTI_GetFlagStatus_0
   \   0000000E   0x2C04             CMP      R4,#+4
   \   00000010   0xD03A             BEQ.N    ??EXTI_GetFlagStatus_0
   \   00000012   0x2C08             CMP      R4,#+8
   \   00000014   0xD038             BEQ.N    ??EXTI_GetFlagStatus_0
   \   00000016   0x2C10             CMP      R4,#+16
   \   00000018   0xD036             BEQ.N    ??EXTI_GetFlagStatus_0
   \   0000001A   0x2C20             CMP      R4,#+32
   \   0000001C   0xD034             BEQ.N    ??EXTI_GetFlagStatus_0
   \   0000001E   0x2C40             CMP      R4,#+64
   \   00000020   0xD032             BEQ.N    ??EXTI_GetFlagStatus_0
   \   00000022   0x2C80             CMP      R4,#+128
   \   00000024   0xD030             BEQ.N    ??EXTI_GetFlagStatus_0
   \   00000026   0xF5B4 0x7F80      CMP      R4,#+256
   \   0000002A   0xD02D             BEQ.N    ??EXTI_GetFlagStatus_0
   \   0000002C   0xF5B4 0x7F00      CMP      R4,#+512
   \   00000030   0xD02A             BEQ.N    ??EXTI_GetFlagStatus_0
   \   00000032   0xF5B4 0x6F80      CMP      R4,#+1024
   \   00000036   0xD027             BEQ.N    ??EXTI_GetFlagStatus_0
   \   00000038   0xF5B4 0x6F00      CMP      R4,#+2048
   \   0000003C   0xD024             BEQ.N    ??EXTI_GetFlagStatus_0
   \   0000003E   0xF5B4 0x5F80      CMP      R4,#+4096
   \   00000042   0xD021             BEQ.N    ??EXTI_GetFlagStatus_0
   \   00000044   0xF5B4 0x5F00      CMP      R4,#+8192
   \   00000048   0xD01E             BEQ.N    ??EXTI_GetFlagStatus_0
   \   0000004A   0xF5B4 0x4F80      CMP      R4,#+16384
   \   0000004E   0xD01B             BEQ.N    ??EXTI_GetFlagStatus_0
   \   00000050   0xF5B4 0x4F00      CMP      R4,#+32768
   \   00000054   0xD018             BEQ.N    ??EXTI_GetFlagStatus_0
   \   00000056   0xF5B4 0x3F80      CMP      R4,#+65536
   \   0000005A   0xD015             BEQ.N    ??EXTI_GetFlagStatus_0
   \   0000005C   0xF5B4 0x3F00      CMP      R4,#+131072
   \   00000060   0xD012             BEQ.N    ??EXTI_GetFlagStatus_0
   \   00000062   0xF5B4 0x2F80      CMP      R4,#+262144
   \   00000066   0xD00F             BEQ.N    ??EXTI_GetFlagStatus_0
   \   00000068   0xF5B4 0x2F00      CMP      R4,#+524288
   \   0000006C   0xD00C             BEQ.N    ??EXTI_GetFlagStatus_0
   \   0000006E   0xF5B4 0x1F80      CMP      R4,#+1048576
   \   00000072   0xD009             BEQ.N    ??EXTI_GetFlagStatus_0
   \   00000074   0xF5B4 0x1F00      CMP      R4,#+2097152
   \   00000078   0xD006             BEQ.N    ??EXTI_GetFlagStatus_0
   \   0000007A   0xF5B4 0x0F80      CMP      R4,#+4194304
   \   0000007E   0xD003             BEQ.N    ??EXTI_GetFlagStatus_0
   \   00000080   0x21E0             MOVS     R1,#+224
   \   00000082   0x....             LDR.N    R0,??DataTable6_6
   \   00000084   0x.... 0x....      BL       assert_failed
    225            
    226            if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
   \                     ??EXTI_GetFlagStatus_0: (+1)
   \   00000088   0x....             LDR.N    R0,??DataTable6_5  ;; 0x40013c14
   \   0000008A   0x6800             LDR      R0,[R0, #+0]
   \   0000008C   0x4220             TST      R0,R4
   \   0000008E   0xD002             BEQ.N    ??EXTI_GetFlagStatus_1
    227            {
    228              bitstatus = SET;
   \   00000090   0x2001             MOVS     R0,#+1
   \   00000092   0x0005             MOVS     R5,R0
   \   00000094   0xE001             B.N      ??EXTI_GetFlagStatus_2
    229            }
    230            else
    231            {
    232              bitstatus = RESET;
   \                     ??EXTI_GetFlagStatus_1: (+1)
   \   00000096   0x2000             MOVS     R0,#+0
   \   00000098   0x0005             MOVS     R5,R0
    233            }
    234            return bitstatus;
   \                     ??EXTI_GetFlagStatus_2: (+1)
   \   0000009A   0x0028             MOVS     R0,R5
   \   0000009C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    235          }
    236          
    237          /**
    238            * @brief  Clears the EXTI's line pending flags.
    239            * @param  EXTI_Line: specifies the EXTI lines flags to clear.
    240            *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
    241            * @retval None
    242            */

   \                                 In section .text, align 2, keep-with-next
    243          void EXTI_ClearFlag(uint32_t EXTI_Line)
    244          {
   \                     EXTI_ClearFlag: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    245            /* Check the parameters */
    246            assert_param(IS_EXTI_LINE(EXTI_Line));
   \   00000004   0x0DE0             LSRS     R0,R4,#+23
   \   00000006   0x05C0             LSLS     R0,R0,#+23
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD101             BNE.N    ??EXTI_ClearFlag_0
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD103             BNE.N    ??EXTI_ClearFlag_1
   \                     ??EXTI_ClearFlag_0: (+1)
   \   00000010   0x21F6             MOVS     R1,#+246
   \   00000012   0x....             LDR.N    R0,??DataTable6_6
   \   00000014   0x.... 0x....      BL       assert_failed
    247            
    248            EXTI->PR = EXTI_Line;
   \                     ??EXTI_ClearFlag_1: (+1)
   \   00000018   0x....             LDR.N    R0,??DataTable6_5  ;; 0x40013c14
   \   0000001A   0x6004             STR      R4,[R0, #+0]
    249          }
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
    250          
    251          /**
    252            * @brief  Checks whether the specified EXTI line is asserted or not.
    253            * @param  EXTI_Line: specifies the EXTI line to check.
    254            *          This parameter can be EXTI_Linex where x can be(0..22)
    255            * @retval The new state of EXTI_Line (SET or RESET).
    256            */

   \                                 In section .text, align 2, keep-with-next
    257          ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
    258          {
   \                     EXTI_GetITStatus: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    259            ITStatus bitstatus = RESET;
   \   00000004   0x2500             MOVS     R5,#+0
    260            uint32_t enablestatus = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    261            /* Check the parameters */
    262            assert_param(IS_GET_EXTI_LINE(EXTI_Line));
   \   00000008   0x2C01             CMP      R4,#+1
   \   0000000A   0xD03F             BEQ.N    ??EXTI_GetITStatus_0
   \   0000000C   0x2C02             CMP      R4,#+2
   \   0000000E   0xD03D             BEQ.N    ??EXTI_GetITStatus_0
   \   00000010   0x2C04             CMP      R4,#+4
   \   00000012   0xD03B             BEQ.N    ??EXTI_GetITStatus_0
   \   00000014   0x2C08             CMP      R4,#+8
   \   00000016   0xD039             BEQ.N    ??EXTI_GetITStatus_0
   \   00000018   0x2C10             CMP      R4,#+16
   \   0000001A   0xD037             BEQ.N    ??EXTI_GetITStatus_0
   \   0000001C   0x2C20             CMP      R4,#+32
   \   0000001E   0xD035             BEQ.N    ??EXTI_GetITStatus_0
   \   00000020   0x2C40             CMP      R4,#+64
   \   00000022   0xD033             BEQ.N    ??EXTI_GetITStatus_0
   \   00000024   0x2C80             CMP      R4,#+128
   \   00000026   0xD031             BEQ.N    ??EXTI_GetITStatus_0
   \   00000028   0xF5B4 0x7F80      CMP      R4,#+256
   \   0000002C   0xD02E             BEQ.N    ??EXTI_GetITStatus_0
   \   0000002E   0xF5B4 0x7F00      CMP      R4,#+512
   \   00000032   0xD02B             BEQ.N    ??EXTI_GetITStatus_0
   \   00000034   0xF5B4 0x6F80      CMP      R4,#+1024
   \   00000038   0xD028             BEQ.N    ??EXTI_GetITStatus_0
   \   0000003A   0xF5B4 0x6F00      CMP      R4,#+2048
   \   0000003E   0xD025             BEQ.N    ??EXTI_GetITStatus_0
   \   00000040   0xF5B4 0x5F80      CMP      R4,#+4096
   \   00000044   0xD022             BEQ.N    ??EXTI_GetITStatus_0
   \   00000046   0xF5B4 0x5F00      CMP      R4,#+8192
   \   0000004A   0xD01F             BEQ.N    ??EXTI_GetITStatus_0
   \   0000004C   0xF5B4 0x4F80      CMP      R4,#+16384
   \   00000050   0xD01C             BEQ.N    ??EXTI_GetITStatus_0
   \   00000052   0xF5B4 0x4F00      CMP      R4,#+32768
   \   00000056   0xD019             BEQ.N    ??EXTI_GetITStatus_0
   \   00000058   0xF5B4 0x3F80      CMP      R4,#+65536
   \   0000005C   0xD016             BEQ.N    ??EXTI_GetITStatus_0
   \   0000005E   0xF5B4 0x3F00      CMP      R4,#+131072
   \   00000062   0xD013             BEQ.N    ??EXTI_GetITStatus_0
   \   00000064   0xF5B4 0x2F80      CMP      R4,#+262144
   \   00000068   0xD010             BEQ.N    ??EXTI_GetITStatus_0
   \   0000006A   0xF5B4 0x2F00      CMP      R4,#+524288
   \   0000006E   0xD00D             BEQ.N    ??EXTI_GetITStatus_0
   \   00000070   0xF5B4 0x1F80      CMP      R4,#+1048576
   \   00000074   0xD00A             BEQ.N    ??EXTI_GetITStatus_0
   \   00000076   0xF5B4 0x1F00      CMP      R4,#+2097152
   \   0000007A   0xD007             BEQ.N    ??EXTI_GetITStatus_0
   \   0000007C   0xF5B4 0x0F80      CMP      R4,#+4194304
   \   00000080   0xD004             BEQ.N    ??EXTI_GetITStatus_0
   \   00000082   0xF44F 0x7183      MOV      R1,#+262
   \   00000086   0x....             LDR.N    R0,??DataTable6_6
   \   00000088   0x.... 0x....      BL       assert_failed
    263            
    264            enablestatus =  EXTI->IMR & EXTI_Line;
   \                     ??EXTI_GetITStatus_0: (+1)
   \   0000008C   0x....             LDR.N    R0,??DataTable6  ;; 0x40013c00
   \   0000008E   0x6800             LDR      R0,[R0, #+0]
   \   00000090   0x4020             ANDS     R0,R4,R0
   \   00000092   0x0006             MOVS     R6,R0
    265            if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
   \   00000094   0x....             LDR.N    R0,??DataTable6_5  ;; 0x40013c14
   \   00000096   0x6800             LDR      R0,[R0, #+0]
   \   00000098   0x4220             TST      R0,R4
   \   0000009A   0xD004             BEQ.N    ??EXTI_GetITStatus_1
   \   0000009C   0x2E00             CMP      R6,#+0
   \   0000009E   0xD002             BEQ.N    ??EXTI_GetITStatus_1
    266            {
    267              bitstatus = SET;
   \   000000A0   0x2001             MOVS     R0,#+1
   \   000000A2   0x0005             MOVS     R5,R0
   \   000000A4   0xE001             B.N      ??EXTI_GetITStatus_2
    268            }
    269            else
    270            {
    271              bitstatus = RESET;
   \                     ??EXTI_GetITStatus_1: (+1)
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0x0005             MOVS     R5,R0
    272            }
    273            return bitstatus;
   \                     ??EXTI_GetITStatus_2: (+1)
   \   000000AA   0x0028             MOVS     R0,R5
   \   000000AC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AE   0xBD70             POP      {R4-R6,PC}       ;; return
    274          }
    275          
    276          /**
    277            * @brief  Clears the EXTI's line pending bits.
    278            * @param  EXTI_Line: specifies the EXTI lines to clear.
    279            *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
    280            * @retval None
    281            */

   \                                 In section .text, align 2, keep-with-next
    282          void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
    283          {
   \                     EXTI_ClearITPendingBit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    284            /* Check the parameters */
    285            assert_param(IS_EXTI_LINE(EXTI_Line));
   \   00000004   0x0DE0             LSRS     R0,R4,#+23
   \   00000006   0x05C0             LSLS     R0,R0,#+23
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD101             BNE.N    ??EXTI_ClearITPendingBit_0
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD104             BNE.N    ??EXTI_ClearITPendingBit_1
   \                     ??EXTI_ClearITPendingBit_0: (+1)
   \   00000010   0xF240 0x111D      MOVW     R1,#+285
   \   00000014   0x....             LDR.N    R0,??DataTable6_6
   \   00000016   0x.... 0x....      BL       assert_failed
    286            
    287            EXTI->PR = EXTI_Line;
   \                     ??EXTI_ClearITPendingBit_1: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable6_5  ;; 0x40013c14
   \   0000001C   0x6004             STR      R4,[R0, #+0]
    288          }
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x40013C00         DC32     0x40013c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x40013C04         DC32     0x40013c04

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x40013C08         DC32     0x40013c08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x40013C0C         DC32     0x40013c0c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x007FFFFF         DC32     0x7fffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x40013C14         DC32     0x40013c14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x40013C10         DC32     0x40013c10

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x44 0x3A          DC8 44H, 3AH, 5CH, 49H, 41H, 52H, 20H, 57H
   \              0x5C 0x49    
   \              0x41 0x52    
   \              0x20 0x57    
   \   00000008   0x6F 0x72          DC8 6FH, 72H, 6BH, 73H, 70H, 61H, 63H, 65H
   \              0x6B 0x73    
   \              0x70 0x61    
   \              0x63 0x65    
   \   00000010   0x5C 0x53          DC8 5CH, 53H, 54H, 4DH, 33H, 32H, 46H, 34H
   \              0x54 0x4D    
   \              0x33 0x32    
   \              0x46 0x34    
   \   00000018   0x30 0x37          DC8 30H, 37H, 5CH, 53H, 54H, 4DH, 33H, 32H
   \              0x5C 0x53    
   \              0x54 0x4D    
   \              0x33 0x32    
   \   00000020   0x46 0x34          DC8 46H, 34H, 2DH, 44H, 69H, 73H, 63H, 6FH
   \              0x2D 0x44    
   \              0x69 0x73    
   \              0x63 0x6F    
   \   00000028   0x76 0x65          DC8 76H, 65H, 72H, 79H, 5FH, 46H, 57H, 5FH
   \              0x72 0x79    
   \              0x5F 0x46    
   \              0x57 0x5F    
   \   00000030   0x56 0x31          DC8 56H, 31H, 2EH, 31H, 2EH, 30H, 5CH, 4CH
   \              0x2E 0x31    
   \              0x2E 0x30    
   \              0x5C 0x4C    
   \   00000038   0x69 0x62          DC8 69H, 62H, 72H, 61H, 72H, 69H, 65H, 73H
   \              0x72 0x61    
   \              0x72 0x69    
   \              0x65 0x73    
   \   00000040   0x5C 0x53          DC8 5CH, 53H, 54H, 4DH, 33H, 32H, 46H, 34H
   \              0x54 0x4D    
   \              0x33 0x32    
   \              0x46 0x34    
   \   00000048   0x78 0x78          DC8 78H, 78H, 5FH, 53H, 74H, 64H, 50H, 65H
   \              0x5F 0x53    
   \              0x74 0x64    
   \              0x50 0x65    
   \   00000050   0x72 0x69          DC8 72H, 69H, 70H, 68H, 5FH, 44H, 72H, 69H
   \              0x70 0x68    
   \              0x5F 0x44    
   \              0x72 0x69    
   \   00000058   0x76 0x65          DC8 76H, 65H, 72H, 5CH, 73H, 72H, 63H, 5CH
   \              0x72 0x5C    
   \              0x73 0x72    
   \              0x63 0x5C    
   \   00000060   0x73 0x74          DC8 73H, 74H, 6DH, 33H, 32H, 66H, 34H, 78H
   \              0x6D 0x33    
   \              0x32 0x66    
   \              0x34 0x78    
   \   00000068   0x78 0x5F          DC8 78H, 5FH, 65H, 78H, 74H, 69H, 2EH, 63H
   \              0x65 0x78    
   \              0x74 0x69    
   \              0x2E 0x63    
   \   00000070   0x00               DC8 0
   \   00000071   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    289          
    290          /**
    291            * @}
    292            */
    293          
    294          /**
    295            * @}
    296            */
    297          
    298          /**
    299            * @}
    300            */
    301          
    302          /**
    303            * @}
    304            */
    305          
    306          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   EXTI_ClearFlag
         8   -> assert_failed
       8   EXTI_ClearITPendingBit
         8   -> assert_failed
       0   EXTI_DeInit
       8   EXTI_GenerateSWInterrupt
         8   -> assert_failed
      16   EXTI_GetFlagStatus
        16   -> assert_failed
      16   EXTI_GetITStatus
        16   -> assert_failed
      16   EXTI_Init
        16   -> assert_failed
       0   EXTI_StructInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
     116  ?_0
      30  EXTI_ClearFlag
      32  EXTI_ClearITPendingBit
      32  EXTI_DeInit
      36  EXTI_GenerateSWInterrupt
     160  EXTI_GetFlagStatus
     176  EXTI_GetITStatus
     230  EXTI_Init
      18  EXTI_StructInit

 
 116 bytes in section .rodata
 746 bytes in section .text
 
 746 bytes of CODE  memory
 116 bytes of CONST memory

Errors: none
Warnings: none
