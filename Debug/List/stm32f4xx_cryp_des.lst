###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       06/May/2016  23:31:31
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\IAR
#        Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_cryp_des.c
#    Command line =  
#        "D:\IAR
#        Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_cryp_des.c"
#        -D USE_STDPERIPH_DRIVER -D STM32F4XX -D USE_FULL_ASSERT -lCN "D:\IAR
#        Workspace\STM32F407\VCP_ESP\Debug\List" -o "D:\IAR
#        Workspace\STM32F407\VCP_ESP\Debug\Obj" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\"
#        -I "D:\IAR Workspace\STM32F407\VCP_ESP\..\Libraries\CMSIS\Include\" -I
#        "D:\IAR Workspace\STM32F407\VCP_ESP\..\Utilities\STM32F4-Discovery\"
#        -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\..\Libraries\CMSIS\ST\STM32F4xx\Include\"
#        -I "D:\IAR Workspace\STM32F407\VCP_ESP\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_conf\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\cdc\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\otg\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\core\" -On --use_c++_inline -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        D:\IAR Workspace\STM32F407\VCP_ESP\Debug\List\stm32f4xx_cryp_des.lst
#    Object file  =  
#        D:\IAR Workspace\STM32F407\VCP_ESP\Debug\Obj\stm32f4xx_cryp_des.o
#
###############################################################################

D:\IAR Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_cryp_des.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f4xx_cryp_des.c
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    30-September-2011
      7            * @brief   This file provides high level functions to encrypt and decrypt an 
      8            *          input message using DES in ECB/CBC modes.
      9            *          It uses the stm32f4xx_cryp.c/.h drivers to access the STM32F4xx CRYP
     10            *          peripheral.
     11            *
     12            *  @verbatim
     13            *
     14            *          ===================================================================
     15            *                                   How to use this driver
     16            *          ===================================================================
     17            *          1. Enable The CRYP controller clock using 
     18            *            RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
     19            *
     20            *          2. Encrypt and decrypt using DES in ECB Mode using CRYP_DES_ECB()
     21            *             function.
     22            *
     23            *          3. Encrypt and decrypt using DES in CBC Mode using CRYP_DES_CBC()
     24            *             function.
     25            *
     26            *  @endverbatim
     27            *
     28            ******************************************************************************
     29            * @attention
     30            *
     31            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     32            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     33            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     34            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     35            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     36            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     37            *
     38            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     39            ******************************************************************************
     40            */
     41          
     42          /* Includes ------------------------------------------------------------------*/
     43          #include "stm32f4xx_cryp.h"
     44          
     45          
     46          /** @addtogroup STM32F4xx_StdPeriph_Driver
     47            * @{
     48            */
     49          
     50          /** @defgroup CRYP 
     51            * @brief CRYP driver modules
     52            * @{
     53            */
     54          
     55          /* Private typedef -----------------------------------------------------------*/
     56          /* Private define ------------------------------------------------------------*/
     57          #define DESBUSY_TIMEOUT    ((uint32_t) 0x00010000)
     58          
     59          /* Private macro -------------------------------------------------------------*/
     60          /* Private variables ---------------------------------------------------------*/
     61          /* Private function prototypes -----------------------------------------------*/
     62          /* Private functions ---------------------------------------------------------*/
     63          
     64          
     65          /** @defgroup CRYP_Private_Functions
     66            * @{
     67            */ 
     68          
     69          /** @defgroup CRYP_Group8 High Level DES functions
     70           *  @brief   High Level DES functions 
     71           *
     72          @verbatim   
     73           ===============================================================================
     74                                    High Level DES functions
     75           ===============================================================================
     76          @endverbatim
     77            * @{
     78            */
     79          
     80          /**
     81            * @brief  Encrypt and decrypt using DES in ECB Mode
     82            * @param  Mode: encryption or decryption Mode.
     83            *           This parameter can be one of the following values:
     84            *            @arg MODE_ENCRYPT: Encryption
     85            *            @arg MODE_DECRYPT: Decryption
     86            * @param  Key: Key used for DES algorithm.
     87            * @param  Ilength: length of the Input buffer, must be a multiple of 8.
     88            * @param  Input: pointer to the Input buffer.
     89            * @param  Output: pointer to the returned buffer.
     90            * @retval An ErrorStatus enumeration value:
     91            *          - SUCCESS: Operation done
     92            *          - ERROR: Operation failed
     93            */

   \                                 In section .text, align 2, keep-with-next
     94          ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
     95                                   uint32_t Ilength, uint8_t *Output)
     96          {
   \                     CRYP_DES_ECB: (+1)
   \   00000000   0xE92D 0x4FF7      PUSH     {R0-R2,R4-R11,LR}
   \   00000004   0xB08C             SUB      SP,SP,#+48
   \   00000006   0x001C             MOVS     R4,R3
   \   00000008   0x9D18             LDR      R5,[SP, #+96]
     97            CRYP_InitTypeDef DES_CRYP_InitStructure;
     98            CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
     99            __IO uint32_t counter = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x9000             STR      R0,[SP, #+0]
    100            uint32_t busystatus = 0;
   \   0000000E   0x2600             MOVS     R6,#+0
    101            ErrorStatus status = SUCCESS;
   \   00000010   0x2701             MOVS     R7,#+1
    102            uint32_t keyaddr    = (uint32_t)Key;
   \   00000012   0xF8DD 0xA034      LDR      R10,[SP, #+52]
    103            uint32_t inputaddr  = (uint32_t)Input;
   \   00000016   0xF8DD 0xB038      LDR      R11,[SP, #+56]
    104            uint32_t outputaddr = (uint32_t)Output;
   \   0000001A   0x46A8             MOV      R8,R5
    105            uint32_t i = 0;
   \   0000001C   0xF05F 0x0900      MOVS     R9,#+0
    106          
    107            /* Crypto structures initialisation*/
    108            CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
   \   00000020   0xA803             ADD      R0,SP,#+12
   \   00000022   0x.... 0x....      BL       CRYP_KeyStructInit
    109          
    110            /* Crypto Init for Encryption process */
    111            if( Mode == MODE_ENCRYPT ) /* DES encryption */
   \   00000026   0xF89D 0x0030      LDRB     R0,[SP, #+48]
   \   0000002A   0x2801             CMP      R0,#+1
   \   0000002C   0xD103             BNE.N    ??CRYP_DES_ECB_0
    112            {
    113               DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   \   00000034   0xE002             B.N      ??CRYP_DES_ECB_1
    114            }
    115            else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
    116            {      
    117               DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
   \                     ??CRYP_DES_ECB_0: (+1)
   \   00000036   0x2004             MOVS     R0,#+4
   \   00000038   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    118            }
    119          
    120            DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
   \                     ??CRYP_DES_ECB_1: (+1)
   \   0000003C   0x2010             MOVS     R0,#+16
   \   0000003E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    121            DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
   \   00000042   0x2080             MOVS     R0,#+128
   \   00000044   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    122            CRYP_Init(&DES_CRYP_InitStructure);
   \   00000048   0xA801             ADD      R0,SP,#+4
   \   0000004A   0x.... 0x....      BL       CRYP_Init
    123          
    124            /* Key Initialisation */
    125            DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
   \   0000004E   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   00000052   0xBA00             REV      R0,R0
   \   00000054   0x9005             STR      R0,[SP, #+20]
    126            keyaddr+=4;
   \   00000056   0xF11A 0x0A04      ADDS     R10,R10,#+4
    127            DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
   \   0000005A   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   0000005E   0xBA00             REV      R0,R0
   \   00000060   0x9006             STR      R0,[SP, #+24]
    128            CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
   \   00000062   0xA803             ADD      R0,SP,#+12
   \   00000064   0x.... 0x....      BL       CRYP_KeyInit
    129          
    130            /* Flush IN/OUT FIFO */
    131            CRYP_FIFOFlush();
   \   00000068   0x.... 0x....      BL       CRYP_FIFOFlush
    132          
    133            /* Enable Crypto processor */
    134            CRYP_Cmd(ENABLE);
   \   0000006C   0x2001             MOVS     R0,#+1
   \   0000006E   0x.... 0x....      BL       CRYP_Cmd
    135          
    136            for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x4681             MOV      R9,R0
   \                     ??CRYP_DES_ECB_2: (+1)
   \   00000076   0x45A1             CMP      R9,R4
   \   00000078   0xD231             BCS.N    ??CRYP_DES_ECB_3
   \   0000007A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000007C   0x2F00             CMP      R7,#+0
   \   0000007E   0xD02E             BEQ.N    ??CRYP_DES_ECB_3
    137            {
    138          
    139              /* Write the Input block in the Input FIFO */
    140              CRYP_DataIn(*(uint32_t*)(inputaddr));
   \   00000080   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \   00000084   0x.... 0x....      BL       CRYP_DataIn
    141              inputaddr+=4;
   \   00000088   0xF11B 0x0B04      ADDS     R11,R11,#+4
    142              CRYP_DataIn(*(uint32_t*)(inputaddr));
   \   0000008C   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \   00000090   0x.... 0x....      BL       CRYP_DataIn
    143              inputaddr+=4;
   \   00000094   0xF11B 0x0B04      ADDS     R11,R11,#+4
    144          
    145          /* Wait until the complete message has been processed */
    146              counter = 0;
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0x9000             STR      R0,[SP, #+0]
    147              do
    148              {
    149                busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
   \                     ??CRYP_DES_ECB_4: (+1)
   \   0000009C   0x2010             MOVS     R0,#+16
   \   0000009E   0x.... 0x....      BL       CRYP_GetFlagStatus
   \   000000A2   0x0006             MOVS     R6,R0
    150                counter++;
   \   000000A4   0x9800             LDR      R0,[SP, #+0]
   \   000000A6   0x1C40             ADDS     R0,R0,#+1
   \   000000A8   0x9000             STR      R0,[SP, #+0]
    151              }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
   \   000000AA   0x9800             LDR      R0,[SP, #+0]
   \   000000AC   0xF5B0 0x3F80      CMP      R0,#+65536
   \   000000B0   0xD001             BEQ.N    ??CRYP_DES_ECB_5
   \   000000B2   0x2E00             CMP      R6,#+0
   \   000000B4   0xD1F2             BNE.N    ??CRYP_DES_ECB_4
    152          
    153              if (busystatus != RESET)
   \                     ??CRYP_DES_ECB_5: (+1)
   \   000000B6   0x2E00             CMP      R6,#+0
   \   000000B8   0xD002             BEQ.N    ??CRYP_DES_ECB_6
    154             {
    155                 status = ERROR;
   \   000000BA   0x2000             MOVS     R0,#+0
   \   000000BC   0x0007             MOVS     R7,R0
   \   000000BE   0xE00B             B.N      ??CRYP_DES_ECB_7
    156              }
    157              else
    158              {
    159          
    160                /* Read the Output block from the Output FIFO */
    161                *(uint32_t*)(outputaddr) = CRYP_DataOut();
   \                     ??CRYP_DES_ECB_6: (+1)
   \   000000C0   0x.... 0x....      BL       CRYP_DataOut
   \   000000C4   0xF8C8 0x0000      STR      R0,[R8, #+0]
    162                outputaddr+=4;
   \   000000C8   0xF118 0x0804      ADDS     R8,R8,#+4
    163                *(uint32_t*)(outputaddr) = CRYP_DataOut();
   \   000000CC   0x.... 0x....      BL       CRYP_DataOut
   \   000000D0   0xF8C8 0x0000      STR      R0,[R8, #+0]
    164                outputaddr+=4;
   \   000000D4   0xF118 0x0804      ADDS     R8,R8,#+4
    165              }
    166            }
   \                     ??CRYP_DES_ECB_7: (+1)
   \   000000D8   0xF119 0x0908      ADDS     R9,R9,#+8
   \   000000DC   0xE7CB             B.N      ??CRYP_DES_ECB_2
    167          
    168            /* Disable Crypto */
    169            CRYP_Cmd(DISABLE);
   \                     ??CRYP_DES_ECB_3: (+1)
   \   000000DE   0x2000             MOVS     R0,#+0
   \   000000E0   0x.... 0x....      BL       CRYP_Cmd
    170          
    171            return status; 
   \   000000E4   0x0038             MOVS     R0,R7
   \   000000E6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E8   0xB00F             ADD      SP,SP,#+60
   \   000000EA   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    172          }
    173          
    174          /**
    175            * @brief  Encrypt and decrypt using DES in CBC Mode
    176            * @param  Mode: encryption or decryption Mode.
    177            *          This parameter can be one of the following values:
    178            *            @arg MODE_ENCRYPT: Encryption
    179            *            @arg MODE_DECRYPT: Decryption
    180            * @param  Key: Key used for DES algorithm.
    181            * @param  InitVectors: Initialisation Vectors used for DES algorithm.
    182            * @param  Ilength: length of the Input buffer, must be a multiple of 8.
    183            * @param  Input: pointer to the Input buffer.
    184            * @param  Output: pointer to the returned buffer.
    185            * @retval An ErrorStatus enumeration value:
    186            *          - SUCCESS: Operation done
    187            *          - ERROR: Operation failed
    188            */

   \                                 In section .text, align 2, keep-with-next
    189          ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
    190                                   uint8_t *Input, uint32_t Ilength, uint8_t *Output)
    191          {
   \                     CRYP_DES_CBC: (+1)
   \   00000000   0xE92D 0x4FFF      PUSH     {R0-R11,LR}
   \   00000004   0xB08F             SUB      SP,SP,#+60
   \   00000006   0x9C1C             LDR      R4,[SP, #+112]
    192            CRYP_InitTypeDef DES_CRYP_InitStructure;
    193            CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
    194            CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
    195            __IO uint32_t counter = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x9000             STR      R0,[SP, #+0]
    196            uint32_t busystatus = 0;
   \   0000000C   0x2500             MOVS     R5,#+0
    197            ErrorStatus status = SUCCESS;
   \   0000000E   0x2601             MOVS     R6,#+1
    198            uint32_t keyaddr    = (uint32_t)Key;
   \   00000010   0xF8DD 0x9040      LDR      R9,[SP, #+64]
    199            uint32_t inputaddr  = (uint32_t)Input;
   \   00000014   0xF8DD 0xB048      LDR      R11,[SP, #+72]
    200            uint32_t outputaddr = (uint32_t)Output;
   \   00000018   0x9F1D             LDR      R7,[SP, #+116]
    201            uint32_t ivaddr     = (uint32_t)InitVectors;
   \   0000001A   0xF8DD 0xA044      LDR      R10,[SP, #+68]
    202            uint32_t i = 0;
   \   0000001E   0xF05F 0x0800      MOVS     R8,#+0
    203          
    204            /* Crypto structures initialisation*/
    205            CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
   \   00000022   0xA807             ADD      R0,SP,#+28
   \   00000024   0x.... 0x....      BL       CRYP_KeyStructInit
    206          
    207            /* Crypto Init for Encryption process */
    208            if(Mode == MODE_ENCRYPT) /* DES encryption */
   \   00000028   0xF89D 0x003C      LDRB     R0,[SP, #+60]
   \   0000002C   0x2801             CMP      R0,#+1
   \   0000002E   0xD103             BNE.N    ??CRYP_DES_CBC_0
    209            {
    210               DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   \   00000036   0xE002             B.N      ??CRYP_DES_CBC_1
    211            }
    212            else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
    213            {
    214               DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
   \                     ??CRYP_DES_CBC_0: (+1)
   \   00000038   0x2004             MOVS     R0,#+4
   \   0000003A   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    215            }
    216          
    217            DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
   \                     ??CRYP_DES_CBC_1: (+1)
   \   0000003E   0x2018             MOVS     R0,#+24
   \   00000040   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    218            DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
   \   00000044   0x2080             MOVS     R0,#+128
   \   00000046   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    219            CRYP_Init(&DES_CRYP_InitStructure);
   \   0000004A   0xA801             ADD      R0,SP,#+4
   \   0000004C   0x.... 0x....      BL       CRYP_Init
    220          
    221            /* Key Initialisation */
    222            DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
   \   00000050   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000054   0xBA00             REV      R0,R0
   \   00000056   0x9009             STR      R0,[SP, #+36]
    223            keyaddr+=4;
   \   00000058   0xF119 0x0904      ADDS     R9,R9,#+4
    224            DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
   \   0000005C   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000060   0xBA00             REV      R0,R0
   \   00000062   0x900A             STR      R0,[SP, #+40]
    225            CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
   \   00000064   0xA807             ADD      R0,SP,#+28
   \   00000066   0x.... 0x....      BL       CRYP_KeyInit
    226          
    227            /* Initialization Vectors */
    228            DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
   \   0000006A   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   0000006E   0xBA00             REV      R0,R0
   \   00000070   0x9003             STR      R0,[SP, #+12]
    229            ivaddr+=4;
   \   00000072   0xF11A 0x0A04      ADDS     R10,R10,#+4
    230            DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
   \   00000076   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   0000007A   0xBA00             REV      R0,R0
   \   0000007C   0x9004             STR      R0,[SP, #+16]
    231            CRYP_IVInit(&DES_CRYP_IVInitStructure);
   \   0000007E   0xA803             ADD      R0,SP,#+12
   \   00000080   0x.... 0x....      BL       CRYP_IVInit
    232          
    233            /* Flush IN/OUT FIFO */
    234            CRYP_FIFOFlush();
   \   00000084   0x.... 0x....      BL       CRYP_FIFOFlush
    235            
    236            /* Enable Crypto processor */
    237            CRYP_Cmd(ENABLE);
   \   00000088   0x2001             MOVS     R0,#+1
   \   0000008A   0x.... 0x....      BL       CRYP_Cmd
    238          
    239            for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0x4680             MOV      R8,R0
   \                     ??CRYP_DES_CBC_2: (+1)
   \   00000092   0x45A0             CMP      R8,R4
   \   00000094   0xD22D             BCS.N    ??CRYP_DES_CBC_3
   \   00000096   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000098   0x2E00             CMP      R6,#+0
   \   0000009A   0xD02A             BEQ.N    ??CRYP_DES_CBC_3
    240            {
    241              /* Write the Input block in the Input FIFO */
    242              CRYP_DataIn(*(uint32_t*)(inputaddr));
   \   0000009C   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \   000000A0   0x.... 0x....      BL       CRYP_DataIn
    243              inputaddr+=4;
   \   000000A4   0xF11B 0x0B04      ADDS     R11,R11,#+4
    244              CRYP_DataIn(*(uint32_t*)(inputaddr));
   \   000000A8   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \   000000AC   0x.... 0x....      BL       CRYP_DataIn
    245              inputaddr+=4;
   \   000000B0   0xF11B 0x0B04      ADDS     R11,R11,#+4
    246          
    247              /* Wait until the complete message has been processed */
    248              counter = 0;
   \   000000B4   0x2000             MOVS     R0,#+0
   \   000000B6   0x9000             STR      R0,[SP, #+0]
    249              do
    250              {
    251                busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
   \                     ??CRYP_DES_CBC_4: (+1)
   \   000000B8   0x2010             MOVS     R0,#+16
   \   000000BA   0x.... 0x....      BL       CRYP_GetFlagStatus
   \   000000BE   0x0005             MOVS     R5,R0
    252                counter++;
   \   000000C0   0x9800             LDR      R0,[SP, #+0]
   \   000000C2   0x1C40             ADDS     R0,R0,#+1
   \   000000C4   0x9000             STR      R0,[SP, #+0]
    253              }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
   \   000000C6   0x9800             LDR      R0,[SP, #+0]
   \   000000C8   0xF5B0 0x3F80      CMP      R0,#+65536
   \   000000CC   0xD001             BEQ.N    ??CRYP_DES_CBC_5
   \   000000CE   0x2D00             CMP      R5,#+0
   \   000000D0   0xD1F2             BNE.N    ??CRYP_DES_CBC_4
    254          
    255              if (busystatus != RESET)
   \                     ??CRYP_DES_CBC_5: (+1)
   \   000000D2   0x2D00             CMP      R5,#+0
   \   000000D4   0xD002             BEQ.N    ??CRYP_DES_CBC_6
    256             {
    257                 status = ERROR;
   \   000000D6   0x2000             MOVS     R0,#+0
   \   000000D8   0x0006             MOVS     R6,R0
   \   000000DA   0xE007             B.N      ??CRYP_DES_CBC_7
    258              }
    259              else
    260              {
    261                /* Read the Output block from the Output FIFO */
    262                *(uint32_t*)(outputaddr) = CRYP_DataOut();
   \                     ??CRYP_DES_CBC_6: (+1)
   \   000000DC   0x.... 0x....      BL       CRYP_DataOut
   \   000000E0   0x6038             STR      R0,[R7, #+0]
    263                outputaddr+=4;
   \   000000E2   0x1D3F             ADDS     R7,R7,#+4
    264                *(uint32_t*)(outputaddr) = CRYP_DataOut();
   \   000000E4   0x.... 0x....      BL       CRYP_DataOut
   \   000000E8   0x6038             STR      R0,[R7, #+0]
    265                outputaddr+=4;
   \   000000EA   0x1D3F             ADDS     R7,R7,#+4
    266              }
    267            }
   \                     ??CRYP_DES_CBC_7: (+1)
   \   000000EC   0xF118 0x0808      ADDS     R8,R8,#+8
   \   000000F0   0xE7CF             B.N      ??CRYP_DES_CBC_2
    268          
    269            /* Disable Crypto */
    270            CRYP_Cmd(DISABLE);
   \                     ??CRYP_DES_CBC_3: (+1)
   \   000000F2   0x2000             MOVS     R0,#+0
   \   000000F4   0x.... 0x....      BL       CRYP_Cmd
    271          
    272            return status; 
   \   000000F8   0x0030             MOVS     R0,R6
   \   000000FA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000FC   0xB013             ADD      SP,SP,#+76
   \   000000FE   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    273          }
    274          
    275          /**
    276            * @}
    277            */ 
    278          
    279          /**
    280            * @}
    281            */ 
    282          
    283          /**
    284            * @}
    285            */ 
    286          
    287          /**
    288            * @}
    289            */ 
    290          
    291          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     112   CRYP_DES_CBC
       112   -> CRYP_Cmd
       112   -> CRYP_DataIn
       112   -> CRYP_DataOut
       112   -> CRYP_FIFOFlush
       112   -> CRYP_GetFlagStatus
       112   -> CRYP_IVInit
       112   -> CRYP_Init
       112   -> CRYP_KeyInit
       112   -> CRYP_KeyStructInit
      96   CRYP_DES_ECB
        96   -> CRYP_Cmd
        96   -> CRYP_DataIn
        96   -> CRYP_DataOut
        96   -> CRYP_FIFOFlush
        96   -> CRYP_GetFlagStatus
        96   -> CRYP_Init
        96   -> CRYP_KeyInit
        96   -> CRYP_KeyStructInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     258  CRYP_DES_CBC
     238  CRYP_DES_ECB

 
 496 bytes in section .text
 
 496 bytes of CODE memory

Errors: none
Warnings: none
