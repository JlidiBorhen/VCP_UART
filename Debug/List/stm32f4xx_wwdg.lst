###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       06/May/2016  23:31:36
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\IAR
#        Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_wwdg.c
#    Command line =  
#        "D:\IAR
#        Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_wwdg.c"
#        -D USE_STDPERIPH_DRIVER -D STM32F4XX -D USE_FULL_ASSERT -lCN "D:\IAR
#        Workspace\STM32F407\VCP_ESP\Debug\List" -o "D:\IAR
#        Workspace\STM32F407\VCP_ESP\Debug\Obj" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\"
#        -I "D:\IAR Workspace\STM32F407\VCP_ESP\..\Libraries\CMSIS\Include\" -I
#        "D:\IAR Workspace\STM32F407\VCP_ESP\..\Utilities\STM32F4-Discovery\"
#        -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\..\Libraries\CMSIS\ST\STM32F4xx\Include\"
#        -I "D:\IAR Workspace\STM32F407\VCP_ESP\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_conf\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\cdc\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\otg\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\core\" -On --use_c++_inline -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        D:\IAR Workspace\STM32F407\VCP_ESP\Debug\List\stm32f4xx_wwdg.lst
#    Object file  =  
#        D:\IAR Workspace\STM32F407\VCP_ESP\Debug\Obj\stm32f4xx_wwdg.o
#
###############################################################################

D:\IAR Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_wwdg.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f4xx_wwdg.c
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    30-September-2011
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionalities of the Window watchdog (WWDG) peripheral:           
      9            *           - Prescaler, Refresh window and Counter configuration
     10            *           - WWDG activation
     11            *           - Interrupts and flags management
     12            *             
     13            *  @verbatim
     14            *    
     15            *          ===================================================================
     16            *                                     WWDG features
     17            *          ===================================================================
     18            *                                        
     19            *          Once enabled the WWDG generates a system reset on expiry of a programmed
     20            *          time period, unless the program refreshes the counter (downcounter) 
     21            *          before to reach 0x3F value (i.e. a reset is generated when the counter
     22            *          value rolls over from 0x40 to 0x3F). 
     23            *          An MCU reset is also generated if the counter value is refreshed
     24            *          before the counter has reached the refresh window value. This 
     25            *          implies that the counter must be refreshed in a limited window.
     26            *            
     27            *          Once enabled the WWDG cannot be disabled except by a system reset.                          
     28            *          
     29            *          WWDGRST flag in RCC_CSR register can be used to inform when a WWDG
     30            *          reset occurs.
     31            *            
     32            *          The WWDG counter input clock is derived from the APB clock divided 
     33            *          by a programmable prescaler.
     34            *              
     35            *          WWDG counter clock = PCLK1 / Prescaler
     36            *          WWDG timeout = (WWDG counter clock) * (counter value)
     37            *                      
     38            *          Min-max timeout value @42 MHz(PCLK1): ~97.5 us / ~49.9 ms
     39            *                            
     40            *          ===================================================================
     41            *                                 How to use this driver
     42            *          =================================================================== 
     43            *          1. Enable WWDG clock using RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, ENABLE) function
     44            *            
     45            *          2. Configure the WWDG prescaler using WWDG_SetPrescaler() function
     46            *                           
     47            *          3. Configure the WWDG refresh window using WWDG_SetWindowValue() function
     48            *            
     49            *          4. Set the WWDG counter value and start it using WWDG_Enable() function.
     50            *             When the WWDG is enabled the counter value should be configured to 
     51            *             a value greater than 0x40 to prevent generating an immediate reset.     
     52            *            
     53            *          5. Optionally you can enable the Early wakeup interrupt which is 
     54            *             generated when the counter reach 0x40.
     55            *             Once enabled this interrupt cannot be disabled except by a system reset.
     56            *                 
     57            *          6. Then the application program must refresh the WWDG counter at regular
     58            *             intervals during normal operation to prevent an MCU reset, using
     59            *             WWDG_SetCounter() function. This operation must occur only when
     60            *             the counter value is lower than the refresh window value, 
     61            *             programmed using WWDG_SetWindowValue().         
     62            *
     63            *  @endverbatim  
     64            *                             
     65            ******************************************************************************
     66            * @attention
     67            *
     68            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     69            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     70            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     71            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     72            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     73            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     74            *
     75            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     76            ******************************************************************************
     77            */
     78          
     79          /* Includes ------------------------------------------------------------------*/
     80          #include "stm32f4xx_wwdg.h"
     81          #include "stm32f4xx_rcc.h"
     82          
     83          /** @addtogroup STM32F4xx_StdPeriph_Driver
     84            * @{
     85            */
     86          
     87          /** @defgroup WWDG 
     88            * @brief WWDG driver modules
     89            * @{
     90            */
     91          
     92          /* Private typedef -----------------------------------------------------------*/
     93          /* Private define ------------------------------------------------------------*/
     94          
     95          /* ----------- WWDG registers bit address in the alias region ----------- */
     96          #define WWDG_OFFSET       (WWDG_BASE - PERIPH_BASE)
     97          /* Alias word address of EWI bit */
     98          #define CFR_OFFSET        (WWDG_OFFSET + 0x04)
     99          #define EWI_BitNumber     0x09
    100          #define CFR_EWI_BB        (PERIPH_BB_BASE + (CFR_OFFSET * 32) + (EWI_BitNumber * 4))
    101          
    102          /* --------------------- WWDG registers bit mask ------------------------ */
    103          /* CFR register bit mask */
    104          #define CFR_WDGTB_MASK    ((uint32_t)0xFFFFFE7F)
    105          #define CFR_W_MASK        ((uint32_t)0xFFFFFF80)
    106          #define BIT_MASK          ((uint8_t)0x7F)
    107          
    108          /* Private macro -------------------------------------------------------------*/
    109          /* Private variables ---------------------------------------------------------*/
    110          /* Private function prototypes -----------------------------------------------*/
    111          /* Private functions ---------------------------------------------------------*/
    112          
    113          /** @defgroup WWDG_Private_Functions
    114            * @{
    115            */
    116          
    117          /** @defgroup WWDG_Group1 Prescaler, Refresh window and Counter configuration functions
    118           *  @brief   Prescaler, Refresh window and Counter configuration functions 
    119           *
    120          @verbatim   
    121           ===============================================================================
    122                    Prescaler, Refresh window and Counter configuration functions
    123           ===============================================================================  
    124          
    125          @endverbatim
    126            * @{
    127            */
    128          
    129          /**
    130            * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
    131            * @param  None
    132            * @retval None
    133            */

   \                                 In section .text, align 2, keep-with-next
    134          void WWDG_DeInit(void)
    135          {
   \                     WWDG_DeInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    136            RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0xF44F 0x6000      MOV      R0,#+2048
   \   00000008   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
    137            RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0xF44F 0x6000      MOV      R0,#+2048
   \   00000012   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
    138          }
   \   00000016   0xBD01             POP      {R0,PC}          ;; return
    139          
    140          /**
    141            * @brief  Sets the WWDG Prescaler.
    142            * @param  WWDG_Prescaler: specifies the WWDG Prescaler.
    143            *   This parameter can be one of the following values:
    144            *     @arg WWDG_Prescaler_1: WWDG counter clock = (PCLK1/4096)/1
    145            *     @arg WWDG_Prescaler_2: WWDG counter clock = (PCLK1/4096)/2
    146            *     @arg WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
    147            *     @arg WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
    148            * @retval None
    149            */

   \                                 In section .text, align 2, keep-with-next
    150          void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
    151          {
   \                     WWDG_SetPrescaler: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    152            uint32_t tmpreg = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    153            /* Check the parameters */
    154            assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD00B             BEQ.N    ??WWDG_SetPrescaler_0
   \   0000000A   0x2C80             CMP      R4,#+128
   \   0000000C   0xD009             BEQ.N    ??WWDG_SetPrescaler_0
   \   0000000E   0xF5B4 0x7F80      CMP      R4,#+256
   \   00000012   0xD006             BEQ.N    ??WWDG_SetPrescaler_0
   \   00000014   0xF5B4 0x7FC0      CMP      R4,#+384
   \   00000018   0xD003             BEQ.N    ??WWDG_SetPrescaler_0
   \   0000001A   0x219A             MOVS     R1,#+154
   \   0000001C   0x....             LDR.N    R0,??DataTable6
   \   0000001E   0x.... 0x....      BL       assert_failed
    155            /* Clear WDGTB[1:0] bits */
    156            tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
   \                     ??WWDG_SetPrescaler_0: (+1)
   \   00000022   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40002c04
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0xF430 0x70C0      BICS     R0,R0,#0x180
   \   0000002A   0x0005             MOVS     R5,R0
    157            /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
    158            tmpreg |= WWDG_Prescaler;
   \   0000002C   0x4325             ORRS     R5,R4,R5
    159            /* Store the new value */
    160            WWDG->CFR = tmpreg;
   \   0000002E   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40002c04
   \   00000030   0x6005             STR      R5,[R0, #+0]
    161          }
   \   00000032   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    162          
    163          /**
    164            * @brief  Sets the WWDG window value.
    165            * @param  WindowValue: specifies the window value to be compared to the downcounter.
    166            *   This parameter value must be lower than 0x80.
    167            * @retval None
    168            */

   \                                 In section .text, align 2, keep-with-next
    169          void WWDG_SetWindowValue(uint8_t WindowValue)
    170          {
   \                     WWDG_SetWindowValue: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    171            __IO uint32_t tmpreg = 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9000             STR      R0,[SP, #+0]
    172          
    173            /* Check the parameters */
    174            assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C80             CMP      R4,#+128
   \   0000000E   0xDB03             BLT.N    ??WWDG_SetWindowValue_0
   \   00000010   0x21AE             MOVS     R1,#+174
   \   00000012   0x....             LDR.N    R0,??DataTable6
   \   00000014   0x.... 0x....      BL       assert_failed
    175            /* Clear W[6:0] bits */
    176          
    177            tmpreg = WWDG->CFR & CFR_W_MASK;
   \                     ??WWDG_SetWindowValue_0: (+1)
   \   00000018   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40002c04
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x09C0             LSRS     R0,R0,#+7
   \   0000001E   0x01C0             LSLS     R0,R0,#+7
   \   00000020   0x9000             STR      R0,[SP, #+0]
    178          
    179            /* Set W[6:0] bits according to WindowValue value */
    180            tmpreg |= WindowValue & (uint32_t) BIT_MASK;
   \   00000022   0x9800             LDR      R0,[SP, #+0]
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0xF014 0x017F      ANDS     R1,R4,#0x7F
   \   0000002A   0x4308             ORRS     R0,R1,R0
   \   0000002C   0x9000             STR      R0,[SP, #+0]
    181          
    182            /* Store the new value */
    183            WWDG->CFR = tmpreg;
   \   0000002E   0x9800             LDR      R0,[SP, #+0]
   \   00000030   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40002c04
   \   00000032   0x6008             STR      R0,[R1, #+0]
    184          }
   \   00000034   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    185          
    186          /**
    187            * @brief  Enables the WWDG Early Wakeup interrupt(EWI).
    188            * @note   Once enabled this interrupt cannot be disabled except by a system reset.
    189            * @param  None
    190            * @retval None
    191            */

   \                                 In section .text, align 2, keep-with-next
    192          void WWDG_EnableIT(void)
    193          {
    194            *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
   \                     WWDG_EnableIT: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x....             LDR.N    R1,??DataTable6_2  ;; 0x420580a4
   \   00000004   0x6008             STR      R0,[R1, #+0]
    195          }
   \   00000006   0x4770             BX       LR               ;; return
    196          
    197          /**
    198            * @brief  Sets the WWDG counter value.
    199            * @param  Counter: specifies the watchdog counter value.
    200            *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
    201            *   an immediate reset) 
    202            * @retval None
    203            */

   \                                 In section .text, align 2, keep-with-next
    204          void WWDG_SetCounter(uint8_t Counter)
    205          {
   \                     WWDG_SetCounter: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    206            /* Check the parameters */
    207            assert_param(IS_WWDG_COUNTER(Counter));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C40             CMP      R4,#+64
   \   00000008   0xDB02             BLT.N    ??WWDG_SetCounter_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C80             CMP      R4,#+128
   \   0000000E   0xDB03             BLT.N    ??WWDG_SetCounter_1
   \                     ??WWDG_SetCounter_0: (+1)
   \   00000010   0x21CF             MOVS     R1,#+207
   \   00000012   0x....             LDR.N    R0,??DataTable6
   \   00000014   0x.... 0x....      BL       assert_failed
    208            /* Write to T[6:0] bits to configure the counter value, no need to do
    209               a read-modify-write; writing a 0 to WDGA bit does nothing */
    210            WWDG->CR = Counter & BIT_MASK;
   \                     ??WWDG_SetCounter_1: (+1)
   \   00000018   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001A   0xF014 0x007F      ANDS     R0,R4,#0x7F
   \   0000001E   0x....             LDR.N    R1,??DataTable6_3  ;; 0x40002c00
   \   00000020   0x6008             STR      R0,[R1, #+0]
    211          }
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    212          /**
    213            * @}
    214            */
    215          
    216          /** @defgroup WWDG_Group2 WWDG activation functions
    217           *  @brief   WWDG activation functions 
    218           *
    219          @verbatim   
    220           ===============================================================================
    221                                 WWDG activation function
    222           ===============================================================================  
    223          
    224          @endverbatim
    225            * @{
    226            */
    227          
    228          /**
    229            * @brief  Enables WWDG and load the counter value.                  
    230            * @param  Counter: specifies the watchdog counter value.
    231            *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
    232            *   an immediate reset)
    233            * @retval None
    234            */

   \                                 In section .text, align 2, keep-with-next
    235          void WWDG_Enable(uint8_t Counter)
    236          {
   \                     WWDG_Enable: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    237            /* Check the parameters */
    238            assert_param(IS_WWDG_COUNTER(Counter));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C40             CMP      R4,#+64
   \   00000008   0xDB02             BLT.N    ??WWDG_Enable_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C80             CMP      R4,#+128
   \   0000000E   0xDB03             BLT.N    ??WWDG_Enable_1
   \                     ??WWDG_Enable_0: (+1)
   \   00000010   0x21EE             MOVS     R1,#+238
   \   00000012   0x....             LDR.N    R0,??DataTable6
   \   00000014   0x.... 0x....      BL       assert_failed
    239            WWDG->CR = WWDG_CR_WDGA | Counter;
   \                     ??WWDG_Enable_1: (+1)
   \   00000018   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001A   0xF054 0x0080      ORRS     R0,R4,#0x80
   \   0000001E   0x....             LDR.N    R1,??DataTable6_3  ;; 0x40002c00
   \   00000020   0x6008             STR      R0,[R1, #+0]
    240          }
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    241          /**
    242            * @}
    243            */
    244          
    245          /** @defgroup WWDG_Group3 Interrupts and flags management functions
    246           *  @brief   Interrupts and flags management functions 
    247           *
    248          @verbatim   
    249           ===============================================================================
    250                           Interrupts and flags management functions
    251           ===============================================================================  
    252          
    253          @endverbatim
    254            * @{
    255            */
    256          
    257          /**
    258            * @brief  Checks whether the Early Wakeup interrupt flag is set or not.
    259            * @param  None
    260            * @retval The new state of the Early Wakeup interrupt flag (SET or RESET)
    261            */

   \                                 In section .text, align 2, keep-with-next
    262          FlagStatus WWDG_GetFlagStatus(void)
    263          {
    264            FlagStatus bitstatus = RESET;
   \                     WWDG_GetFlagStatus: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
    265              
    266            if ((WWDG->SR) != (uint32_t)RESET)
   \   00000002   0x....             LDR.N    R1,??DataTable6_4  ;; 0x40002c08
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD002             BEQ.N    ??WWDG_GetFlagStatus_0
    267            {
    268              bitstatus = SET;
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x0008             MOVS     R0,R1
   \   0000000E   0xE001             B.N      ??WWDG_GetFlagStatus_1
    269            }
    270            else
    271            {
    272              bitstatus = RESET;
   \                     ??WWDG_GetFlagStatus_0: (+1)
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x0008             MOVS     R0,R1
    273            }
    274            return bitstatus;
   \                     ??WWDG_GetFlagStatus_1: (+1)
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x4770             BX       LR               ;; return
    275          }
    276          
    277          /**
    278            * @brief  Clears Early Wakeup interrupt flag.
    279            * @param  None
    280            * @retval None
    281            */

   \                                 In section .text, align 2, keep-with-next
    282          void WWDG_ClearFlag(void)
    283          {
    284            WWDG->SR = (uint32_t)RESET;
   \                     WWDG_ClearFlag: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR.N    R1,??DataTable6_4  ;; 0x40002c08
   \   00000004   0x6008             STR      R0,[R1, #+0]
    285          }
   \   00000006   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x40002C04         DC32     0x40002c04

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x420580A4         DC32     0x420580a4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x40002C00         DC32     0x40002c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x40002C08         DC32     0x40002c08

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x44 0x3A          DC8 44H, 3AH, 5CH, 49H, 41H, 52H, 20H, 57H
   \              0x5C 0x49    
   \              0x41 0x52    
   \              0x20 0x57    
   \   00000008   0x6F 0x72          DC8 6FH, 72H, 6BH, 73H, 70H, 61H, 63H, 65H
   \              0x6B 0x73    
   \              0x70 0x61    
   \              0x63 0x65    
   \   00000010   0x5C 0x53          DC8 5CH, 53H, 54H, 4DH, 33H, 32H, 46H, 34H
   \              0x54 0x4D    
   \              0x33 0x32    
   \              0x46 0x34    
   \   00000018   0x30 0x37          DC8 30H, 37H, 5CH, 53H, 54H, 4DH, 33H, 32H
   \              0x5C 0x53    
   \              0x54 0x4D    
   \              0x33 0x32    
   \   00000020   0x46 0x34          DC8 46H, 34H, 2DH, 44H, 69H, 73H, 63H, 6FH
   \              0x2D 0x44    
   \              0x69 0x73    
   \              0x63 0x6F    
   \   00000028   0x76 0x65          DC8 76H, 65H, 72H, 79H, 5FH, 46H, 57H, 5FH
   \              0x72 0x79    
   \              0x5F 0x46    
   \              0x57 0x5F    
   \   00000030   0x56 0x31          DC8 56H, 31H, 2EH, 31H, 2EH, 30H, 5CH, 4CH
   \              0x2E 0x31    
   \              0x2E 0x30    
   \              0x5C 0x4C    
   \   00000038   0x69 0x62          DC8 69H, 62H, 72H, 61H, 72H, 69H, 65H, 73H
   \              0x72 0x61    
   \              0x72 0x69    
   \              0x65 0x73    
   \   00000040   0x5C 0x53          DC8 5CH, 53H, 54H, 4DH, 33H, 32H, 46H, 34H
   \              0x54 0x4D    
   \              0x33 0x32    
   \              0x46 0x34    
   \   00000048   0x78 0x78          DC8 78H, 78H, 5FH, 53H, 74H, 64H, 50H, 65H
   \              0x5F 0x53    
   \              0x74 0x64    
   \              0x50 0x65    
   \   00000050   0x72 0x69          DC8 72H, 69H, 70H, 68H, 5FH, 44H, 72H, 69H
   \              0x70 0x68    
   \              0x5F 0x44    
   \              0x72 0x69    
   \   00000058   0x76 0x65          DC8 76H, 65H, 72H, 5CH, 73H, 72H, 63H, 5CH
   \              0x72 0x5C    
   \              0x73 0x72    
   \              0x63 0x5C    
   \   00000060   0x73 0x74          DC8 73H, 74H, 6DH, 33H, 32H, 66H, 34H, 78H
   \              0x6D 0x33    
   \              0x32 0x66    
   \              0x34 0x78    
   \   00000068   0x78 0x5F          DC8 78H, 5FH, 77H, 77H, 64H, 67H, 2EH, 63H
   \              0x77 0x77    
   \              0x64 0x67    
   \              0x2E 0x63    
   \   00000070   0x00               DC8 0
   \   00000071   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    286          
    287          /**
    288            * @}
    289            */
    290          
    291          /**
    292            * @}
    293            */
    294          
    295          /**
    296            * @}
    297            */
    298          
    299          /**
    300            * @}
    301            */
    302          
    303          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   WWDG_ClearFlag
       8   WWDG_DeInit
         8   -> RCC_APB1PeriphResetCmd
       8   WWDG_Enable
         8   -> assert_failed
       0   WWDG_EnableIT
       0   WWDG_GetFlagStatus
       8   WWDG_SetCounter
         8   -> assert_failed
      16   WWDG_SetPrescaler
        16   -> assert_failed
      16   WWDG_SetWindowValue
        16   -> assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
     116  ?_0
       8  WWDG_ClearFlag
      24  WWDG_DeInit
      36  WWDG_Enable
       8  WWDG_EnableIT
      24  WWDG_GetFlagStatus
      36  WWDG_SetCounter
      52  WWDG_SetPrescaler
      54  WWDG_SetWindowValue

 
 116 bytes in section .rodata
 262 bytes in section .text
 
 262 bytes of CODE  memory
 116 bytes of CONST memory

Errors: none
Warnings: none
