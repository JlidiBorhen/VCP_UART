###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       06/May/2016  23:31:31
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\IAR
#        Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_cryp_aes.c
#    Command line =  
#        "D:\IAR
#        Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_cryp_aes.c"
#        -D USE_STDPERIPH_DRIVER -D STM32F4XX -D USE_FULL_ASSERT -lCN "D:\IAR
#        Workspace\STM32F407\VCP_ESP\Debug\List" -o "D:\IAR
#        Workspace\STM32F407\VCP_ESP\Debug\Obj" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\"
#        -I "D:\IAR Workspace\STM32F407\VCP_ESP\..\Libraries\CMSIS\Include\" -I
#        "D:\IAR Workspace\STM32F407\VCP_ESP\..\Utilities\STM32F4-Discovery\"
#        -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\..\Libraries\CMSIS\ST\STM32F4xx\Include\"
#        -I "D:\IAR Workspace\STM32F407\VCP_ESP\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_conf\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\cdc\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\otg\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\core\" -On --use_c++_inline -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        D:\IAR Workspace\STM32F407\VCP_ESP\Debug\List\stm32f4xx_cryp_aes.lst
#    Object file  =  
#        D:\IAR Workspace\STM32F407\VCP_ESP\Debug\Obj\stm32f4xx_cryp_aes.o
#
###############################################################################

D:\IAR Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_cryp_aes.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f4xx_cryp_aes.c
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    30-September-2011
      7            * @brief   This file provides high level functions to encrypt and decrypt an 
      8            *          input message using AES in ECB/CBC/CTR modes.
      9            *          It uses the stm32f4xx_cryp.c/.h drivers to access the STM32F4xx CRYP
     10            *          peripheral.
     11            *
     12            *  @verbatim
     13            *
     14            *          ===================================================================
     15            *                                   How to use this driver
     16            *          ===================================================================
     17            *          1. Enable The CRYP controller clock using 
     18            *            RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
     19            *
     20            *          2. Encrypt and decrypt using AES in ECB Mode using CRYP_AES_ECB()
     21            *             function.
     22            *
     23            *          3. Encrypt and decrypt using AES in CBC Mode using CRYP_AES_CBC()
     24            *             function.
     25            *
     26            *          4. Encrypt and decrypt using AES in CTR Mode using CRYP_AES_CTR()
     27            *             function.
     28            *
     29            *  @endverbatim
     30            *
     31            ******************************************************************************
     32            * @attention
     33            *
     34            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     35            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     36            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     37            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     38            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     39            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     40            *
     41            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     42            ******************************************************************************  
     43            */
     44          
     45          /* Includes ------------------------------------------------------------------*/
     46          #include "stm32f4xx_cryp.h"
     47          
     48          /** @addtogroup STM32F4xx_StdPeriph_Driver
     49            * @{
     50            */
     51          
     52          /** @defgroup CRYP 
     53            * @brief CRYP driver modules
     54            * @{
     55            */
     56          
     57          /* Private typedef -----------------------------------------------------------*/
     58          /* Private define ------------------------------------------------------------*/
     59          #define AESBUSY_TIMEOUT    ((uint32_t) 0x00010000)
     60          
     61          /* Private macro -------------------------------------------------------------*/
     62          /* Private variables ---------------------------------------------------------*/
     63          /* Private function prototypes -----------------------------------------------*/
     64          /* Private functions ---------------------------------------------------------*/
     65          
     66          /** @defgroup CRYP_Private_Functions
     67            * @{
     68            */ 
     69          
     70          /** @defgroup CRYP_Group6 High Level AES functions
     71           *  @brief   High Level AES functions 
     72           *
     73          @verbatim   
     74           ===============================================================================
     75                                    High Level AES functions
     76           ===============================================================================
     77          
     78          
     79          @endverbatim
     80            * @{
     81            */
     82          
     83          /**
     84            * @brief  Encrypt and decrypt using AES in ECB Mode
     85            * @param  Mode: encryption or decryption Mode.
     86            *          This parameter can be one of the following values:
     87            *            @arg MODE_ENCRYPT: Encryption
     88            *            @arg MODE_DECRYPT: Decryption
     89            * @param  Key: Key used for AES algorithm.
     90            * @param  Keysize: length of the Key, must be a 128, 192 or 256.
     91            * @param  Input: pointer to the Input buffer.
     92            * @param  Ilength: length of the Input buffer, must be a multiple of 16.
     93            * @param  Output: pointer to the returned buffer.
     94            * @retval An ErrorStatus enumeration value:
     95            *          - SUCCESS: Operation done
     96            *          - ERROR: Operation failed
     97            */

   \                                 In section .text, align 2, keep-with-next
     98          ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
     99                                   uint8_t* Input, uint32_t Ilength, uint8_t* Output)
    100          {
   \                     CRYP_AES_ECB: (+1)
   \   00000000   0xE92D 0x4FFF      PUSH     {R0-R11,LR}
   \   00000004   0xB08B             SUB      SP,SP,#+44
   \   00000006   0x9C18             LDR      R4,[SP, #+96]
   \   00000008   0x9D19             LDR      R5,[SP, #+100]
    101            CRYP_InitTypeDef AES_CRYP_InitStructure;
    102            CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
    103            __IO uint32_t counter = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x9000             STR      R0,[SP, #+0]
    104            uint32_t busystatus = 0;
   \   0000000E   0x2600             MOVS     R6,#+0
    105            ErrorStatus status = SUCCESS;
   \   00000010   0x2701             MOVS     R7,#+1
    106            uint32_t keyaddr    = (uint32_t)Key;
   \   00000012   0xF8DD 0xA030      LDR      R10,[SP, #+48]
    107            uint32_t inputaddr  = (uint32_t)Input;
   \   00000016   0xF8DD 0xB038      LDR      R11,[SP, #+56]
    108            uint32_t outputaddr = (uint32_t)Output;
   \   0000001A   0x46A8             MOV      R8,R5
    109            uint32_t i = 0;
   \   0000001C   0xF05F 0x0900      MOVS     R9,#+0
    110          
    111            /* Crypto structures initialisation*/
    112            CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
   \   00000020   0xA803             ADD      R0,SP,#+12
   \   00000022   0x.... 0x....      BL       CRYP_KeyStructInit
    113          
    114            switch(Keysize)
   \   00000026   0xF8BD 0x0034      LDRH     R0,[SP, #+52]
   \   0000002A   0x2880             CMP      R0,#+128
   \   0000002C   0xD005             BEQ.N    ??CRYP_AES_ECB_0
   \   0000002E   0x28C0             CMP      R0,#+192
   \   00000030   0xD01D             BEQ.N    ??CRYP_AES_ECB_1
   \   00000032   0xF5B0 0x7F80      CMP      R0,#+256
   \   00000036   0xD041             BEQ.N    ??CRYP_AES_ECB_2
   \   00000038   0xE073             B.N      ??CRYP_AES_ECB_3
    115            {
    116              case 128:
    117              AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
   \                     ??CRYP_AES_ECB_0: (+1)
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    118              AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
   \   00000040   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   00000044   0xBA00             REV      R0,R0
   \   00000046   0x9007             STR      R0,[SP, #+28]
    119              keyaddr+=4;
   \   00000048   0xF11A 0x0A04      ADDS     R10,R10,#+4
    120              AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
   \   0000004C   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   00000050   0xBA00             REV      R0,R0
   \   00000052   0x9008             STR      R0,[SP, #+32]
    121              keyaddr+=4;
   \   00000054   0xF11A 0x0A04      ADDS     R10,R10,#+4
    122              AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
   \   00000058   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   0000005C   0xBA00             REV      R0,R0
   \   0000005E   0x9009             STR      R0,[SP, #+36]
    123              keyaddr+=4;
   \   00000060   0xF11A 0x0A04      ADDS     R10,R10,#+4
    124              AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
   \   00000064   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   00000068   0xBA00             REV      R0,R0
   \   0000006A   0x900A             STR      R0,[SP, #+40]
    125              break;
   \   0000006C   0xE059             B.N      ??CRYP_AES_ECB_4
    126              case 192:
    127              AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
   \                     ??CRYP_AES_ECB_1: (+1)
   \   0000006E   0xF44F 0x7080      MOV      R0,#+256
   \   00000072   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    128              AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
   \   00000076   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   0000007A   0xBA00             REV      R0,R0
   \   0000007C   0x9005             STR      R0,[SP, #+20]
    129              keyaddr+=4;
   \   0000007E   0xF11A 0x0A04      ADDS     R10,R10,#+4
    130              AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
   \   00000082   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   00000086   0xBA00             REV      R0,R0
   \   00000088   0x9006             STR      R0,[SP, #+24]
    131              keyaddr+=4;
   \   0000008A   0xF11A 0x0A04      ADDS     R10,R10,#+4
    132              AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
   \   0000008E   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   00000092   0xBA00             REV      R0,R0
   \   00000094   0x9007             STR      R0,[SP, #+28]
    133              keyaddr+=4;
   \   00000096   0xF11A 0x0A04      ADDS     R10,R10,#+4
    134              AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
   \   0000009A   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   0000009E   0xBA00             REV      R0,R0
   \   000000A0   0x9008             STR      R0,[SP, #+32]
    135              keyaddr+=4;
   \   000000A2   0xF11A 0x0A04      ADDS     R10,R10,#+4
    136              AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
   \   000000A6   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   000000AA   0xBA00             REV      R0,R0
   \   000000AC   0x9009             STR      R0,[SP, #+36]
    137              keyaddr+=4;
   \   000000AE   0xF11A 0x0A04      ADDS     R10,R10,#+4
    138              AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
   \   000000B2   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   000000B6   0xBA00             REV      R0,R0
   \   000000B8   0x900A             STR      R0,[SP, #+40]
    139              break;
   \   000000BA   0xE032             B.N      ??CRYP_AES_ECB_4
    140              case 256:
    141              AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
   \                     ??CRYP_AES_ECB_2: (+1)
   \   000000BC   0xF44F 0x7000      MOV      R0,#+512
   \   000000C0   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    142              AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
   \   000000C4   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   000000C8   0xBA00             REV      R0,R0
   \   000000CA   0x9003             STR      R0,[SP, #+12]
    143              keyaddr+=4;
   \   000000CC   0xF11A 0x0A04      ADDS     R10,R10,#+4
    144              AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
   \   000000D0   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   000000D4   0xBA00             REV      R0,R0
   \   000000D6   0x9004             STR      R0,[SP, #+16]
    145              keyaddr+=4;
   \   000000D8   0xF11A 0x0A04      ADDS     R10,R10,#+4
    146              AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
   \   000000DC   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   000000E0   0xBA00             REV      R0,R0
   \   000000E2   0x9005             STR      R0,[SP, #+20]
    147              keyaddr+=4;
   \   000000E4   0xF11A 0x0A04      ADDS     R10,R10,#+4
    148              AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
   \   000000E8   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   000000EC   0xBA00             REV      R0,R0
   \   000000EE   0x9006             STR      R0,[SP, #+24]
    149              keyaddr+=4;
   \   000000F0   0xF11A 0x0A04      ADDS     R10,R10,#+4
    150              AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
   \   000000F4   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   000000F8   0xBA00             REV      R0,R0
   \   000000FA   0x9007             STR      R0,[SP, #+28]
    151              keyaddr+=4;
   \   000000FC   0xF11A 0x0A04      ADDS     R10,R10,#+4
    152              AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
   \   00000100   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   00000104   0xBA00             REV      R0,R0
   \   00000106   0x9008             STR      R0,[SP, #+32]
    153              keyaddr+=4;
   \   00000108   0xF11A 0x0A04      ADDS     R10,R10,#+4
    154              AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
   \   0000010C   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   00000110   0xBA00             REV      R0,R0
   \   00000112   0x9009             STR      R0,[SP, #+36]
    155              keyaddr+=4;
   \   00000114   0xF11A 0x0A04      ADDS     R10,R10,#+4
    156              AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
   \   00000118   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   0000011C   0xBA00             REV      R0,R0
   \   0000011E   0x900A             STR      R0,[SP, #+40]
    157              break;
   \   00000120   0xE7FF             B.N      ??CRYP_AES_ECB_4
    158              default:
    159              break;
    160            }
    161          
    162            /*------------------ AES Decryption ------------------*/
    163            if(Mode == MODE_DECRYPT) /* AES decryption */
   \                     ??CRYP_AES_ECB_3: (+1)
   \                     ??CRYP_AES_ECB_4: (+1)
   \   00000122   0xF89D 0x002C      LDRB     R0,[SP, #+44]
   \   00000126   0x2800             CMP      R0,#+0
   \   00000128   0xD129             BNE.N    ??CRYP_AES_ECB_5
    164            {
    165              /* Flush IN/OUT FIFOs */
    166              CRYP_FIFOFlush();
   \   0000012A   0x.... 0x....      BL       CRYP_FIFOFlush
    167          
    168              /* Crypto Init for Key preparation for decryption process */
    169              AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
   \   0000012E   0x2004             MOVS     R0,#+4
   \   00000130   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    170              AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
   \   00000134   0x2038             MOVS     R0,#+56
   \   00000136   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    171              AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
   \   0000013A   0x2000             MOVS     R0,#+0
   \   0000013C   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    172              CRYP_Init(&AES_CRYP_InitStructure);
   \   00000140   0xA801             ADD      R0,SP,#+4
   \   00000142   0x.... 0x....      BL       CRYP_Init
    173          
    174              /* Key Initialisation */
    175              CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
   \   00000146   0xA803             ADD      R0,SP,#+12
   \   00000148   0x.... 0x....      BL       CRYP_KeyInit
    176          
    177              /* Enable Crypto processor */
    178              CRYP_Cmd(ENABLE);
   \   0000014C   0x2001             MOVS     R0,#+1
   \   0000014E   0x.... 0x....      BL       CRYP_Cmd
    179          
    180              /* wait until the Busy flag is RESET */
    181              do
    182              {
    183                busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
   \                     ??CRYP_AES_ECB_6: (+1)
   \   00000152   0x2010             MOVS     R0,#+16
   \   00000154   0x.... 0x....      BL       CRYP_GetFlagStatus
   \   00000158   0x0006             MOVS     R6,R0
    184                counter++;
   \   0000015A   0x9800             LDR      R0,[SP, #+0]
   \   0000015C   0x1C40             ADDS     R0,R0,#+1
   \   0000015E   0x9000             STR      R0,[SP, #+0]
    185              }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
   \   00000160   0x9800             LDR      R0,[SP, #+0]
   \   00000162   0xF5B0 0x3F80      CMP      R0,#+65536
   \   00000166   0xD001             BEQ.N    ??CRYP_AES_ECB_7
   \   00000168   0x2E00             CMP      R6,#+0
   \   0000016A   0xD1F2             BNE.N    ??CRYP_AES_ECB_6
    186          
    187              if (busystatus != RESET)
   \                     ??CRYP_AES_ECB_7: (+1)
   \   0000016C   0x2E00             CMP      R6,#+0
   \   0000016E   0xD002             BEQ.N    ??CRYP_AES_ECB_8
    188             {
    189                 status = ERROR;
   \   00000170   0x2000             MOVS     R0,#+0
   \   00000172   0x0007             MOVS     R7,R0
   \   00000174   0xE009             B.N      ??CRYP_AES_ECB_9
    190              }
    191              else
    192              {
    193                /* Crypto Init for decryption process */  
    194                AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
   \                     ??CRYP_AES_ECB_8: (+1)
   \   00000176   0x2004             MOVS     R0,#+4
   \   00000178   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   \   0000017C   0xE005             B.N      ??CRYP_AES_ECB_9
    195              }
    196            }
    197            /*------------------ AES Encryption ------------------*/
    198            else /* AES encryption */
    199            {
    200          
    201              CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
   \                     ??CRYP_AES_ECB_5: (+1)
   \   0000017E   0xA803             ADD      R0,SP,#+12
   \   00000180   0x.... 0x....      BL       CRYP_KeyInit
    202          
    203              /* Crypto Init for Encryption process */
    204              AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
   \   00000184   0x2000             MOVS     R0,#+0
   \   00000186   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    205            }
    206          
    207            AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
   \                     ??CRYP_AES_ECB_9: (+1)
   \   0000018A   0x2020             MOVS     R0,#+32
   \   0000018C   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    208            AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
   \   00000190   0x2080             MOVS     R0,#+128
   \   00000192   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    209            CRYP_Init(&AES_CRYP_InitStructure);
   \   00000196   0xA801             ADD      R0,SP,#+4
   \   00000198   0x.... 0x....      BL       CRYP_Init
    210          
    211            /* Flush IN/OUT FIFOs */
    212            CRYP_FIFOFlush();
   \   0000019C   0x.... 0x....      BL       CRYP_FIFOFlush
    213          
    214            /* Enable Crypto processor */
    215            CRYP_Cmd(ENABLE);
   \   000001A0   0x2001             MOVS     R0,#+1
   \   000001A2   0x.... 0x....      BL       CRYP_Cmd
    216          
    217            for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
   \   000001A6   0x2000             MOVS     R0,#+0
   \   000001A8   0x4681             MOV      R9,R0
   \                     ??CRYP_AES_ECB_10: (+1)
   \   000001AA   0x45A1             CMP      R9,R4
   \   000001AC   0xD249             BCS.N    ??CRYP_AES_ECB_11
   \   000001AE   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000001B0   0x2F00             CMP      R7,#+0
   \   000001B2   0xD046             BEQ.N    ??CRYP_AES_ECB_11
    218            {
    219          
    220              /* Write the Input block in the IN FIFO */
    221              CRYP_DataIn(*(uint32_t*)(inputaddr));
   \   000001B4   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \   000001B8   0x.... 0x....      BL       CRYP_DataIn
    222              inputaddr+=4;
   \   000001BC   0xF11B 0x0B04      ADDS     R11,R11,#+4
    223              CRYP_DataIn(*(uint32_t*)(inputaddr));
   \   000001C0   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \   000001C4   0x.... 0x....      BL       CRYP_DataIn
    224              inputaddr+=4;
   \   000001C8   0xF11B 0x0B04      ADDS     R11,R11,#+4
    225              CRYP_DataIn(*(uint32_t*)(inputaddr));
   \   000001CC   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \   000001D0   0x.... 0x....      BL       CRYP_DataIn
    226              inputaddr+=4;
   \   000001D4   0xF11B 0x0B04      ADDS     R11,R11,#+4
    227              CRYP_DataIn(*(uint32_t*)(inputaddr));
   \   000001D8   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \   000001DC   0x.... 0x....      BL       CRYP_DataIn
    228              inputaddr+=4;
   \   000001E0   0xF11B 0x0B04      ADDS     R11,R11,#+4
    229          
    230              /* Wait until the complete message has been processed */
    231              counter = 0;
   \   000001E4   0x2000             MOVS     R0,#+0
   \   000001E6   0x9000             STR      R0,[SP, #+0]
    232              do
    233              {
    234                busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
   \                     ??CRYP_AES_ECB_12: (+1)
   \   000001E8   0x2010             MOVS     R0,#+16
   \   000001EA   0x.... 0x....      BL       CRYP_GetFlagStatus
   \   000001EE   0x0006             MOVS     R6,R0
    235                counter++;
   \   000001F0   0x9800             LDR      R0,[SP, #+0]
   \   000001F2   0x1C40             ADDS     R0,R0,#+1
   \   000001F4   0x9000             STR      R0,[SP, #+0]
    236              }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
   \   000001F6   0x9800             LDR      R0,[SP, #+0]
   \   000001F8   0xF5B0 0x3F80      CMP      R0,#+65536
   \   000001FC   0xD001             BEQ.N    ??CRYP_AES_ECB_13
   \   000001FE   0x2E00             CMP      R6,#+0
   \   00000200   0xD1F2             BNE.N    ??CRYP_AES_ECB_12
    237          
    238              if (busystatus != RESET)
   \                     ??CRYP_AES_ECB_13: (+1)
   \   00000202   0x2E00             CMP      R6,#+0
   \   00000204   0xD002             BEQ.N    ??CRYP_AES_ECB_14
    239             {
    240                 status = ERROR;
   \   00000206   0x2000             MOVS     R0,#+0
   \   00000208   0x0007             MOVS     R7,R0
   \   0000020A   0xE017             B.N      ??CRYP_AES_ECB_15
    241              }
    242              else
    243              {
    244          
    245                /* Read the Output block from the Output FIFO */
    246                *(uint32_t*)(outputaddr) = CRYP_DataOut();
   \                     ??CRYP_AES_ECB_14: (+1)
   \   0000020C   0x.... 0x....      BL       CRYP_DataOut
   \   00000210   0xF8C8 0x0000      STR      R0,[R8, #+0]
    247                outputaddr+=4;
   \   00000214   0xF118 0x0804      ADDS     R8,R8,#+4
    248                *(uint32_t*)(outputaddr) = CRYP_DataOut();
   \   00000218   0x.... 0x....      BL       CRYP_DataOut
   \   0000021C   0xF8C8 0x0000      STR      R0,[R8, #+0]
    249                outputaddr+=4;
   \   00000220   0xF118 0x0804      ADDS     R8,R8,#+4
    250                *(uint32_t*)(outputaddr) = CRYP_DataOut();
   \   00000224   0x.... 0x....      BL       CRYP_DataOut
   \   00000228   0xF8C8 0x0000      STR      R0,[R8, #+0]
    251                outputaddr+=4;
   \   0000022C   0xF118 0x0804      ADDS     R8,R8,#+4
    252                *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
   \   00000230   0x.... 0x....      BL       CRYP_DataOut
   \   00000234   0xF8C8 0x0000      STR      R0,[R8, #+0]
    253                outputaddr+=4;
   \   00000238   0xF118 0x0804      ADDS     R8,R8,#+4
    254              }
    255            }
   \                     ??CRYP_AES_ECB_15: (+1)
   \   0000023C   0xF119 0x0910      ADDS     R9,R9,#+16
   \   00000240   0xE7B3             B.N      ??CRYP_AES_ECB_10
    256          
    257            /* Disable Crypto */
    258            CRYP_Cmd(DISABLE);
   \                     ??CRYP_AES_ECB_11: (+1)
   \   00000242   0x2000             MOVS     R0,#+0
   \   00000244   0x.... 0x....      BL       CRYP_Cmd
    259          
    260            return status; 
   \   00000248   0x0038             MOVS     R0,R7
   \   0000024A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000024C   0xB00F             ADD      SP,SP,#+60
   \   0000024E   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    261          }
    262          
    263          /**
    264            * @brief  Encrypt and decrypt using AES in CBC Mode
    265            * @param  Mode: encryption or decryption Mode.
    266            *          This parameter can be one of the following values:
    267            *            @arg MODE_ENCRYPT: Encryption
    268            *            @arg MODE_DECRYPT: Decryption
    269            * @param  InitVectors: Initialisation Vectors used for AES algorithm.
    270            * @param  Key: Key used for AES algorithm.
    271            * @param  Keysize: length of the Key, must be a 128, 192 or 256.
    272            * @param  Input: pointer to the Input buffer.
    273            * @param  Ilength: length of the Input buffer, must be a multiple of 16.
    274            * @param  Output: pointer to the returned buffer.
    275            * @retval An ErrorStatus enumeration value:
    276            *          - SUCCESS: Operation done
    277            *          - ERROR: Operation failed
    278            */

   \                                 In section .text, align 2, keep-with-next
    279          ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
    280                                   uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
    281                                   uint8_t *Output)
    282          {
   \                     CRYP_AES_CBC: (+1)
   \   00000000   0xE92D 0x4FFF      PUSH     {R0-R11,LR}
   \   00000004   0xB08F             SUB      SP,SP,#+60
   \   00000006   0x9C1D             LDR      R4,[SP, #+116]
    283            CRYP_InitTypeDef AES_CRYP_InitStructure;
    284            CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
    285            CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
    286            __IO uint32_t counter = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x9000             STR      R0,[SP, #+0]
    287            uint32_t busystatus = 0;
   \   0000000C   0x2500             MOVS     R5,#+0
    288            ErrorStatus status = SUCCESS;
   \   0000000E   0x2601             MOVS     R6,#+1
    289            uint32_t keyaddr    = (uint32_t)Key;
   \   00000010   0xF8DD 0x9044      LDR      R9,[SP, #+68]
    290            uint32_t inputaddr  = (uint32_t)Input;
   \   00000014   0xF8DD 0xB070      LDR      R11,[SP, #+112]
    291            uint32_t outputaddr = (uint32_t)Output;
   \   00000018   0x9F1E             LDR      R7,[SP, #+120]
    292            uint32_t ivaddr     = (uint32_t)InitVectors;
   \   0000001A   0xF8DD 0xA040      LDR      R10,[SP, #+64]
    293            uint32_t i = 0;
   \   0000001E   0xF05F 0x0800      MOVS     R8,#+0
    294          
    295            /* Crypto structures initialisation*/
    296            CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
   \   00000022   0xA803             ADD      R0,SP,#+12
   \   00000024   0x.... 0x....      BL       CRYP_KeyStructInit
    297          
    298            switch(Keysize)
   \   00000028   0xF8BD 0x0048      LDRH     R0,[SP, #+72]
   \   0000002C   0x2880             CMP      R0,#+128
   \   0000002E   0xD005             BEQ.N    ??CRYP_AES_CBC_0
   \   00000030   0x28C0             CMP      R0,#+192
   \   00000032   0xD01D             BEQ.N    ??CRYP_AES_CBC_1
   \   00000034   0xF5B0 0x7F80      CMP      R0,#+256
   \   00000038   0xD041             BEQ.N    ??CRYP_AES_CBC_2
   \   0000003A   0xE073             B.N      ??CRYP_AES_CBC_3
    299            {
    300              case 128:
    301              AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
   \                     ??CRYP_AES_CBC_0: (+1)
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    302              AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
   \   00000042   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000046   0xBA00             REV      R0,R0
   \   00000048   0x9007             STR      R0,[SP, #+28]
    303              keyaddr+=4;
   \   0000004A   0xF119 0x0904      ADDS     R9,R9,#+4
    304              AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
   \   0000004E   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000052   0xBA00             REV      R0,R0
   \   00000054   0x9008             STR      R0,[SP, #+32]
    305              keyaddr+=4;
   \   00000056   0xF119 0x0904      ADDS     R9,R9,#+4
    306              AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
   \   0000005A   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   0000005E   0xBA00             REV      R0,R0
   \   00000060   0x9009             STR      R0,[SP, #+36]
    307              keyaddr+=4;
   \   00000062   0xF119 0x0904      ADDS     R9,R9,#+4
    308              AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
   \   00000066   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   0000006A   0xBA00             REV      R0,R0
   \   0000006C   0x900A             STR      R0,[SP, #+40]
    309              break;
   \   0000006E   0xE059             B.N      ??CRYP_AES_CBC_4
    310              case 192:
    311              AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
   \                     ??CRYP_AES_CBC_1: (+1)
   \   00000070   0xF44F 0x7080      MOV      R0,#+256
   \   00000074   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    312              AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
   \   00000078   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   0000007C   0xBA00             REV      R0,R0
   \   0000007E   0x9005             STR      R0,[SP, #+20]
    313              keyaddr+=4;
   \   00000080   0xF119 0x0904      ADDS     R9,R9,#+4
    314              AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
   \   00000084   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000088   0xBA00             REV      R0,R0
   \   0000008A   0x9006             STR      R0,[SP, #+24]
    315              keyaddr+=4;
   \   0000008C   0xF119 0x0904      ADDS     R9,R9,#+4
    316              AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
   \   00000090   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000094   0xBA00             REV      R0,R0
   \   00000096   0x9007             STR      R0,[SP, #+28]
    317              keyaddr+=4;
   \   00000098   0xF119 0x0904      ADDS     R9,R9,#+4
    318              AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
   \   0000009C   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   000000A0   0xBA00             REV      R0,R0
   \   000000A2   0x9008             STR      R0,[SP, #+32]
    319              keyaddr+=4;
   \   000000A4   0xF119 0x0904      ADDS     R9,R9,#+4
    320              AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
   \   000000A8   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   000000AC   0xBA00             REV      R0,R0
   \   000000AE   0x9009             STR      R0,[SP, #+36]
    321              keyaddr+=4;
   \   000000B0   0xF119 0x0904      ADDS     R9,R9,#+4
    322              AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
   \   000000B4   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   000000B8   0xBA00             REV      R0,R0
   \   000000BA   0x900A             STR      R0,[SP, #+40]
    323              break;
   \   000000BC   0xE032             B.N      ??CRYP_AES_CBC_4
    324              case 256:
    325              AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
   \                     ??CRYP_AES_CBC_2: (+1)
   \   000000BE   0xF44F 0x7000      MOV      R0,#+512
   \   000000C2   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    326              AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
   \   000000C6   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   000000CA   0xBA00             REV      R0,R0
   \   000000CC   0x9003             STR      R0,[SP, #+12]
    327              keyaddr+=4;
   \   000000CE   0xF119 0x0904      ADDS     R9,R9,#+4
    328              AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
   \   000000D2   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   000000D6   0xBA00             REV      R0,R0
   \   000000D8   0x9004             STR      R0,[SP, #+16]
    329              keyaddr+=4;
   \   000000DA   0xF119 0x0904      ADDS     R9,R9,#+4
    330              AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
   \   000000DE   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   000000E2   0xBA00             REV      R0,R0
   \   000000E4   0x9005             STR      R0,[SP, #+20]
    331              keyaddr+=4;
   \   000000E6   0xF119 0x0904      ADDS     R9,R9,#+4
    332              AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
   \   000000EA   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   000000EE   0xBA00             REV      R0,R0
   \   000000F0   0x9006             STR      R0,[SP, #+24]
    333              keyaddr+=4;
   \   000000F2   0xF119 0x0904      ADDS     R9,R9,#+4
    334              AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
   \   000000F6   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   000000FA   0xBA00             REV      R0,R0
   \   000000FC   0x9007             STR      R0,[SP, #+28]
    335              keyaddr+=4;
   \   000000FE   0xF119 0x0904      ADDS     R9,R9,#+4
    336              AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
   \   00000102   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000106   0xBA00             REV      R0,R0
   \   00000108   0x9008             STR      R0,[SP, #+32]
    337              keyaddr+=4;
   \   0000010A   0xF119 0x0904      ADDS     R9,R9,#+4
    338              AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
   \   0000010E   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000112   0xBA00             REV      R0,R0
   \   00000114   0x9009             STR      R0,[SP, #+36]
    339              keyaddr+=4;
   \   00000116   0xF119 0x0904      ADDS     R9,R9,#+4
    340              AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
   \   0000011A   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   0000011E   0xBA00             REV      R0,R0
   \   00000120   0x900A             STR      R0,[SP, #+40]
    341              break;
   \   00000122   0xE7FF             B.N      ??CRYP_AES_CBC_4
    342              default:
    343              break;
    344            }
    345          
    346            /* CRYP Initialization Vectors */
    347            AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
   \                     ??CRYP_AES_CBC_3: (+1)
   \                     ??CRYP_AES_CBC_4: (+1)
   \   00000124   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   00000128   0xBA00             REV      R0,R0
   \   0000012A   0x900B             STR      R0,[SP, #+44]
    348            ivaddr+=4;
   \   0000012C   0xF11A 0x0A04      ADDS     R10,R10,#+4
    349            AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
   \   00000130   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   00000134   0xBA00             REV      R0,R0
   \   00000136   0x900C             STR      R0,[SP, #+48]
    350            ivaddr+=4;
   \   00000138   0xF11A 0x0A04      ADDS     R10,R10,#+4
    351            AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
   \   0000013C   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   00000140   0xBA00             REV      R0,R0
   \   00000142   0x900D             STR      R0,[SP, #+52]
    352            ivaddr+=4;
   \   00000144   0xF11A 0x0A04      ADDS     R10,R10,#+4
    353            AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
   \   00000148   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   0000014C   0xBA00             REV      R0,R0
   \   0000014E   0x900E             STR      R0,[SP, #+56]
    354          
    355          
    356            /*------------------ AES Decryption ------------------*/
    357            if(Mode == MODE_DECRYPT) /* AES decryption */
   \   00000150   0xF89D 0x003C      LDRB     R0,[SP, #+60]
   \   00000154   0x2800             CMP      R0,#+0
   \   00000156   0xD129             BNE.N    ??CRYP_AES_CBC_5
    358            {
    359              /* Flush IN/OUT FIFOs */
    360              CRYP_FIFOFlush();
   \   00000158   0x.... 0x....      BL       CRYP_FIFOFlush
    361          
    362              /* Crypto Init for Key preparation for decryption process */
    363              AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
   \   0000015C   0x2004             MOVS     R0,#+4
   \   0000015E   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    364              AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
   \   00000162   0x2038             MOVS     R0,#+56
   \   00000164   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    365              AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
   \   00000168   0x2000             MOVS     R0,#+0
   \   0000016A   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    366          
    367              CRYP_Init(&AES_CRYP_InitStructure);
   \   0000016E   0xA801             ADD      R0,SP,#+4
   \   00000170   0x.... 0x....      BL       CRYP_Init
    368          
    369              /* Key Initialisation */
    370              CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
   \   00000174   0xA803             ADD      R0,SP,#+12
   \   00000176   0x.... 0x....      BL       CRYP_KeyInit
    371          
    372              /* Enable Crypto processor */
    373              CRYP_Cmd(ENABLE);
   \   0000017A   0x2001             MOVS     R0,#+1
   \   0000017C   0x.... 0x....      BL       CRYP_Cmd
    374          
    375              /* wait until the Busy flag is RESET */
    376              do
    377              {
    378                busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
   \                     ??CRYP_AES_CBC_6: (+1)
   \   00000180   0x2010             MOVS     R0,#+16
   \   00000182   0x.... 0x....      BL       CRYP_GetFlagStatus
   \   00000186   0x0005             MOVS     R5,R0
    379                counter++;
   \   00000188   0x9800             LDR      R0,[SP, #+0]
   \   0000018A   0x1C40             ADDS     R0,R0,#+1
   \   0000018C   0x9000             STR      R0,[SP, #+0]
    380              }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
   \   0000018E   0x9800             LDR      R0,[SP, #+0]
   \   00000190   0xF5B0 0x3F80      CMP      R0,#+65536
   \   00000194   0xD001             BEQ.N    ??CRYP_AES_CBC_7
   \   00000196   0x2D00             CMP      R5,#+0
   \   00000198   0xD1F2             BNE.N    ??CRYP_AES_CBC_6
    381          
    382              if (busystatus != RESET)
   \                     ??CRYP_AES_CBC_7: (+1)
   \   0000019A   0x2D00             CMP      R5,#+0
   \   0000019C   0xD002             BEQ.N    ??CRYP_AES_CBC_8
    383             {
    384                 status = ERROR;
   \   0000019E   0x2000             MOVS     R0,#+0
   \   000001A0   0x0006             MOVS     R6,R0
   \   000001A2   0xE009             B.N      ??CRYP_AES_CBC_9
    385              }
    386              else
    387              {
    388                /* Crypto Init for decryption process */  
    389                AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
   \                     ??CRYP_AES_CBC_8: (+1)
   \   000001A4   0x2004             MOVS     R0,#+4
   \   000001A6   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   \   000001AA   0xE005             B.N      ??CRYP_AES_CBC_9
    390              }
    391            }
    392            /*------------------ AES Encryption ------------------*/
    393            else /* AES encryption */
    394            {
    395              CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
   \                     ??CRYP_AES_CBC_5: (+1)
   \   000001AC   0xA803             ADD      R0,SP,#+12
   \   000001AE   0x.... 0x....      BL       CRYP_KeyInit
    396          
    397              /* Crypto Init for Encryption process */
    398              AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
   \   000001B2   0x2000             MOVS     R0,#+0
   \   000001B4   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    399            }
    400            AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
   \                     ??CRYP_AES_CBC_9: (+1)
   \   000001B8   0x2028             MOVS     R0,#+40
   \   000001BA   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    401            AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
   \   000001BE   0x2080             MOVS     R0,#+128
   \   000001C0   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    402            CRYP_Init(&AES_CRYP_InitStructure);
   \   000001C4   0xA801             ADD      R0,SP,#+4
   \   000001C6   0x.... 0x....      BL       CRYP_Init
    403          
    404            /* CRYP Initialization Vectors */
    405            CRYP_IVInit(&AES_CRYP_IVInitStructure);
   \   000001CA   0xA80B             ADD      R0,SP,#+44
   \   000001CC   0x.... 0x....      BL       CRYP_IVInit
    406          
    407            /* Flush IN/OUT FIFOs */
    408            CRYP_FIFOFlush();
   \   000001D0   0x.... 0x....      BL       CRYP_FIFOFlush
    409          
    410            /* Enable Crypto processor */
    411            CRYP_Cmd(ENABLE);
   \   000001D4   0x2001             MOVS     R0,#+1
   \   000001D6   0x.... 0x....      BL       CRYP_Cmd
    412          
    413          
    414            for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
   \   000001DA   0x2000             MOVS     R0,#+0
   \   000001DC   0x4680             MOV      R8,R0
   \                     ??CRYP_AES_CBC_10: (+1)
   \   000001DE   0x45A0             CMP      R8,R4
   \   000001E0   0xD241             BCS.N    ??CRYP_AES_CBC_11
   \   000001E2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001E4   0x2E00             CMP      R6,#+0
   \   000001E6   0xD03E             BEQ.N    ??CRYP_AES_CBC_11
    415            {
    416          
    417              /* Write the Input block in the IN FIFO */
    418              CRYP_DataIn(*(uint32_t*)(inputaddr));
   \   000001E8   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \   000001EC   0x.... 0x....      BL       CRYP_DataIn
    419              inputaddr+=4;
   \   000001F0   0xF11B 0x0B04      ADDS     R11,R11,#+4
    420              CRYP_DataIn(*(uint32_t*)(inputaddr));
   \   000001F4   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \   000001F8   0x.... 0x....      BL       CRYP_DataIn
    421              inputaddr+=4;
   \   000001FC   0xF11B 0x0B04      ADDS     R11,R11,#+4
    422              CRYP_DataIn(*(uint32_t*)(inputaddr));
   \   00000200   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \   00000204   0x.... 0x....      BL       CRYP_DataIn
    423              inputaddr+=4;
   \   00000208   0xF11B 0x0B04      ADDS     R11,R11,#+4
    424              CRYP_DataIn(*(uint32_t*)(inputaddr));
   \   0000020C   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \   00000210   0x.... 0x....      BL       CRYP_DataIn
    425              inputaddr+=4;
   \   00000214   0xF11B 0x0B04      ADDS     R11,R11,#+4
    426              /* Wait until the complete message has been processed */
    427              counter = 0;
   \   00000218   0x2000             MOVS     R0,#+0
   \   0000021A   0x9000             STR      R0,[SP, #+0]
    428              do
    429              {
    430                busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
   \                     ??CRYP_AES_CBC_12: (+1)
   \   0000021C   0x2010             MOVS     R0,#+16
   \   0000021E   0x.... 0x....      BL       CRYP_GetFlagStatus
   \   00000222   0x0005             MOVS     R5,R0
    431                counter++;
   \   00000224   0x9800             LDR      R0,[SP, #+0]
   \   00000226   0x1C40             ADDS     R0,R0,#+1
   \   00000228   0x9000             STR      R0,[SP, #+0]
    432              }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
   \   0000022A   0x9800             LDR      R0,[SP, #+0]
   \   0000022C   0xF5B0 0x3F80      CMP      R0,#+65536
   \   00000230   0xD001             BEQ.N    ??CRYP_AES_CBC_13
   \   00000232   0x2D00             CMP      R5,#+0
   \   00000234   0xD1F2             BNE.N    ??CRYP_AES_CBC_12
    433          
    434              if (busystatus != RESET)
   \                     ??CRYP_AES_CBC_13: (+1)
   \   00000236   0x2D00             CMP      R5,#+0
   \   00000238   0xD002             BEQ.N    ??CRYP_AES_CBC_14
    435             {
    436                 status = ERROR;
   \   0000023A   0x2000             MOVS     R0,#+0
   \   0000023C   0x0006             MOVS     R6,R0
   \   0000023E   0xE00F             B.N      ??CRYP_AES_CBC_15
    437              }
    438              else
    439              {
    440          
    441                /* Read the Output block from the Output FIFO */
    442                *(uint32_t*)(outputaddr) = CRYP_DataOut();
   \                     ??CRYP_AES_CBC_14: (+1)
   \   00000240   0x.... 0x....      BL       CRYP_DataOut
   \   00000244   0x6038             STR      R0,[R7, #+0]
    443                outputaddr+=4;
   \   00000246   0x1D3F             ADDS     R7,R7,#+4
    444                *(uint32_t*)(outputaddr) = CRYP_DataOut();
   \   00000248   0x.... 0x....      BL       CRYP_DataOut
   \   0000024C   0x6038             STR      R0,[R7, #+0]
    445                outputaddr+=4;
   \   0000024E   0x1D3F             ADDS     R7,R7,#+4
    446                *(uint32_t*)(outputaddr) = CRYP_DataOut();
   \   00000250   0x.... 0x....      BL       CRYP_DataOut
   \   00000254   0x6038             STR      R0,[R7, #+0]
    447                outputaddr+=4;
   \   00000256   0x1D3F             ADDS     R7,R7,#+4
    448                *(uint32_t*)(outputaddr) = CRYP_DataOut();
   \   00000258   0x.... 0x....      BL       CRYP_DataOut
   \   0000025C   0x6038             STR      R0,[R7, #+0]
    449                outputaddr+=4;
   \   0000025E   0x1D3F             ADDS     R7,R7,#+4
    450              }
    451            }
   \                     ??CRYP_AES_CBC_15: (+1)
   \   00000260   0xF118 0x0810      ADDS     R8,R8,#+16
   \   00000264   0xE7BB             B.N      ??CRYP_AES_CBC_10
    452          
    453            /* Disable Crypto */
    454            CRYP_Cmd(DISABLE);
   \                     ??CRYP_AES_CBC_11: (+1)
   \   00000266   0x2000             MOVS     R0,#+0
   \   00000268   0x.... 0x....      BL       CRYP_Cmd
    455          
    456            return status;
   \   0000026C   0x0030             MOVS     R0,R6
   \   0000026E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000270   0xB013             ADD      SP,SP,#+76
   \   00000272   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    457          }
    458          
    459          /**
    460            * @brief  Encrypt and decrypt using AES in CTR Mode
    461            * @param  Mode: encryption or decryption Mode.
    462            *           This parameter can be one of the following values:
    463            *            @arg MODE_ENCRYPT: Encryption
    464            *            @arg MODE_DECRYPT: Decryption
    465            * @param  InitVectors: Initialisation Vectors used for AES algorithm.
    466            * @param  Key: Key used for AES algorithm.
    467            * @param  Keysize: length of the Key, must be a 128, 192 or 256.
    468            * @param  Input: pointer to the Input buffer.
    469            * @param  Ilength: length of the Input buffer, must be a multiple of 16.
    470            * @param  Output: pointer to the returned buffer.
    471            * @retval An ErrorStatus enumeration value:
    472            *          - SUCCESS: Operation done
    473            *          - ERROR: Operation failed
    474            */

   \                                 In section .text, align 2, keep-with-next
    475          ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
    476                                   uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
    477                                   uint8_t *Output)
    478          {
   \                     CRYP_AES_CTR: (+1)
   \   00000000   0xE92D 0x4FFF      PUSH     {R0-R11,LR}
   \   00000004   0xB08F             SUB      SP,SP,#+60
   \   00000006   0x9C1D             LDR      R4,[SP, #+116]
    479            CRYP_InitTypeDef AES_CRYP_InitStructure;
    480            CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
    481            CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
    482            __IO uint32_t counter = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x9000             STR      R0,[SP, #+0]
    483            uint32_t busystatus = 0;
   \   0000000C   0x2500             MOVS     R5,#+0
    484            ErrorStatus status = SUCCESS;
   \   0000000E   0x2601             MOVS     R6,#+1
    485            uint32_t keyaddr    = (uint32_t)Key;
   \   00000010   0xF8DD 0x9044      LDR      R9,[SP, #+68]
    486            uint32_t inputaddr  = (uint32_t)Input;
   \   00000014   0xF8DD 0xB070      LDR      R11,[SP, #+112]
    487            uint32_t outputaddr = (uint32_t)Output;
   \   00000018   0x9F1E             LDR      R7,[SP, #+120]
    488            uint32_t ivaddr     = (uint32_t)InitVectors;
   \   0000001A   0xF8DD 0xA040      LDR      R10,[SP, #+64]
    489            uint32_t i = 0;
   \   0000001E   0xF05F 0x0800      MOVS     R8,#+0
    490          
    491            /* Crypto structures initialisation*/
    492            CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
   \   00000022   0xA803             ADD      R0,SP,#+12
   \   00000024   0x.... 0x....      BL       CRYP_KeyStructInit
    493          
    494            switch(Keysize)
   \   00000028   0xF8BD 0x0048      LDRH     R0,[SP, #+72]
   \   0000002C   0x2880             CMP      R0,#+128
   \   0000002E   0xD005             BEQ.N    ??CRYP_AES_CTR_0
   \   00000030   0x28C0             CMP      R0,#+192
   \   00000032   0xD01D             BEQ.N    ??CRYP_AES_CTR_1
   \   00000034   0xF5B0 0x7F80      CMP      R0,#+256
   \   00000038   0xD041             BEQ.N    ??CRYP_AES_CTR_2
   \   0000003A   0xE073             B.N      ??CRYP_AES_CTR_3
    495            {
    496              case 128:
    497              AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
   \                     ??CRYP_AES_CTR_0: (+1)
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    498              AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
   \   00000042   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000046   0xBA00             REV      R0,R0
   \   00000048   0x9007             STR      R0,[SP, #+28]
    499              keyaddr+=4;
   \   0000004A   0xF119 0x0904      ADDS     R9,R9,#+4
    500              AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
   \   0000004E   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000052   0xBA00             REV      R0,R0
   \   00000054   0x9008             STR      R0,[SP, #+32]
    501              keyaddr+=4;
   \   00000056   0xF119 0x0904      ADDS     R9,R9,#+4
    502              AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
   \   0000005A   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   0000005E   0xBA00             REV      R0,R0
   \   00000060   0x9009             STR      R0,[SP, #+36]
    503              keyaddr+=4;
   \   00000062   0xF119 0x0904      ADDS     R9,R9,#+4
    504              AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
   \   00000066   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   0000006A   0xBA00             REV      R0,R0
   \   0000006C   0x900A             STR      R0,[SP, #+40]
    505              break;
   \   0000006E   0xE059             B.N      ??CRYP_AES_CTR_4
    506              case 192:
    507              AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
   \                     ??CRYP_AES_CTR_1: (+1)
   \   00000070   0xF44F 0x7080      MOV      R0,#+256
   \   00000074   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    508              AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
   \   00000078   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   0000007C   0xBA00             REV      R0,R0
   \   0000007E   0x9005             STR      R0,[SP, #+20]
    509              keyaddr+=4;
   \   00000080   0xF119 0x0904      ADDS     R9,R9,#+4
    510              AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
   \   00000084   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000088   0xBA00             REV      R0,R0
   \   0000008A   0x9006             STR      R0,[SP, #+24]
    511              keyaddr+=4;
   \   0000008C   0xF119 0x0904      ADDS     R9,R9,#+4
    512              AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
   \   00000090   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000094   0xBA00             REV      R0,R0
   \   00000096   0x9007             STR      R0,[SP, #+28]
    513              keyaddr+=4;
   \   00000098   0xF119 0x0904      ADDS     R9,R9,#+4
    514              AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
   \   0000009C   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   000000A0   0xBA00             REV      R0,R0
   \   000000A2   0x9008             STR      R0,[SP, #+32]
    515              keyaddr+=4;
   \   000000A4   0xF119 0x0904      ADDS     R9,R9,#+4
    516              AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
   \   000000A8   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   000000AC   0xBA00             REV      R0,R0
   \   000000AE   0x9009             STR      R0,[SP, #+36]
    517              keyaddr+=4;
   \   000000B0   0xF119 0x0904      ADDS     R9,R9,#+4
    518              AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
   \   000000B4   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   000000B8   0xBA00             REV      R0,R0
   \   000000BA   0x900A             STR      R0,[SP, #+40]
    519              break;
   \   000000BC   0xE032             B.N      ??CRYP_AES_CTR_4
    520              case 256:
    521              AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
   \                     ??CRYP_AES_CTR_2: (+1)
   \   000000BE   0xF44F 0x7000      MOV      R0,#+512
   \   000000C2   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    522              AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
   \   000000C6   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   000000CA   0xBA00             REV      R0,R0
   \   000000CC   0x9003             STR      R0,[SP, #+12]
    523              keyaddr+=4;
   \   000000CE   0xF119 0x0904      ADDS     R9,R9,#+4
    524              AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
   \   000000D2   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   000000D6   0xBA00             REV      R0,R0
   \   000000D8   0x9004             STR      R0,[SP, #+16]
    525              keyaddr+=4;
   \   000000DA   0xF119 0x0904      ADDS     R9,R9,#+4
    526              AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
   \   000000DE   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   000000E2   0xBA00             REV      R0,R0
   \   000000E4   0x9005             STR      R0,[SP, #+20]
    527              keyaddr+=4;
   \   000000E6   0xF119 0x0904      ADDS     R9,R9,#+4
    528              AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
   \   000000EA   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   000000EE   0xBA00             REV      R0,R0
   \   000000F0   0x9006             STR      R0,[SP, #+24]
    529              keyaddr+=4;
   \   000000F2   0xF119 0x0904      ADDS     R9,R9,#+4
    530              AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
   \   000000F6   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   000000FA   0xBA00             REV      R0,R0
   \   000000FC   0x9007             STR      R0,[SP, #+28]
    531              keyaddr+=4;
   \   000000FE   0xF119 0x0904      ADDS     R9,R9,#+4
    532              AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
   \   00000102   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000106   0xBA00             REV      R0,R0
   \   00000108   0x9008             STR      R0,[SP, #+32]
    533              keyaddr+=4;
   \   0000010A   0xF119 0x0904      ADDS     R9,R9,#+4
    534              AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
   \   0000010E   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000112   0xBA00             REV      R0,R0
   \   00000114   0x9009             STR      R0,[SP, #+36]
    535              keyaddr+=4;
   \   00000116   0xF119 0x0904      ADDS     R9,R9,#+4
    536              AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
   \   0000011A   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   0000011E   0xBA00             REV      R0,R0
   \   00000120   0x900A             STR      R0,[SP, #+40]
    537              break;
   \   00000122   0xE7FF             B.N      ??CRYP_AES_CTR_4
    538              default:
    539              break;
    540            }
    541            /* CRYP Initialization Vectors */
    542            AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
   \                     ??CRYP_AES_CTR_3: (+1)
   \                     ??CRYP_AES_CTR_4: (+1)
   \   00000124   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   00000128   0xBA00             REV      R0,R0
   \   0000012A   0x900B             STR      R0,[SP, #+44]
    543            ivaddr+=4;
   \   0000012C   0xF11A 0x0A04      ADDS     R10,R10,#+4
    544            AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
   \   00000130   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   00000134   0xBA00             REV      R0,R0
   \   00000136   0x900C             STR      R0,[SP, #+48]
    545            ivaddr+=4;
   \   00000138   0xF11A 0x0A04      ADDS     R10,R10,#+4
    546            AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
   \   0000013C   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   00000140   0xBA00             REV      R0,R0
   \   00000142   0x900D             STR      R0,[SP, #+52]
    547            ivaddr+=4;
   \   00000144   0xF11A 0x0A04      ADDS     R10,R10,#+4
    548            AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
   \   00000148   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   0000014C   0xBA00             REV      R0,R0
   \   0000014E   0x900E             STR      R0,[SP, #+56]
    549          
    550            /* Key Initialisation */
    551            CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
   \   00000150   0xA803             ADD      R0,SP,#+12
   \   00000152   0x.... 0x....      BL       CRYP_KeyInit
    552          
    553            /*------------------ AES Decryption ------------------*/
    554            if(Mode == MODE_DECRYPT) /* AES decryption */
   \   00000156   0xF89D 0x003C      LDRB     R0,[SP, #+60]
   \   0000015A   0x2800             CMP      R0,#+0
   \   0000015C   0xD103             BNE.N    ??CRYP_AES_CTR_5
    555            {
    556              /* Crypto Init for decryption process */
    557              AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
   \   0000015E   0x2004             MOVS     R0,#+4
   \   00000160   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   \   00000164   0xE002             B.N      ??CRYP_AES_CTR_6
    558            }
    559            /*------------------ AES Encryption ------------------*/
    560            else /* AES encryption */
    561            {
    562              /* Crypto Init for Encryption process */
    563              AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
   \                     ??CRYP_AES_CTR_5: (+1)
   \   00000166   0x2000             MOVS     R0,#+0
   \   00000168   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    564            }
    565            AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
   \                     ??CRYP_AES_CTR_6: (+1)
   \   0000016C   0x2030             MOVS     R0,#+48
   \   0000016E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    566            AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
   \   00000172   0x2080             MOVS     R0,#+128
   \   00000174   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    567            CRYP_Init(&AES_CRYP_InitStructure);
   \   00000178   0xA801             ADD      R0,SP,#+4
   \   0000017A   0x.... 0x....      BL       CRYP_Init
    568          
    569            /* CRYP Initialization Vectors */
    570            CRYP_IVInit(&AES_CRYP_IVInitStructure);
   \   0000017E   0xA80B             ADD      R0,SP,#+44
   \   00000180   0x.... 0x....      BL       CRYP_IVInit
    571          
    572            /* Flush IN/OUT FIFOs */
    573            CRYP_FIFOFlush();
   \   00000184   0x.... 0x....      BL       CRYP_FIFOFlush
    574          
    575            /* Enable Crypto processor */
    576            CRYP_Cmd(ENABLE);
   \   00000188   0x2001             MOVS     R0,#+1
   \   0000018A   0x.... 0x....      BL       CRYP_Cmd
    577          
    578            for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
   \   0000018E   0x2000             MOVS     R0,#+0
   \   00000190   0x4680             MOV      R8,R0
   \                     ??CRYP_AES_CTR_7: (+1)
   \   00000192   0x45A0             CMP      R8,R4
   \   00000194   0xD241             BCS.N    ??CRYP_AES_CTR_8
   \   00000196   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000198   0x2E00             CMP      R6,#+0
   \   0000019A   0xD03E             BEQ.N    ??CRYP_AES_CTR_8
    579            {
    580          
    581              /* Write the Input block in the IN FIFO */
    582              CRYP_DataIn(*(uint32_t*)(inputaddr));
   \   0000019C   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \   000001A0   0x.... 0x....      BL       CRYP_DataIn
    583              inputaddr+=4;
   \   000001A4   0xF11B 0x0B04      ADDS     R11,R11,#+4
    584              CRYP_DataIn(*(uint32_t*)(inputaddr));
   \   000001A8   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \   000001AC   0x.... 0x....      BL       CRYP_DataIn
    585              inputaddr+=4;
   \   000001B0   0xF11B 0x0B04      ADDS     R11,R11,#+4
    586              CRYP_DataIn(*(uint32_t*)(inputaddr));
   \   000001B4   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \   000001B8   0x.... 0x....      BL       CRYP_DataIn
    587              inputaddr+=4;
   \   000001BC   0xF11B 0x0B04      ADDS     R11,R11,#+4
    588              CRYP_DataIn(*(uint32_t*)(inputaddr));
   \   000001C0   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \   000001C4   0x.... 0x....      BL       CRYP_DataIn
    589              inputaddr+=4;
   \   000001C8   0xF11B 0x0B04      ADDS     R11,R11,#+4
    590              /* Wait until the complete message has been processed */
    591              counter = 0;
   \   000001CC   0x2000             MOVS     R0,#+0
   \   000001CE   0x9000             STR      R0,[SP, #+0]
    592              do
    593              {
    594                busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
   \                     ??CRYP_AES_CTR_9: (+1)
   \   000001D0   0x2010             MOVS     R0,#+16
   \   000001D2   0x.... 0x....      BL       CRYP_GetFlagStatus
   \   000001D6   0x0005             MOVS     R5,R0
    595                counter++;
   \   000001D8   0x9800             LDR      R0,[SP, #+0]
   \   000001DA   0x1C40             ADDS     R0,R0,#+1
   \   000001DC   0x9000             STR      R0,[SP, #+0]
    596              }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
   \   000001DE   0x9800             LDR      R0,[SP, #+0]
   \   000001E0   0xF5B0 0x3F80      CMP      R0,#+65536
   \   000001E4   0xD001             BEQ.N    ??CRYP_AES_CTR_10
   \   000001E6   0x2D00             CMP      R5,#+0
   \   000001E8   0xD1F2             BNE.N    ??CRYP_AES_CTR_9
    597          
    598              if (busystatus != RESET)
   \                     ??CRYP_AES_CTR_10: (+1)
   \   000001EA   0x2D00             CMP      R5,#+0
   \   000001EC   0xD002             BEQ.N    ??CRYP_AES_CTR_11
    599             {
    600                 status = ERROR;
   \   000001EE   0x2000             MOVS     R0,#+0
   \   000001F0   0x0006             MOVS     R6,R0
   \   000001F2   0xE00F             B.N      ??CRYP_AES_CTR_12
    601              }
    602              else
    603              {
    604          
    605                /* Read the Output block from the Output FIFO */
    606                *(uint32_t*)(outputaddr) = CRYP_DataOut();
   \                     ??CRYP_AES_CTR_11: (+1)
   \   000001F4   0x.... 0x....      BL       CRYP_DataOut
   \   000001F8   0x6038             STR      R0,[R7, #+0]
    607                outputaddr+=4;
   \   000001FA   0x1D3F             ADDS     R7,R7,#+4
    608                *(uint32_t*)(outputaddr) = CRYP_DataOut();
   \   000001FC   0x.... 0x....      BL       CRYP_DataOut
   \   00000200   0x6038             STR      R0,[R7, #+0]
    609                outputaddr+=4;
   \   00000202   0x1D3F             ADDS     R7,R7,#+4
    610                *(uint32_t*)(outputaddr) = CRYP_DataOut();
   \   00000204   0x.... 0x....      BL       CRYP_DataOut
   \   00000208   0x6038             STR      R0,[R7, #+0]
    611                outputaddr+=4;
   \   0000020A   0x1D3F             ADDS     R7,R7,#+4
    612                *(uint32_t*)(outputaddr) = CRYP_DataOut();
   \   0000020C   0x.... 0x....      BL       CRYP_DataOut
   \   00000210   0x6038             STR      R0,[R7, #+0]
    613                outputaddr+=4;
   \   00000212   0x1D3F             ADDS     R7,R7,#+4
    614              }
    615            }
   \                     ??CRYP_AES_CTR_12: (+1)
   \   00000214   0xF118 0x0810      ADDS     R8,R8,#+16
   \   00000218   0xE7BB             B.N      ??CRYP_AES_CTR_7
    616            /* Disable Crypto */
    617            CRYP_Cmd(DISABLE);
   \                     ??CRYP_AES_CTR_8: (+1)
   \   0000021A   0x2000             MOVS     R0,#+0
   \   0000021C   0x.... 0x....      BL       CRYP_Cmd
    618          
    619            return status;
   \   00000220   0x0030             MOVS     R0,R6
   \   00000222   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000224   0xB013             ADD      SP,SP,#+76
   \   00000226   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    620          }
    621          /**
    622            * @}
    623            */ 
    624          
    625          /**
    626            * @}
    627            */ 
    628          
    629          /**
    630            * @}
    631            */ 
    632          
    633          /**
    634            * @}
    635            */ 
    636          
    637          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/
    638          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     112   CRYP_AES_CBC
       112   -> CRYP_Cmd
       112   -> CRYP_DataIn
       112   -> CRYP_DataOut
       112   -> CRYP_FIFOFlush
       112   -> CRYP_GetFlagStatus
       112   -> CRYP_IVInit
       112   -> CRYP_Init
       112   -> CRYP_KeyInit
       112   -> CRYP_KeyStructInit
     112   CRYP_AES_CTR
       112   -> CRYP_Cmd
       112   -> CRYP_DataIn
       112   -> CRYP_DataOut
       112   -> CRYP_FIFOFlush
       112   -> CRYP_GetFlagStatus
       112   -> CRYP_IVInit
       112   -> CRYP_Init
       112   -> CRYP_KeyInit
       112   -> CRYP_KeyStructInit
      96   CRYP_AES_ECB
        96   -> CRYP_Cmd
        96   -> CRYP_DataIn
        96   -> CRYP_DataOut
        96   -> CRYP_FIFOFlush
        96   -> CRYP_GetFlagStatus
        96   -> CRYP_Init
        96   -> CRYP_KeyInit
        96   -> CRYP_KeyStructInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     630  CRYP_AES_CBC
     554  CRYP_AES_CTR
     594  CRYP_AES_ECB

 
 1 778 bytes in section .text
 
 1 778 bytes of CODE memory

Errors: none
Warnings: none
