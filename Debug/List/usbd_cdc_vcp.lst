###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       11/May/2016  11:13:06
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\IAR Workspace\STM32F407\VCP_ESP\usb_lib\cdc\usbd_cdc_vcp.c
#    Command line =  
#        "D:\IAR Workspace\STM32F407\VCP_ESP\usb_lib\cdc\usbd_cdc_vcp.c" -D
#        USE_STDPERIPH_DRIVER -D STM32F4XX -D USE_FULL_ASSERT -lCN "D:\IAR
#        Workspace\STM32F407\VCP_ESP\Debug\List" -o "D:\IAR
#        Workspace\STM32F407\VCP_ESP\Debug\Obj" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\"
#        -I "D:\IAR Workspace\STM32F407\VCP_ESP\..\Libraries\CMSIS\Include\" -I
#        "D:\IAR Workspace\STM32F407\VCP_ESP\..\Utilities\STM32F4-Discovery\"
#        -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\..\Libraries\CMSIS\ST\STM32F4xx\Include\"
#        -I "D:\IAR Workspace\STM32F407\VCP_ESP\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_conf\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\cdc\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\otg\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\core\" -On --use_c++_inline -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        D:\IAR Workspace\STM32F407\VCP_ESP\Debug\List\usbd_cdc_vcp.lst
#    Object file  =  
#        D:\IAR Workspace\STM32F407\VCP_ESP\Debug\Obj\usbd_cdc_vcp.o
#
###############################################################################

D:\IAR Workspace\STM32F407\VCP_ESP\usb_lib\cdc\usbd_cdc_vcp.c
      1          /**
      2           ******************************************************************************
      3           * @file    usbd_cdc_vcp.c
      4           * @author  MCD Application Team
      5           * @version V1.0.0
      6           * @date    22-July-2011
      7           * @brief   Generic media access Layer.
      8           ******************************************************************************
      9           * @attention
     10           *
     11           * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12           * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13           * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14           * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15           * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16           * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17           *
     18           * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19           ******************************************************************************
     20           */
     21          
     22          #ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED 
     23          #pragma     data_alignment = 4 
     24          #endif /* USB_OTG_HS_INTERNAL_DMA_ENABLED */
     25          
     26          /* Includes ------------------------------------------------------------------*/
     27          #include "usbd_cdc_vcp.h"
     28          #include "stm32f4xx_conf.h"
     29          #include "stm32f4xx_usart.h"
     30          
     31          /* Private variables ---------------------------------------------------------*/

   \                                 In section .data, align 4
     32          LINE_CODING linecoding = {
   \                     linecoding:
   \   00000000   0x00009600         DC32 38400
   \   00000004   0x00 0x00          DC8 0, 0, 8, 0
   \              0x08 0x00    
     33          		38400, /* baud rate*/
     34          		0x00, /* stop bits-1*/
     35          		0x00, /* parity - none*/
     36          		0x08 /* nb. of bits 8*/
     37          };
     38          

   \                                 In section .bss, align 4
     39          USART_InitTypeDef USART_InitStructure;
   \                     USART_InitStructure:
   \   00000000                      DS8 16
     40          
     41          /* These are external variables imported from CDC core to be used for IN 
     42           transfer management. */
     43          extern uint8_t APP_Rx_Buffer[]; /* Write CDC received data in this buffer.
     44           These data will be sent over USB IN endpoint
     45           in the CDC core functions. */
     46          extern uint32_t APP_Rx_ptr_in; /* Increment this pointer or roll it back to
     47           start address when writing received data
     48           in the buffer APP_Rx_Buffer. */
     49          
     50          /* Private function prototypes -----------------------------------------------*/
     51          static uint16_t VCP_Init(void);
     52          static uint16_t VCP_DeInit(void);
     53          static uint16_t VCP_Ctrl(uint32_t Cmd, uint8_t* Buf, uint32_t Len);
     54          static uint16_t VCP_DataTx(uint8_t* Buf, uint32_t Len);
     55          static uint16_t VCP_DataRx(uint8_t* Buf, uint32_t Len);
     56          

   \                                 In section .data, align 4
     57          CDC_IF_Prop_TypeDef VCP_fops = { VCP_Init, VCP_DeInit, VCP_Ctrl, VCP_DataTx,
   \                     VCP_fops:
   \   00000000   0x........         DC32 VCP_Init, VCP_DeInit, VCP_Ctrl, VCP_DataTx, VCP_DataRx
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
     58          		VCP_DataRx };
     59          
     60          /* Private functions ---------------------------------------------------------*/
     61          /**
     62           * @brief  VCP_Init
     63           *         Initializes the Media on the STM32
     64           * @param  None
     65           * @retval Result of the opeartion (USBD_OK in all cases)
     66           */

   \                                 In section .text, align 2, keep-with-next
     67          static uint16_t VCP_Init(void) {
     68          	return USBD_OK;
   \                     VCP_Init: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
     69          }
     70          
     71          /**
     72           * @brief  VCP_DeInit
     73           *         DeInitializes the Media on the STM32
     74           * @param  None
     75           * @retval Result of the opeartion (USBD_OK in all cases)
     76           */

   \                                 In section .text, align 2, keep-with-next
     77          static uint16_t VCP_DeInit(void) {
     78          	return USBD_OK;
   \                     VCP_DeInit: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
     79          }
     80          
     81          /**
     82           * @brief  VCP_Ctrl
     83           *         Manage the CDC class requests
     84           * @param  Cmd: Command code
     85           * @param  Buf: Buffer containing command data (request parameters)
     86           * @param  Len: Number of data to be sent (in bytes)
     87           * @retval Result of the opeartion (USBD_OK in all cases)
     88           */

   \                                 In section .text, align 2, keep-with-next
     89          static uint16_t VCP_Ctrl(uint32_t Cmd, uint8_t* Buf, uint32_t Len) {
   \                     VCP_Ctrl: (+1)
   \   00000000   0x0003             MOVS     R3,R0
     90          	switch (Cmd) {
   \   00000002   0x0018             MOVS     R0,R3
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD010             BEQ.N    ??VCP_Ctrl_0
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD00F             BEQ.N    ??VCP_Ctrl_1
   \   0000000C   0x2802             CMP      R0,#+2
   \   0000000E   0xD00E             BEQ.N    ??VCP_Ctrl_2
   \   00000010   0x2803             CMP      R0,#+3
   \   00000012   0xD00D             BEQ.N    ??VCP_Ctrl_3
   \   00000014   0x2804             CMP      R0,#+4
   \   00000016   0xD00C             BEQ.N    ??VCP_Ctrl_4
   \   00000018   0x2820             CMP      R0,#+32
   \   0000001A   0xD00B             BEQ.N    ??VCP_Ctrl_5
   \   0000001C   0x2821             CMP      R0,#+33
   \   0000001E   0xD00A             BEQ.N    ??VCP_Ctrl_6
   \   00000020   0x2822             CMP      R0,#+34
   \   00000022   0xD021             BEQ.N    ??VCP_Ctrl_7
   \   00000024   0x2823             CMP      R0,#+35
   \   00000026   0xD020             BEQ.N    ??VCP_Ctrl_8
   \   00000028   0xE020             B.N      ??VCP_Ctrl_9
     91          	case SEND_ENCAPSULATED_COMMAND:
     92          		/* Not  needed for this driver */
     93          		break;
   \                     ??VCP_Ctrl_0: (+1)
   \   0000002A   0xE01F             B.N      ??VCP_Ctrl_10
     94          
     95          	case GET_ENCAPSULATED_RESPONSE:
     96          		/* Not  needed for this driver */
     97          		break;
   \                     ??VCP_Ctrl_1: (+1)
   \   0000002C   0xE01E             B.N      ??VCP_Ctrl_10
     98          
     99          	case SET_COMM_FEATURE:
    100          		/* Not  needed for this driver */
    101          		break;
   \                     ??VCP_Ctrl_2: (+1)
   \   0000002E   0xE01D             B.N      ??VCP_Ctrl_10
    102          
    103          	case GET_COMM_FEATURE:
    104          		/* Not  needed for this driver */
    105          		break;
   \                     ??VCP_Ctrl_3: (+1)
   \   00000030   0xE01C             B.N      ??VCP_Ctrl_10
    106          
    107          	case CLEAR_COMM_FEATURE:
    108          		/* Not  needed for this driver */
    109          		break;
   \                     ??VCP_Ctrl_4: (+1)
   \   00000032   0xE01B             B.N      ??VCP_Ctrl_10
    110          
    111          	case SET_LINE_CODING:
    112          		/* Not  needed for this driver */
    113          		break;
   \                     ??VCP_Ctrl_5: (+1)
   \   00000034   0xE01A             B.N      ??VCP_Ctrl_10
    114          
    115          	case GET_LINE_CODING:
    116          		Buf[0] = (uint8_t) (linecoding.bitrate);
   \                     ??VCP_Ctrl_6: (+1)
   \   00000036   0x....             LDR.N    R0,??DataTable4
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x7008             STRB     R0,[R1, #+0]
    117          		Buf[1] = (uint8_t) (linecoding.bitrate >> 8);
   \   0000003C   0x....             LDR.N    R0,??DataTable4
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x0A00             LSRS     R0,R0,#+8
   \   00000042   0x7048             STRB     R0,[R1, #+1]
    118          		Buf[2] = (uint8_t) (linecoding.bitrate >> 16);
   \   00000044   0x....             LDR.N    R0,??DataTable4
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0x0C00             LSRS     R0,R0,#+16
   \   0000004A   0x7088             STRB     R0,[R1, #+2]
    119          		Buf[3] = (uint8_t) (linecoding.bitrate >> 24);
   \   0000004C   0x....             LDR.N    R0,??DataTable4
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0x0E00             LSRS     R0,R0,#+24
   \   00000052   0x70C8             STRB     R0,[R1, #+3]
    120          		Buf[4] = linecoding.format;
   \   00000054   0x....             LDR.N    R0,??DataTable4
   \   00000056   0x7900             LDRB     R0,[R0, #+4]
   \   00000058   0x7108             STRB     R0,[R1, #+4]
    121          		Buf[5] = linecoding.paritytype;
   \   0000005A   0x....             LDR.N    R0,??DataTable4
   \   0000005C   0x7940             LDRB     R0,[R0, #+5]
   \   0000005E   0x7148             STRB     R0,[R1, #+5]
    122          		Buf[6] = linecoding.datatype;
   \   00000060   0x....             LDR.N    R0,??DataTable4
   \   00000062   0x7980             LDRB     R0,[R0, #+6]
   \   00000064   0x7188             STRB     R0,[R1, #+6]
    123          		break;
   \   00000066   0xE001             B.N      ??VCP_Ctrl_10
    124          
    125          	case SET_CONTROL_LINE_STATE:
    126          		/* Not  needed for this driver */
    127          		break;
   \                     ??VCP_Ctrl_7: (+1)
   \   00000068   0xE000             B.N      ??VCP_Ctrl_10
    128          
    129          	case SEND_BREAK:
    130          		/* Not  needed for this driver */
    131          		break;
   \                     ??VCP_Ctrl_8: (+1)
   \   0000006A   0xE7FF             B.N      ??VCP_Ctrl_10
    132          
    133          	default:
    134          		break;
    135          	}
    136          
    137          	return USBD_OK;
   \                     ??VCP_Ctrl_9: (+1)
   \                     ??VCP_Ctrl_10: (+1)
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x4770             BX       LR               ;; return
    138          }
    139          
    140          /**
    141           * @brief  putchar
    142           *         Sends one char over the USB serial link.
    143           * @param  buf: char to be sent
    144           * @retval none
    145           */
    146          

   \                                 In section .text, align 2, keep-with-next
    147          void VCP_put_char(uint8_t buf) {
   \                     VCP_put_char: (+1)
   \   00000000   0xB501             PUSH     {R0,LR}
    148          	VCP_DataTx(&buf, 1);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x4668             MOV      R0,SP
   \   00000006   0x.... 0x....      BL       VCP_DataTx
    149          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    150          

   \                                 In section .text, align 2, keep-with-next
    151          void VCP_send_str(uint8_t* buf) {
   \                     VCP_send_str: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    152          	uint32_t i = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    153          	while (*(buf + i)) {
   \                     ??VCP_send_str_0: (+1)
   \   00000006   0x5D28             LDRB     R0,[R5, R4]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD001             BEQ.N    ??VCP_send_str_1
    154          		i++;
   \   0000000C   0x1C6D             ADDS     R5,R5,#+1
   \   0000000E   0xE7FA             B.N      ??VCP_send_str_0
    155          	}
    156          	VCP_DataTx(buf, i);
   \                     ??VCP_send_str_1: (+1)
   \   00000010   0x0029             MOVS     R1,R5
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x.... 0x....      BL       VCP_DataTx
    157          }
   \   00000018   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    158          

   \                                 In section .text, align 2, keep-with-next
    159          void VCP_send_buffer(uint8_t* buf, int len) {
   \                     VCP_send_buffer: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    160          	VCP_DataTx(buf, len);
   \   00000006   0x0029             MOVS     R1,R5
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       VCP_DataTx
    161          }
   \   0000000E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    162          
    163          /**
    164           * @brief  VCP_DataTx
    165           *         CDC received data to be send over USB IN endpoint are managed in
    166           *         this function.
    167           * @param  Buf: Buffer of data to be sent
    168           * @param  Len: Number of data to be sent (in bytes)
    169           * @retval Result of the opeartion: USBD_OK if all operations are OK else VCP_FAIL
    170           */

   \                                 In section .text, align 2, keep-with-next
    171          static uint16_t VCP_DataTx(uint8_t* Buf, uint32_t Len) {
   \                     VCP_DataTx: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
   \   00000002   0x0002             MOVS     R2,R0
    172          	uint32_t i = 0;
   \   00000004   0x2300             MOVS     R3,#+0
    173          	while (i < Len) {
   \                     ??VCP_DataTx_0: (+1)
   \   00000006   0x428B             CMP      R3,R1
   \   00000008   0xD213             BCS.N    ??VCP_DataTx_1
    174          		APP_Rx_Buffer[APP_Rx_ptr_in] = *(Buf + i);
   \   0000000A   0x5C98             LDRB     R0,[R3, R2]
   \   0000000C   0x....             LDR.N    R4,??DataTable4_1
   \   0000000E   0x....             LDR.N    R5,??DataTable4_2
   \   00000010   0x682D             LDR      R5,[R5, #+0]
   \   00000012   0x5528             STRB     R0,[R5, R4]
    175          		APP_Rx_ptr_in++;
   \   00000014   0x....             LDR.N    R0,??DataTable4_2
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x1C40             ADDS     R0,R0,#+1
   \   0000001A   0x....             LDR.N    R4,??DataTable4_2
   \   0000001C   0x6020             STR      R0,[R4, #+0]
    176          		i++;
   \   0000001E   0x1C5B             ADDS     R3,R3,#+1
    177          		/* To avoid buffer overflow */
    178          		if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
   \   00000020   0x....             LDR.N    R0,??DataTable4_2
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xF5B0 0x6F00      CMP      R0,#+2048
   \   00000028   0xD1ED             BNE.N    ??VCP_DataTx_0
    179          			APP_Rx_ptr_in = 0;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x....             LDR.N    R4,??DataTable4_2
   \   0000002E   0x6020             STR      R0,[R4, #+0]
   \   00000030   0xE7E9             B.N      ??VCP_DataTx_0
    180          		}
    181          	}
    182          
    183          	return USBD_OK;
   \                     ??VCP_DataTx_1: (+1)
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xBC30             POP      {R4,R5}
   \   00000036   0x4770             BX       LR               ;; return
    184          }
    185          
    186          /**
    187           * @brief  VCP_DataRx
    188           *         Data received over USB OUT endpoint are sent over CDC interface
    189           *         through this function.
    190           *
    191           *         @note
    192           *         This function will block any OUT packet reception on USB endpoint
    193           *         until exiting this function. If you exit this function before transfer
    194           *         is complete on CDC interface (ie. using DMA controller) it will result
    195           *         in receiving more data while previous ones are still not sent.
    196           *
    197           * @param  Buf: Buffer of data to be received
    198           * @param  Len: Number of data received (in bytes)
    199           * @retval Result of the opeartion: USBD_OK if all operations are OK else VCP_FAIL
    200           */
    201          
    202          #define APP_TX_BUF_SIZE 128

   \                                 In section .bss, align 4
    203          uint8_t APP_Tx_Buffer[APP_TX_BUF_SIZE];
   \                     APP_Tx_Buffer:
   \   00000000                      DS8 128

   \                                 In section .bss, align 4
    204          uint32_t APP_tx_ptr_head;
   \                     APP_tx_ptr_head:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    205          uint32_t APP_tx_ptr_tail;
   \                     APP_tx_ptr_tail:
   \   00000000                      DS8 4
    206          

   \                                 In section .text, align 2, keep-with-next
    207          static uint16_t VCP_DataRx(uint8_t* Buf, uint32_t Len) {
   \                     VCP_DataRx: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
   \   00000002   0x0002             MOVS     R2,R0
    208          	uint32_t i;
    209          
    210          	for (i = 0; i < Len; i++) {
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x0003             MOVS     R3,R0
   \                     ??VCP_DataRx_0: (+1)
   \   00000008   0x428B             CMP      R3,R1
   \   0000000A   0xD21A             BCS.N    ??VCP_DataRx_1
    211          		APP_Tx_Buffer[APP_tx_ptr_head] = *(Buf + i);
   \   0000000C   0x5C98             LDRB     R0,[R3, R2]
   \   0000000E   0x....             LDR.N    R4,??DataTable4_3
   \   00000010   0x....             LDR.N    R5,??DataTable4_4
   \   00000012   0x682D             LDR      R5,[R5, #+0]
   \   00000014   0x5528             STRB     R0,[R5, R4]
    212          		APP_tx_ptr_head++;
   \   00000016   0x....             LDR.N    R0,??DataTable4_4
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \   0000001C   0x....             LDR.N    R4,??DataTable4_4
   \   0000001E   0x6020             STR      R0,[R4, #+0]
    213          		if (APP_tx_ptr_head == APP_TX_BUF_SIZE)
   \   00000020   0x....             LDR.N    R0,??DataTable4_4
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x2880             CMP      R0,#+128
   \   00000026   0xD102             BNE.N    ??VCP_DataRx_2
    214          			APP_tx_ptr_head = 0;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x....             LDR.N    R4,??DataTable4_4
   \   0000002C   0x6020             STR      R0,[R4, #+0]
    215          
    216          		if (APP_tx_ptr_head == APP_tx_ptr_tail)
   \                     ??VCP_DataRx_2: (+1)
   \   0000002E   0x....             LDR.N    R0,??DataTable4_4
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x....             LDR.N    R4,??DataTable4_5
   \   00000034   0x6824             LDR      R4,[R4, #+0]
   \   00000036   0x42A0             CMP      R0,R4
   \   00000038   0xD101             BNE.N    ??VCP_DataRx_3
    217          			return USBD_FAIL;
   \   0000003A   0x2002             MOVS     R0,#+2
   \   0000003C   0xE002             B.N      ??VCP_DataRx_4
    218          	}
   \                     ??VCP_DataRx_3: (+1)
   \   0000003E   0x1C5B             ADDS     R3,R3,#+1
   \   00000040   0xE7E2             B.N      ??VCP_DataRx_0
    219          
    220          	return USBD_OK;
   \                     ??VCP_DataRx_1: (+1)
   \   00000042   0x2000             MOVS     R0,#+0
   \                     ??VCP_DataRx_4: (+1)
   \   00000044   0xBC30             POP      {R4,R5}
   \   00000046   0x4770             BX       LR               ;; return
    221          }
    222          

   \                                 In section .text, align 2, keep-with-next
    223          int VCP_get_char(uint8_t *buf) {
   \                     VCP_get_char: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    224          	if (APP_tx_ptr_head == APP_tx_ptr_tail)
   \   00000002   0x....             LDR.N    R0,??DataTable4_4
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x....             LDR.N    R2,??DataTable4_5
   \   00000008   0x6812             LDR      R2,[R2, #+0]
   \   0000000A   0x4290             CMP      R0,R2
   \   0000000C   0xD101             BNE.N    ??VCP_get_char_0
    225          		return 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xE011             B.N      ??VCP_get_char_1
    226          
    227          	*buf = APP_Tx_Buffer[APP_tx_ptr_tail];
   \                     ??VCP_get_char_0: (+1)
   \   00000012   0x....             LDR.N    R0,??DataTable4_3
   \   00000014   0x....             LDR.N    R2,??DataTable4_5
   \   00000016   0x6812             LDR      R2,[R2, #+0]
   \   00000018   0x5C10             LDRB     R0,[R2, R0]
   \   0000001A   0x7008             STRB     R0,[R1, #+0]
    228          	APP_tx_ptr_tail++;
   \   0000001C   0x....             LDR.N    R0,??DataTable4_5
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x1C40             ADDS     R0,R0,#+1
   \   00000022   0x....             LDR.N    R2,??DataTable4_5
   \   00000024   0x6010             STR      R0,[R2, #+0]
    229          	if (APP_tx_ptr_tail == APP_TX_BUF_SIZE)
   \   00000026   0x....             LDR.N    R0,??DataTable4_5
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0x2880             CMP      R0,#+128
   \   0000002C   0xD102             BNE.N    ??VCP_get_char_2
    230          		APP_tx_ptr_tail = 0;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x....             LDR.N    R2,??DataTable4_5
   \   00000032   0x6010             STR      R0,[R2, #+0]
    231          
    232          	return 1;
   \                     ??VCP_get_char_2: (+1)
   \   00000034   0x2001             MOVS     R0,#+1
   \                     ??VCP_get_char_1: (+1)
   \   00000036   0x4770             BX       LR               ;; return
    233          }
    234          

   \                                 In section .text, align 2, keep-with-next
    235          int VCP_get_string(uint8_t *buf) {
   \                     VCP_get_string: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    236          	if (APP_tx_ptr_head == APP_tx_ptr_tail)
   \   00000002   0x....             LDR.N    R0,??DataTable4_4
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x....             LDR.N    R2,??DataTable4_5
   \   00000008   0x6812             LDR      R2,[R2, #+0]
   \   0000000A   0x4290             CMP      R0,R2
   \   0000000C   0xD101             BNE.N    ??VCP_get_string_0
    237          		return 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xE065             B.N      ??VCP_get_string_1
    238          
    239          	while (!APP_Tx_Buffer[APP_tx_ptr_tail]
    240          			|| APP_Tx_Buffer[APP_tx_ptr_tail] == '\n'
    241          			|| APP_Tx_Buffer[APP_tx_ptr_tail] == '\r') {
   \                     ??VCP_get_string_0: (+1)
   \   00000012   0x....             LDR.N    R0,??DataTable4_3
   \   00000014   0x....             LDR.N    R2,??DataTable4_5
   \   00000016   0x6812             LDR      R2,[R2, #+0]
   \   00000018   0x5C10             LDRB     R0,[R2, R0]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD00B             BEQ.N    ??VCP_get_string_2
   \   0000001E   0x....             LDR.N    R0,??DataTable4_3
   \   00000020   0x....             LDR.N    R2,??DataTable4_5
   \   00000022   0x6812             LDR      R2,[R2, #+0]
   \   00000024   0x5C10             LDRB     R0,[R2, R0]
   \   00000026   0x280A             CMP      R0,#+10
   \   00000028   0xD005             BEQ.N    ??VCP_get_string_2
   \   0000002A   0x....             LDR.N    R0,??DataTable4_3
   \   0000002C   0x....             LDR.N    R2,??DataTable4_5
   \   0000002E   0x6812             LDR      R2,[R2, #+0]
   \   00000030   0x5C10             LDRB     R0,[R2, R0]
   \   00000032   0x280D             CMP      R0,#+13
   \   00000034   0xD113             BNE.N    ??VCP_get_string_3
    242          		APP_tx_ptr_tail++;
   \                     ??VCP_get_string_2: (+1)
   \   00000036   0x....             LDR.N    R0,??DataTable4_5
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x1C40             ADDS     R0,R0,#+1
   \   0000003C   0x....             LDR.N    R2,??DataTable4_5
   \   0000003E   0x6010             STR      R0,[R2, #+0]
    243          		if (APP_tx_ptr_tail == APP_TX_BUF_SIZE)
   \   00000040   0x....             LDR.N    R0,??DataTable4_5
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0x2880             CMP      R0,#+128
   \   00000046   0xD102             BNE.N    ??VCP_get_string_4
    244          			APP_tx_ptr_tail = 0;
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x....             LDR.N    R2,??DataTable4_5
   \   0000004C   0x6010             STR      R0,[R2, #+0]
    245          		if (APP_tx_ptr_head == APP_tx_ptr_tail)
   \                     ??VCP_get_string_4: (+1)
   \   0000004E   0x....             LDR.N    R0,??DataTable4_4
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0x....             LDR.N    R2,??DataTable4_5
   \   00000054   0x6812             LDR      R2,[R2, #+0]
   \   00000056   0x4290             CMP      R0,R2
   \   00000058   0xD1DB             BNE.N    ??VCP_get_string_0
    246          			return 0;
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0xE03F             B.N      ??VCP_get_string_1
    247          	}
    248          
    249          	int i = 0;
   \                     ??VCP_get_string_3: (+1)
   \   0000005E   0x2200             MOVS     R2,#+0
    250          	do {
    251          		*(buf + i) = APP_Tx_Buffer[i + APP_tx_ptr_tail];
   \                     ??VCP_get_string_5: (+1)
   \   00000060   0x....             LDR.N    R0,??DataTable4_3
   \   00000062   0x....             LDR.N    R3,??DataTable4_5
   \   00000064   0x681B             LDR      R3,[R3, #+0]
   \   00000066   0x189B             ADDS     R3,R3,R2
   \   00000068   0x5C18             LDRB     R0,[R3, R0]
   \   0000006A   0x5450             STRB     R0,[R2, R1]
    252          		i++;
   \   0000006C   0x1C52             ADDS     R2,R2,#+1
    253          
    254          		if ((APP_tx_ptr_tail + i) == APP_TX_BUF_SIZE)
   \   0000006E   0x....             LDR.N    R0,??DataTable4_5
   \   00000070   0x6800             LDR      R0,[R0, #+0]
   \   00000072   0x1810             ADDS     R0,R2,R0
   \   00000074   0x2880             CMP      R0,#+128
   \   00000076   0xD103             BNE.N    ??VCP_get_string_6
    255          			i = -APP_tx_ptr_tail;
   \   00000078   0x....             LDR.N    R0,??DataTable4_5
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0x4240             RSBS     R0,R0,#+0
   \   0000007E   0x0002             MOVS     R2,R0
    256          		if (APP_tx_ptr_head == (APP_tx_ptr_tail + i))
   \                     ??VCP_get_string_6: (+1)
   \   00000080   0x....             LDR.N    R0,??DataTable4_4
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0x....             LDR.N    R3,??DataTable4_5
   \   00000086   0x681B             LDR      R3,[R3, #+0]
   \   00000088   0x18D3             ADDS     R3,R2,R3
   \   0000008A   0x4298             CMP      R0,R3
   \   0000008C   0xD101             BNE.N    ??VCP_get_string_7
    257          			return 0;
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0xE025             B.N      ??VCP_get_string_1
    258          
    259          	} while (APP_Tx_Buffer[APP_tx_ptr_tail + i]
    260          			&& APP_Tx_Buffer[APP_tx_ptr_tail + i] != '\n'
    261          			&& APP_Tx_Buffer[APP_tx_ptr_tail + i] != '\r');
   \                     ??VCP_get_string_7: (+1)
   \   00000092   0x....             LDR.N    R0,??DataTable4_3
   \   00000094   0x....             LDR.N    R3,??DataTable4_5
   \   00000096   0x681B             LDR      R3,[R3, #+0]
   \   00000098   0x18D3             ADDS     R3,R2,R3
   \   0000009A   0x5C18             LDRB     R0,[R3, R0]
   \   0000009C   0x2800             CMP      R0,#+0
   \   0000009E   0xD00D             BEQ.N    ??VCP_get_string_8
   \   000000A0   0x....             LDR.N    R0,??DataTable4_3
   \   000000A2   0x....             LDR.N    R3,??DataTable4_5
   \   000000A4   0x681B             LDR      R3,[R3, #+0]
   \   000000A6   0x18D3             ADDS     R3,R2,R3
   \   000000A8   0x5C18             LDRB     R0,[R3, R0]
   \   000000AA   0x280A             CMP      R0,#+10
   \   000000AC   0xD006             BEQ.N    ??VCP_get_string_8
   \   000000AE   0x....             LDR.N    R0,??DataTable4_3
   \   000000B0   0x....             LDR.N    R3,??DataTable4_5
   \   000000B2   0x681B             LDR      R3,[R3, #+0]
   \   000000B4   0x18D3             ADDS     R3,R2,R3
   \   000000B6   0x5C18             LDRB     R0,[R3, R0]
   \   000000B8   0x280D             CMP      R0,#+13
   \   000000BA   0xD1D1             BNE.N    ??VCP_get_string_5
    262          
    263          	*(buf + i) = 0;
   \                     ??VCP_get_string_8: (+1)
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0x5450             STRB     R0,[R2, R1]
    264          	APP_tx_ptr_tail += i;
   \   000000C0   0x....             LDR.N    R0,??DataTable4_5
   \   000000C2   0x6800             LDR      R0,[R0, #+0]
   \   000000C4   0x1810             ADDS     R0,R2,R0
   \   000000C6   0x....             LDR.N    R3,??DataTable4_5
   \   000000C8   0x6018             STR      R0,[R3, #+0]
    265          	if (APP_tx_ptr_tail >= APP_TX_BUF_SIZE)
   \   000000CA   0x....             LDR.N    R0,??DataTable4_5
   \   000000CC   0x6800             LDR      R0,[R0, #+0]
   \   000000CE   0x2880             CMP      R0,#+128
   \   000000D0   0xD304             BCC.N    ??VCP_get_string_9
    266          		APP_tx_ptr_tail -= APP_TX_BUF_SIZE;
   \   000000D2   0x....             LDR.N    R0,??DataTable4_5
   \   000000D4   0x6800             LDR      R0,[R0, #+0]
   \   000000D6   0x3880             SUBS     R0,R0,#+128
   \   000000D8   0x....             LDR.N    R3,??DataTable4_5
   \   000000DA   0x6018             STR      R0,[R3, #+0]
    267          	return i;
   \                     ??VCP_get_string_9: (+1)
   \   000000DC   0x0010             MOVS     R0,R2
   \                     ??VCP_get_string_1: (+1)
   \   000000DE   0x4770             BX       LR               ;; return
    268          }
    269          
    270          /**
    271           * @brief  EVAL_COM_IRQHandler
    272           *
    273           * @param  None.
    274           * @retval None.
    275           */

   \                                 In section .text, align 2, keep-with-next
    276          void EVAL_COM_IRQHandler(void) {
    277          
    278          }
   \                     EVAL_COM_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     linecoding

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     APP_Rx_Buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     APP_Rx_ptr_in

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     APP_Tx_Buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     APP_tx_ptr_head

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     APP_tx_ptr_tail
    279          
    280          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   EVAL_COM_IRQHandler
       0   VCP_Ctrl
       8   VCP_DataRx
       8   VCP_DataTx
       0   VCP_DeInit
       0   VCP_Init
       0   VCP_get_char
       0   VCP_get_string
       8   VCP_put_char
         8   -> VCP_DataTx
      16   VCP_send_buffer
        16   -> VCP_DataTx
      16   VCP_send_str
        16   -> VCP_DataTx


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
     128  APP_Tx_Buffer
       4  APP_tx_ptr_head
       4  APP_tx_ptr_tail
       2  EVAL_COM_IRQHandler
      16  USART_InitStructure
     112  VCP_Ctrl
      72  VCP_DataRx
      56  VCP_DataTx
       4  VCP_DeInit
       4  VCP_Init
      20  VCP_fops
      56  VCP_get_char
     224  VCP_get_string
      12  VCP_put_char
      16  VCP_send_buffer
      26  VCP_send_str
       8  linecoding

 
 152 bytes in section .bss
  28 bytes in section .data
 608 bytes in section .text
 
 608 bytes of CODE memory
 180 bytes of DATA memory

Errors: none
Warnings: 1
