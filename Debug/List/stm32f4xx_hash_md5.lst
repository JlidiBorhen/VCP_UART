###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       06/May/2016  23:31:33
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\IAR
#        Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_hash_md5.c
#    Command line =  
#        "D:\IAR
#        Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_hash_md5.c"
#        -D USE_STDPERIPH_DRIVER -D STM32F4XX -D USE_FULL_ASSERT -lCN "D:\IAR
#        Workspace\STM32F407\VCP_ESP\Debug\List" -o "D:\IAR
#        Workspace\STM32F407\VCP_ESP\Debug\Obj" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\"
#        -I "D:\IAR Workspace\STM32F407\VCP_ESP\..\Libraries\CMSIS\Include\" -I
#        "D:\IAR Workspace\STM32F407\VCP_ESP\..\Utilities\STM32F4-Discovery\"
#        -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\..\Libraries\CMSIS\ST\STM32F4xx\Include\"
#        -I "D:\IAR Workspace\STM32F407\VCP_ESP\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_conf\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\cdc\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\otg\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\core\" -On --use_c++_inline -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        D:\IAR Workspace\STM32F407\VCP_ESP\Debug\List\stm32f4xx_hash_md5.lst
#    Object file  =  
#        D:\IAR Workspace\STM32F407\VCP_ESP\Debug\Obj\stm32f4xx_hash_md5.o
#
###############################################################################

D:\IAR Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_hash_md5.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f4xx_hash_md5.c
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    30-September-2011
      7            * @brief   This file provides high level functions to compute the HASH MD5 and
      8            *          HMAC MD5 Digest of an input message.
      9            *          It uses the stm32f4xx_hash.c/.h drivers to access the STM32F4xx HASH
     10            *          peripheral.
     11            *
     12            *  @verbatim
     13            *    
     14            *          ===================================================================
     15            *                                   How to use this driver
     16            *          ===================================================================
     17            *          1. Enable The HASH controller clock using 
     18            *            RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_HASH, ENABLE); function.
     19            *
     20            *          2. Calculate the HASH MD5 Digest using HASH_MD5() function.
     21            *
     22            *          3. Calculate the HMAC MD5 Digest using HMAC_MD5() function.
     23            *
     24            *  @endverbatim
     25            *
     26            ******************************************************************************
     27            * @attention
     28            *
     29            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     30            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     31            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     32            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     33            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     34            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     35            *
     36            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     37            ******************************************************************************
     38            */
     39          
     40          /* Includes ------------------------------------------------------------------*/
     41          #include "stm32f4xx_hash.h"
     42          
     43          /** @addtogroup STM32F4xx_StdPeriph_Driver
     44            * @{
     45            */
     46          
     47          /** @defgroup HASH 
     48            * @brief HASH driver modules
     49            * @{
     50            */
     51          
     52          /* Private typedef -----------------------------------------------------------*/
     53          /* Private define ------------------------------------------------------------*/
     54          #define MD5BUSY_TIMEOUT    ((uint32_t) 0x00010000)
     55          
     56          /* Private macro -------------------------------------------------------------*/
     57          /* Private variables ---------------------------------------------------------*/
     58          /* Private function prototypes -----------------------------------------------*/
     59          /* Private functions ---------------------------------------------------------*/
     60          
     61          /** @defgroup HASH_Private_Functions
     62            * @{
     63            */ 
     64          
     65          /** @defgroup HASH_Group7 High Level MD5 functions
     66           *  @brief   High Level MD5 Hash and HMAC functions 
     67           *
     68          @verbatim   
     69           ===============================================================================
     70                                    High Level MD5 Hash and HMAC functions
     71           ===============================================================================
     72          
     73          
     74          @endverbatim
     75            * @{
     76            */
     77          
     78          /**
     79            * @brief  Compute the HASH MD5 digest.
     80            * @param  Input: pointer to the Input buffer to be treated.
     81            * @param  Ilen: length of the Input buffer.
     82            * @param  Output: the returned digest
     83            * @retval An ErrorStatus enumeration value:
     84            *          - SUCCESS: digest computation done
     85            *          - ERROR: digest computation failed
     86            */

   \                                 In section .text, align 2, keep-with-next
     87          ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
     88          {
   \                     HASH_MD5: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB08B             SUB      SP,SP,#+44
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
     89            HASH_InitTypeDef MD5_HASH_InitStructure;
     90            HASH_MsgDigest MD5_MessageDigest;
     91            __IO uint16_t nbvalidbitsdata = 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     92            uint32_t i = 0;
   \   00000012   0xF05F 0x0B00      MOVS     R11,#+0
     93            __IO uint32_t counter = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x9000             STR      R0,[SP, #+0]
     94            uint32_t busystatus = 0;
   \   0000001A   0x2700             MOVS     R7,#+0
     95            ErrorStatus status = SUCCESS;
   \   0000001C   0xF05F 0x0801      MOVS     R8,#+1
     96            uint32_t inputaddr  = (uint32_t)Input;
   \   00000020   0x46A2             MOV      R10,R4
     97            uint32_t outputaddr = (uint32_t)Output;
   \   00000022   0x46B1             MOV      R9,R6
     98          
     99          
    100            /* Number of valid bits in last word of the Input data */
    101            nbvalidbitsdata = 8 * (Ilen % 4);
   \   00000024   0x2004             MOVS     R0,#+4
   \   00000026   0xFBB5 0xF1F0      UDIV     R1,R5,R0
   \   0000002A   0xFB01 0x5110      MLS      R1,R1,R0,R5
   \   0000002E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000030   0x00C8             LSLS     R0,R1,#+3
   \   00000032   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    102          
    103            /* HASH peripheral initialization */
    104            HASH_DeInit();
   \   00000036   0x.... 0x....      BL       HASH_DeInit
    105          
    106            /* HASH Configuration */
    107            MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
   \   0000003A   0x2080             MOVS     R0,#+128
   \   0000003C   0x9007             STR      R0,[SP, #+28]
    108            MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x9008             STR      R0,[SP, #+32]
    109            MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
   \   00000042   0x2020             MOVS     R0,#+32
   \   00000044   0x9009             STR      R0,[SP, #+36]
    110            HASH_Init(&MD5_HASH_InitStructure);
   \   00000046   0xA807             ADD      R0,SP,#+28
   \   00000048   0x.... 0x....      BL       HASH_Init
    111          
    112            /* Configure the number of valid bits in last word of the data */
    113            HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
   \   0000004C   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000050   0x.... 0x....      BL       HASH_SetLastWordValidBitsNbr
    114          
    115            /* Write the Input block in the IN FIFO */
    116            for(i=0; i<Ilen; i+=4)
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x4683             MOV      R11,R0
   \                     ??HASH_MD5_0: (+1)
   \   00000058   0x45AB             CMP      R11,R5
   \   0000005A   0xD208             BCS.N    ??HASH_MD5_1
    117            {
    118              HASH_DataIn(*(uint32_t*)inputaddr);
   \   0000005C   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   00000060   0x.... 0x....      BL       HASH_DataIn
    119              inputaddr+=4;
   \   00000064   0xF11A 0x0A04      ADDS     R10,R10,#+4
    120            }
   \   00000068   0xF11B 0x0B04      ADDS     R11,R11,#+4
   \   0000006C   0xE7F4             B.N      ??HASH_MD5_0
    121          
    122            /* Start the HASH processor */
    123            HASH_StartDigest();
   \                     ??HASH_MD5_1: (+1)
   \   0000006E   0x.... 0x....      BL       HASH_StartDigest
    124          
    125            /* wait until the Busy flag is RESET */
    126            do
    127            {
    128              busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
   \                     ??HASH_MD5_2: (+1)
   \   00000072   0x2008             MOVS     R0,#+8
   \   00000074   0x.... 0x....      BL       HASH_GetFlagStatus
   \   00000078   0x0007             MOVS     R7,R0
    129              counter++;
   \   0000007A   0x9800             LDR      R0,[SP, #+0]
   \   0000007C   0x1C40             ADDS     R0,R0,#+1
   \   0000007E   0x9000             STR      R0,[SP, #+0]
    130            }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
   \   00000080   0x9800             LDR      R0,[SP, #+0]
   \   00000082   0xF5B0 0x3F80      CMP      R0,#+65536
   \   00000086   0xD001             BEQ.N    ??HASH_MD5_3
   \   00000088   0x2F00             CMP      R7,#+0
   \   0000008A   0xD1F2             BNE.N    ??HASH_MD5_2
    131          
    132            if (busystatus != RESET)
   \                     ??HASH_MD5_3: (+1)
   \   0000008C   0x2F00             CMP      R7,#+0
   \   0000008E   0xD002             BEQ.N    ??HASH_MD5_4
    133            {
    134               status = ERROR;
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0x4680             MOV      R8,R0
   \   00000094   0xE018             B.N      ??HASH_MD5_5
    135            }
    136            else
    137            {
    138              /* Read the message digest */
    139              HASH_GetDigest(&MD5_MessageDigest);
   \                     ??HASH_MD5_4: (+1)
   \   00000096   0xA802             ADD      R0,SP,#+8
   \   00000098   0x.... 0x....      BL       HASH_GetDigest
    140              *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
   \   0000009C   0x9802             LDR      R0,[SP, #+8]
   \   0000009E   0xBA00             REV      R0,R0
   \   000000A0   0xF8C9 0x0000      STR      R0,[R9, #+0]
    141              outputaddr+=4;
   \   000000A4   0xF119 0x0904      ADDS     R9,R9,#+4
    142              *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
   \   000000A8   0x9803             LDR      R0,[SP, #+12]
   \   000000AA   0xBA00             REV      R0,R0
   \   000000AC   0xF8C9 0x0000      STR      R0,[R9, #+0]
    143              outputaddr+=4;
   \   000000B0   0xF119 0x0904      ADDS     R9,R9,#+4
    144              *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
   \   000000B4   0x9804             LDR      R0,[SP, #+16]
   \   000000B6   0xBA00             REV      R0,R0
   \   000000B8   0xF8C9 0x0000      STR      R0,[R9, #+0]
    145              outputaddr+=4;
   \   000000BC   0xF119 0x0904      ADDS     R9,R9,#+4
    146              *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
   \   000000C0   0x9805             LDR      R0,[SP, #+20]
   \   000000C2   0xBA00             REV      R0,R0
   \   000000C4   0xF8C9 0x0000      STR      R0,[R9, #+0]
    147            }
    148            return status; 
   \                     ??HASH_MD5_5: (+1)
   \   000000C8   0x4640             MOV      R0,R8
   \   000000CA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000CC   0xB00B             ADD      SP,SP,#+44
   \   000000CE   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    149          }
    150          
    151          /**
    152            * @brief  Compute the HMAC MD5 digest.
    153            * @param  Key: pointer to the Key used for HMAC.
    154            * @param  Keylen: length of the Key used for HMAC.
    155            * @param  Input: pointer to the Input buffer to be treated.
    156            * @param  Ilen: length of the Input buffer.
    157            * @param  Output: the returned digest  
    158            * @retval An ErrorStatus enumeration value:
    159            *          - SUCCESS: digest computation done
    160            *          - ERROR: digest computation failed
    161            */

   \                                 In section .text, align 2, keep-with-next
    162          ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
    163                               uint32_t Ilen, uint8_t Output[16])
    164          {
   \                     HMAC_MD5: (+1)
   \   00000000   0xE92D 0x4FF5      PUSH     {R0,R2,R4-R11,LR}
   \   00000004   0xB08B             SUB      SP,SP,#+44
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x001D             MOVS     R5,R3
    165            HASH_InitTypeDef MD5_HASH_InitStructure;
    166            HASH_MsgDigest MD5_MessageDigest;
    167            __IO uint16_t nbvalidbitsdata = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    168            __IO uint16_t nbvalidbitskey = 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    169            uint32_t i = 0;
   \   00000016   0xF05F 0x0B00      MOVS     R11,#+0
    170            __IO uint32_t counter = 0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x9000             STR      R0,[SP, #+0]
    171            uint32_t busystatus = 0;
   \   0000001E   0x2600             MOVS     R6,#+0
    172            ErrorStatus status = SUCCESS;
   \   00000020   0x2701             MOVS     R7,#+1
    173            uint32_t keyaddr    = (uint32_t)Key;
   \   00000022   0xF8DD 0xA02C      LDR      R10,[SP, #+44]
    174            uint32_t inputaddr  = (uint32_t)Input;
   \   00000026   0xF8DD 0x9030      LDR      R9,[SP, #+48]
    175            uint32_t outputaddr = (uint32_t)Output;
   \   0000002A   0xF8DD 0x8058      LDR      R8,[SP, #+88]
    176          
    177            /* Number of valid bits in last word of the Input data */
    178            nbvalidbitsdata = 8 * (Ilen % 4);
   \   0000002E   0x2004             MOVS     R0,#+4
   \   00000030   0xFBB5 0xF1F0      UDIV     R1,R5,R0
   \   00000034   0xFB01 0x5110      MLS      R1,R1,R0,R5
   \   00000038   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000003A   0x00C8             LSLS     R0,R1,#+3
   \   0000003C   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    179          
    180            /* Number of valid bits in last word of the Key */
    181            nbvalidbitskey = 8 * (Keylen % 4);
   \   00000040   0x2004             MOVS     R0,#+4
   \   00000042   0xFBB4 0xF1F0      UDIV     R1,R4,R0
   \   00000046   0xFB01 0x4110      MLS      R1,R1,R0,R4
   \   0000004A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000004C   0x00C8             LSLS     R0,R1,#+3
   \   0000004E   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    182             
    183            /* HASH peripheral initialization */
    184            HASH_DeInit();
   \   00000052   0x.... 0x....      BL       HASH_DeInit
    185          
    186            /* HASH Configuration */
    187            MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
   \   00000056   0x2080             MOVS     R0,#+128
   \   00000058   0x9002             STR      R0,[SP, #+8]
    188            MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
   \   0000005A   0x2040             MOVS     R0,#+64
   \   0000005C   0x9003             STR      R0,[SP, #+12]
    189            MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
   \   0000005E   0x2020             MOVS     R0,#+32
   \   00000060   0x9004             STR      R0,[SP, #+16]
    190            if(Keylen > 64)
   \   00000062   0x2C41             CMP      R4,#+65
   \   00000064   0xD303             BCC.N    ??HMAC_MD5_0
    191            {
    192              /* HMAC long Key */
    193              MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
   \   00000066   0xF45F 0x3080      MOVS     R0,#+65536
   \   0000006A   0x9005             STR      R0,[SP, #+20]
   \   0000006C   0xE001             B.N      ??HMAC_MD5_1
    194            }
    195            else
    196            {
    197              /* HMAC short Key */
    198              MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
   \                     ??HMAC_MD5_0: (+1)
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0x9005             STR      R0,[SP, #+20]
    199            }
    200            HASH_Init(&MD5_HASH_InitStructure);
   \                     ??HMAC_MD5_1: (+1)
   \   00000072   0xA802             ADD      R0,SP,#+8
   \   00000074   0x.... 0x....      BL       HASH_Init
    201          
    202            /* Configure the number of valid bits in last word of the Key */
    203            HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
   \   00000078   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   0000007C   0x.... 0x....      BL       HASH_SetLastWordValidBitsNbr
    204          
    205            /* Write the Key */
    206            for(i=0; i<Keylen; i+=4)
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0x4683             MOV      R11,R0
   \                     ??HMAC_MD5_2: (+1)
   \   00000084   0x45A3             CMP      R11,R4
   \   00000086   0xD208             BCS.N    ??HMAC_MD5_3
    207            {
    208              HASH_DataIn(*(uint32_t*)keyaddr);
   \   00000088   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   0000008C   0x.... 0x....      BL       HASH_DataIn
    209              keyaddr+=4;
   \   00000090   0xF11A 0x0A04      ADDS     R10,R10,#+4
    210            }
   \   00000094   0xF11B 0x0B04      ADDS     R11,R11,#+4
   \   00000098   0xE7F4             B.N      ??HMAC_MD5_2
    211            
    212            /* Start the HASH processor */
    213            HASH_StartDigest();
   \                     ??HMAC_MD5_3: (+1)
   \   0000009A   0x.... 0x....      BL       HASH_StartDigest
    214          
    215            /* wait until the Busy flag is RESET */
    216            do
    217            {
    218              busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
   \                     ??HMAC_MD5_4: (+1)
   \   0000009E   0x2008             MOVS     R0,#+8
   \   000000A0   0x.... 0x....      BL       HASH_GetFlagStatus
   \   000000A4   0x0006             MOVS     R6,R0
    219              counter++;
   \   000000A6   0x9800             LDR      R0,[SP, #+0]
   \   000000A8   0x1C40             ADDS     R0,R0,#+1
   \   000000AA   0x9000             STR      R0,[SP, #+0]
    220            }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
   \   000000AC   0x9800             LDR      R0,[SP, #+0]
   \   000000AE   0xF5B0 0x3F80      CMP      R0,#+65536
   \   000000B2   0xD001             BEQ.N    ??HMAC_MD5_5
   \   000000B4   0x2E00             CMP      R6,#+0
   \   000000B6   0xD1F2             BNE.N    ??HMAC_MD5_4
    221          
    222            if (busystatus != RESET)
   \                     ??HMAC_MD5_5: (+1)
   \   000000B8   0x2E00             CMP      R6,#+0
   \   000000BA   0xD002             BEQ.N    ??HMAC_MD5_6
    223            {
    224               status = ERROR;
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0x0007             MOVS     R7,R0
   \   000000C0   0xE068             B.N      ??HMAC_MD5_7
    225            }
    226            else
    227            {
    228              /* Configure the number of valid bits in last word of the Input data */
    229              HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
   \                     ??HMAC_MD5_6: (+1)
   \   000000C2   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   000000C6   0x.... 0x....      BL       HASH_SetLastWordValidBitsNbr
    230          
    231              /* Write the Input block in the IN FIFO */
    232              for(i=0; i<Ilen; i+=4)
   \   000000CA   0x2000             MOVS     R0,#+0
   \   000000CC   0x4683             MOV      R11,R0
   \                     ??HMAC_MD5_8: (+1)
   \   000000CE   0x45AB             CMP      R11,R5
   \   000000D0   0xD208             BCS.N    ??HMAC_MD5_9
    233              {
    234                HASH_DataIn(*(uint32_t*)inputaddr);
   \   000000D2   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   000000D6   0x.... 0x....      BL       HASH_DataIn
    235                inputaddr+=4;
   \   000000DA   0xF119 0x0904      ADDS     R9,R9,#+4
    236              }
   \   000000DE   0xF11B 0x0B04      ADDS     R11,R11,#+4
   \   000000E2   0xE7F4             B.N      ??HMAC_MD5_8
    237          
    238              /* Start the HASH processor */
    239              HASH_StartDigest();
   \                     ??HMAC_MD5_9: (+1)
   \   000000E4   0x.... 0x....      BL       HASH_StartDigest
    240          
    241              /* wait until the Busy flag is RESET */
    242              counter =0;
   \   000000E8   0x2000             MOVS     R0,#+0
   \   000000EA   0x9000             STR      R0,[SP, #+0]
    243              do
    244              {
    245                 busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
   \                     ??HMAC_MD5_10: (+1)
   \   000000EC   0x2008             MOVS     R0,#+8
   \   000000EE   0x.... 0x....      BL       HASH_GetFlagStatus
   \   000000F2   0x0006             MOVS     R6,R0
    246                 counter++;
   \   000000F4   0x9800             LDR      R0,[SP, #+0]
   \   000000F6   0x1C40             ADDS     R0,R0,#+1
   \   000000F8   0x9000             STR      R0,[SP, #+0]
    247              }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
   \   000000FA   0x9800             LDR      R0,[SP, #+0]
   \   000000FC   0xF5B0 0x3F80      CMP      R0,#+65536
   \   00000100   0xD001             BEQ.N    ??HMAC_MD5_11
   \   00000102   0x2E00             CMP      R6,#+0
   \   00000104   0xD1F2             BNE.N    ??HMAC_MD5_10
    248          
    249              if (busystatus != RESET)
   \                     ??HMAC_MD5_11: (+1)
   \   00000106   0x2E00             CMP      R6,#+0
   \   00000108   0xD002             BEQ.N    ??HMAC_MD5_12
    250              {
    251                status = ERROR;
   \   0000010A   0x2000             MOVS     R0,#+0
   \   0000010C   0x0007             MOVS     R7,R0
   \   0000010E   0xE041             B.N      ??HMAC_MD5_7
    252              }
    253              else
    254              {  
    255                /* Configure the number of valid bits in last word of the Key */
    256                HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
   \                     ??HMAC_MD5_12: (+1)
   \   00000110   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000114   0x.... 0x....      BL       HASH_SetLastWordValidBitsNbr
    257          
    258                /* Write the Key */
    259                keyaddr = (uint32_t)Key;
   \   00000118   0x980B             LDR      R0,[SP, #+44]
   \   0000011A   0x4682             MOV      R10,R0
    260                for(i=0; i<Keylen; i+=4)
   \   0000011C   0x2000             MOVS     R0,#+0
   \   0000011E   0x4683             MOV      R11,R0
   \                     ??HMAC_MD5_13: (+1)
   \   00000120   0x45A3             CMP      R11,R4
   \   00000122   0xD208             BCS.N    ??HMAC_MD5_14
    261                {
    262                  HASH_DataIn(*(uint32_t*)keyaddr);
   \   00000124   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   00000128   0x.... 0x....      BL       HASH_DataIn
    263                  keyaddr+=4;
   \   0000012C   0xF11A 0x0A04      ADDS     R10,R10,#+4
    264                }
   \   00000130   0xF11B 0x0B04      ADDS     R11,R11,#+4
   \   00000134   0xE7F4             B.N      ??HMAC_MD5_13
    265            
    266                 /* Start the HASH processor */
    267                 HASH_StartDigest();
   \                     ??HMAC_MD5_14: (+1)
   \   00000136   0x.... 0x....      BL       HASH_StartDigest
    268          
    269                 /* wait until the Busy flag is RESET */
    270                 counter =0;
   \   0000013A   0x2000             MOVS     R0,#+0
   \   0000013C   0x9000             STR      R0,[SP, #+0]
    271                 do
    272                 {
    273                    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
   \                     ??HMAC_MD5_15: (+1)
   \   0000013E   0x2008             MOVS     R0,#+8
   \   00000140   0x.... 0x....      BL       HASH_GetFlagStatus
   \   00000144   0x0006             MOVS     R6,R0
    274                    counter++;
   \   00000146   0x9800             LDR      R0,[SP, #+0]
   \   00000148   0x1C40             ADDS     R0,R0,#+1
   \   0000014A   0x9000             STR      R0,[SP, #+0]
    275                }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
   \   0000014C   0x9800             LDR      R0,[SP, #+0]
   \   0000014E   0xF5B0 0x3F80      CMP      R0,#+65536
   \   00000152   0xD001             BEQ.N    ??HMAC_MD5_16
   \   00000154   0x2E00             CMP      R6,#+0
   \   00000156   0xD1F2             BNE.N    ??HMAC_MD5_15
    276          
    277                if (busystatus != RESET)
   \                     ??HMAC_MD5_16: (+1)
   \   00000158   0x2E00             CMP      R6,#+0
   \   0000015A   0xD002             BEQ.N    ??HMAC_MD5_17
    278                {
    279                   status = ERROR;
   \   0000015C   0x2000             MOVS     R0,#+0
   \   0000015E   0x0007             MOVS     R7,R0
   \   00000160   0xE018             B.N      ??HMAC_MD5_7
    280                }
    281                else
    282                {
    283                   /* Read the message digest */
    284                   HASH_GetDigest(&MD5_MessageDigest);
   \                     ??HMAC_MD5_17: (+1)
   \   00000162   0xA806             ADD      R0,SP,#+24
   \   00000164   0x.... 0x....      BL       HASH_GetDigest
    285                   *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
   \   00000168   0x9806             LDR      R0,[SP, #+24]
   \   0000016A   0xBA00             REV      R0,R0
   \   0000016C   0xF8C8 0x0000      STR      R0,[R8, #+0]
    286                   outputaddr+=4;
   \   00000170   0xF118 0x0804      ADDS     R8,R8,#+4
    287                   *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
   \   00000174   0x9807             LDR      R0,[SP, #+28]
   \   00000176   0xBA00             REV      R0,R0
   \   00000178   0xF8C8 0x0000      STR      R0,[R8, #+0]
    288                   outputaddr+=4;
   \   0000017C   0xF118 0x0804      ADDS     R8,R8,#+4
    289                   *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
   \   00000180   0x9808             LDR      R0,[SP, #+32]
   \   00000182   0xBA00             REV      R0,R0
   \   00000184   0xF8C8 0x0000      STR      R0,[R8, #+0]
    290                   outputaddr+=4;
   \   00000188   0xF118 0x0804      ADDS     R8,R8,#+4
    291                   *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
   \   0000018C   0x9809             LDR      R0,[SP, #+36]
   \   0000018E   0xBA00             REV      R0,R0
   \   00000190   0xF8C8 0x0000      STR      R0,[R8, #+0]
    292                }
    293              }
    294            }
    295            return status;  
   \                     ??HMAC_MD5_7: (+1)
   \   00000194   0x0038             MOVS     R0,R7
   \   00000196   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000198   0xB00D             ADD      SP,SP,#+52
   \   0000019A   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    296          }
    297          /**
    298            * @}
    299            */ 
    300          
    301          /**
    302            * @}
    303            */ 
    304          
    305          /**
    306            * @}
    307            */ 
    308          
    309          /**
    310            * @}
    311            */ 
    312          
    313          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/
    314          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      80   HASH_MD5
        80   -> HASH_DataIn
        80   -> HASH_DeInit
        80   -> HASH_GetDigest
        80   -> HASH_GetFlagStatus
        80   -> HASH_Init
        80   -> HASH_SetLastWordValidBitsNbr
        80   -> HASH_StartDigest
      88   HMAC_MD5
        88   -> HASH_DataIn
        88   -> HASH_DeInit
        88   -> HASH_GetDigest
        88   -> HASH_GetFlagStatus
        88   -> HASH_Init
        88   -> HASH_SetLastWordValidBitsNbr
        88   -> HASH_StartDigest


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     210  HASH_MD5
     414  HMAC_MD5

 
 624 bytes in section .text
 
 624 bytes of CODE memory

Errors: none
Warnings: none
