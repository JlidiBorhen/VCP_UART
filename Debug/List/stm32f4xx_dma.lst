###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       06/May/2016  23:31:32
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\IAR
#        Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_dma.c
#    Command line =  
#        "D:\IAR
#        Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_dma.c"
#        -D USE_STDPERIPH_DRIVER -D STM32F4XX -D USE_FULL_ASSERT -lCN "D:\IAR
#        Workspace\STM32F407\VCP_ESP\Debug\List" -o "D:\IAR
#        Workspace\STM32F407\VCP_ESP\Debug\Obj" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\"
#        -I "D:\IAR Workspace\STM32F407\VCP_ESP\..\Libraries\CMSIS\Include\" -I
#        "D:\IAR Workspace\STM32F407\VCP_ESP\..\Utilities\STM32F4-Discovery\"
#        -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\..\Libraries\CMSIS\ST\STM32F4xx\Include\"
#        -I "D:\IAR Workspace\STM32F407\VCP_ESP\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_conf\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\cdc\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\otg\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\core\" -On --use_c++_inline -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        D:\IAR Workspace\STM32F407\VCP_ESP\Debug\List\stm32f4xx_dma.lst
#    Object file  =  
#        D:\IAR Workspace\STM32F407\VCP_ESP\Debug\Obj\stm32f4xx_dma.o
#
###############################################################################

D:\IAR Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_dma.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f4xx_dma.c
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    30-September-2011
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionalities of the Direct Memory Access controller (DMA):           
      9            *           - Initialization and Configuration
     10            *           - Data Counter
     11            *           - Double Buffer mode configuration and command  
     12            *           - Interrupts and flags management
     13            *           
     14            *  @verbatim
     15            *      
     16            *          ===================================================================      
     17            *                                 How to use this driver
     18            *          =================================================================== 
     19            *          1. Enable The DMA controller clock using RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA1, ENABLE)
     20            *             function for DMA1 or using RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2, ENABLE)
     21            *             function for DMA2.
     22            *
     23            *          2. Enable and configure the peripheral to be connected to the DMA Stream
     24            *             (except for internal SRAM / FLASH memories: no initialization is 
     25            *             necessary). 
     26            *        
     27            *          3. For a given Stream, program the required configuration through following parameters:   
     28            *             Source and Destination addresses, Transfer Direction, Transfer size, Source and Destination 
     29            *             data formats, Circular or Normal mode, Stream Priority level, Source and Destination 
     30            *             Incrementation mode, FIFO mode and its Threshold (if needed), Burst mode for Source and/or 
     31            *             Destination (if needed) using the DMA_Init() function.
     32            *             To avoid filling un-nesecessary fields, you can call DMA_StructInit() function
     33            *             to initialize a given structure with default values (reset values), the modify
     34            *             only necessary fields (ie. Source and Destination addresses, Transfer size and Data Formats).
     35            *
     36            *          4. Enable the NVIC and the corresponding interrupt(s) using the function 
     37            *             DMA_ITConfig() if you need to use DMA interrupts. 
     38            *
     39            *          5. Optionally, if the Circular mode is enabled, you can use the Double buffer mode by configuring 
     40            *             the second Memory address and the first Memory to be used through the function 
     41            *             DMA_DoubleBufferModeConfig(). Then enable the Double buffer mode through the function
     42            *             DMA_DoubleBufferModeCmd(). These operations must be done before step 6.
     43            *    
     44            *          6. Enable the DMA stream using the DMA_Cmd() function. 
     45            *                
     46            *          7. Activate the needed Stream Request using PPP_DMACmd() function for
     47            *             any PPP peripheral except internal SRAM and FLASH (ie. SPI, USART ...)
     48            *             The function allowing this operation is provided in each PPP peripheral
     49            *             driver (ie. SPI_DMACmd for SPI peripheral).
     50            *             Once the Stream is enabled, it is not possible to modify its configuration
     51            *             unless the stream is stopped and disabled.
     52            *             After enabling the Stream, it is advised to monitor the EN bit status using
     53            *             the function DMA_GetCmdStatus(). In case of configuration errors or bus errors
     54            *             this bit will remain reset and all transfers on this Stream will remain on hold.      
     55            *
     56            *          8. Optionally, you can configure the number of data to be transferred
     57            *             when the Stream is disabled (ie. after each Transfer Complete event
     58            *             or when a Transfer Error occurs) using the function DMA_SetCurrDataCounter().
     59            *             And you can get the number of remaining data to be transferred using 
     60            *             the function DMA_GetCurrDataCounter() at run time (when the DMA Stream is
     61            *             enabled and running).  
     62            *                   
     63            *          9. To control DMA events you can use one of the following 
     64            *              two methods:
     65            *               a- Check on DMA Stream flags using the function DMA_GetFlagStatus().  
     66            *               b- Use DMA interrupts through the function DMA_ITConfig() at initialization
     67            *                  phase and DMA_GetITStatus() function into interrupt routines in
     68            *                  communication phase.  
     69            *              After checking on a flag you should clear it using DMA_ClearFlag()
     70            *              function. And after checking on an interrupt event you should 
     71            *              clear it using DMA_ClearITPendingBit() function.    
     72            *              
     73            *          10. Optionally, if Circular mode and Double Buffer mode are enabled, you can modify
     74            *              the Memory Addresses using the function DMA_MemoryTargetConfig(). Make sure that
     75            *              the Memory Address to be modified is not the one currently in use by DMA Stream.
     76            *              This condition can be monitored using the function DMA_GetCurrentMemoryTarget().
     77            *              
     78            *          11. Optionally, Pause-Resume operations may be performed:
     79            *              The DMA_Cmd() function may be used to perform Pause-Resume operation. When a 
     80            *              transfer is ongoing, calling this function to disable the Stream will cause the 
     81            *              transfer to be paused. All configuration registers and the number of remaining 
     82            *              data will be preserved. When calling again this function to re-enable the Stream, 
     83            *              the transfer will be resumed from the point where it was paused.          
     84            *                 
     85            * @note   Memory-to-Memory transfer is possible by setting the address of the memory into
     86            *         the Peripheral registers. In this mode, Circular mode and Double Buffer mode
     87            *         are not allowed.
     88            *  
     89            * @note   The FIFO is used mainly to reduce bus usage and to allow data packing/unpacking: it is
     90            *         possible to set different Data Sizes for the Peripheral and the Memory (ie. you can set
     91            *         Half-Word data size for the peripheral to access its data register and set Word data size
     92            *         for the Memory to gain in access time. Each two Half-words will be packed and written in
     93            *         a single access to a Word in the Memory).
     94            *    
     95            * @note  When FIFO is disabled, it is not allowed to configure different Data Sizes for Source
     96            *        and Destination. In this case the Peripheral Data Size will be applied to both Source
     97            *        and Destination.               
     98            *
     99            *  @endverbatim
    100            *                                  
    101            ******************************************************************************
    102            * @attention
    103            *
    104            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
    105            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
    106            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
    107            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
    108            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
    109            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
    110            *
    111            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
    112            ******************************************************************************  
    113            */ 
    114          
    115          /* Includes ------------------------------------------------------------------*/
    116          #include "stm32f4xx_dma.h"
    117          #include "stm32f4xx_rcc.h"
    118          
    119          /** @addtogroup STM32F4xx_StdPeriph_Driver
    120            * @{
    121            */
    122          
    123          /** @defgroup DMA 
    124            * @brief DMA driver modules
    125            * @{
    126            */ 
    127          
    128          /* Private typedef -----------------------------------------------------------*/
    129          /* Private define ------------------------------------------------------------*/
    130          
    131          /* Masks Definition */
    132          #define TRANSFER_IT_ENABLE_MASK (uint32_t)(DMA_SxCR_TCIE | DMA_SxCR_HTIE | \
    133                                                     DMA_SxCR_TEIE | DMA_SxCR_DMEIE)
    134          
    135          #define DMA_Stream0_IT_MASK     (uint32_t)(DMA_LISR_FEIF0 | DMA_LISR_DMEIF0 | \
    136                                                     DMA_LISR_TEIF0 | DMA_LISR_HTIF0 | \
    137                                                     DMA_LISR_TCIF0)
    138          
    139          #define DMA_Stream1_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 6)
    140          #define DMA_Stream2_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 16)
    141          #define DMA_Stream3_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 22)
    142          #define DMA_Stream4_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK | (uint32_t)0x20000000)
    143          #define DMA_Stream5_IT_MASK     (uint32_t)(DMA_Stream1_IT_MASK | (uint32_t)0x20000000)
    144          #define DMA_Stream6_IT_MASK     (uint32_t)(DMA_Stream2_IT_MASK | (uint32_t)0x20000000)
    145          #define DMA_Stream7_IT_MASK     (uint32_t)(DMA_Stream3_IT_MASK | (uint32_t)0x20000000)
    146          #define TRANSFER_IT_MASK        (uint32_t)0x0F3C0F3C
    147          #define HIGH_ISR_MASK           (uint32_t)0x20000000
    148          #define RESERVED_MASK           (uint32_t)0x0F7D0F7D  
    149          
    150          /* Private macro -------------------------------------------------------------*/
    151          /* Private variables ---------------------------------------------------------*/
    152          /* Private function prototypes -----------------------------------------------*/
    153          /* Private functions ---------------------------------------------------------*/
    154          
    155          
    156          /** @defgroup DMA_Private_Functions
    157            * @{
    158            */
    159          
    160          /** @defgroup DMA_Group1 Initialization and Configuration functions
    161           *  @brief   Initialization and Configuration functions
    162           *
    163          @verbatim   
    164           ===============================================================================
    165                           Initialization and Configuration functions
    166           ===============================================================================  
    167          
    168            This subsection provides functions allowing to initialize the DMA Stream source
    169            and destination addresses, incrementation and data sizes, transfer direction, 
    170            buffer size, circular/normal mode selection, memory-to-memory mode selection 
    171            and Stream priority value.
    172            
    173            The DMA_Init() function follows the DMA configuration procedures as described in
    174            reference manual (RM0090) except the first point: waiting on EN bit to be reset.
    175            This condition should be checked by user application using the function DMA_GetCmdStatus()
    176            before calling the DMA_Init() function.
    177          
    178          @endverbatim
    179            * @{
    180            */
    181          
    182          /**
    183            * @brief  Deinitialize the DMAy Streamx registers to their default reset values.
    184            * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
    185            *         to 7 to select the DMA Stream.
    186            * @retval None
    187            */

   \                                 In section .text, align 2, keep-with-next
    188          void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
    189          {
   \                     DMA_DeInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    190            /* Check the parameters */
    191            assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable6  ;; 0x40026010
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD040             BEQ.N    ??DMA_DeInit_0
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable6_1  ;; 0x40026028
   \   00000010   0x4284             CMP      R4,R0
   \   00000012   0xD03C             BEQ.N    ??DMA_DeInit_0
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable6_2  ;; 0x40026040
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD038             BEQ.N    ??DMA_DeInit_0
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable6_3  ;; 0x40026058
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD034             BEQ.N    ??DMA_DeInit_0
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable6_4  ;; 0x40026070
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD030             BEQ.N    ??DMA_DeInit_0
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable6_5  ;; 0x40026088
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD02C             BEQ.N    ??DMA_DeInit_0
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable6_6  ;; 0x400260a0
   \   00000038   0x4284             CMP      R4,R0
   \   0000003A   0xD028             BEQ.N    ??DMA_DeInit_0
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable6_7  ;; 0x400260b8
   \   00000040   0x4284             CMP      R4,R0
   \   00000042   0xD024             BEQ.N    ??DMA_DeInit_0
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable6_8  ;; 0x40026410
   \   00000048   0x4284             CMP      R4,R0
   \   0000004A   0xD020             BEQ.N    ??DMA_DeInit_0
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable6_9  ;; 0x40026428
   \   00000050   0x4284             CMP      R4,R0
   \   00000052   0xD01C             BEQ.N    ??DMA_DeInit_0
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable7  ;; 0x40026440
   \   00000058   0x4284             CMP      R4,R0
   \   0000005A   0xD018             BEQ.N    ??DMA_DeInit_0
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable7_1  ;; 0x40026458
   \   00000060   0x4284             CMP      R4,R0
   \   00000062   0xD014             BEQ.N    ??DMA_DeInit_0
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable7_2  ;; 0x40026470
   \   00000068   0x4284             CMP      R4,R0
   \   0000006A   0xD010             BEQ.N    ??DMA_DeInit_0
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable7_3  ;; 0x40026488
   \   00000070   0x4284             CMP      R4,R0
   \   00000072   0xD00C             BEQ.N    ??DMA_DeInit_0
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable7_4  ;; 0x400264a0
   \   00000078   0x4284             CMP      R4,R0
   \   0000007A   0xD008             BEQ.N    ??DMA_DeInit_0
   \   0000007C   0x.... 0x....      LDR.W    R0,??DataTable7_5  ;; 0x400264b8
   \   00000080   0x4284             CMP      R4,R0
   \   00000082   0xD004             BEQ.N    ??DMA_DeInit_0
   \   00000084   0x21BF             MOVS     R1,#+191
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable6_10
   \   0000008A   0x.... 0x....      BL       assert_failed
    192          
    193            /* Disable the selected DMAy Streamx */
    194            DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
   \                     ??DMA_DeInit_0: (+1)
   \   0000008E   0x6820             LDR      R0,[R4, #+0]
   \   00000090   0x0840             LSRS     R0,R0,#+1
   \   00000092   0x0040             LSLS     R0,R0,#+1
   \   00000094   0x6020             STR      R0,[R4, #+0]
    195          
    196            /* Reset DMAy Streamx control register */
    197            DMAy_Streamx->CR  = 0;
   \   00000096   0x2000             MOVS     R0,#+0
   \   00000098   0x6020             STR      R0,[R4, #+0]
    198            
    199            /* Reset DMAy Streamx Number of Data to Transfer register */
    200            DMAy_Streamx->NDTR = 0;
   \   0000009A   0x2000             MOVS     R0,#+0
   \   0000009C   0x6060             STR      R0,[R4, #+4]
    201            
    202            /* Reset DMAy Streamx peripheral address register */
    203            DMAy_Streamx->PAR  = 0;
   \   0000009E   0x2000             MOVS     R0,#+0
   \   000000A0   0x60A0             STR      R0,[R4, #+8]
    204            
    205            /* Reset DMAy Streamx memory 0 address register */
    206            DMAy_Streamx->M0AR = 0;
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0x60E0             STR      R0,[R4, #+12]
    207          
    208            /* Reset DMAy Streamx memory 1 address register */
    209            DMAy_Streamx->M1AR = 0;
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0x6120             STR      R0,[R4, #+16]
    210          
    211            /* Reset DMAy Streamx FIFO control register */
    212            DMAy_Streamx->FCR = (uint32_t)0x00000021; 
   \   000000AA   0x2021             MOVS     R0,#+33
   \   000000AC   0x6160             STR      R0,[R4, #+20]
    213          
    214            /* Reset interrupt pending bits for the selected stream */
    215            if (DMAy_Streamx == DMA1_Stream0)
   \   000000AE   0x.... 0x....      LDR.W    R0,??DataTable6  ;; 0x40026010
   \   000000B2   0x4284             CMP      R4,R0
   \   000000B4   0xD104             BNE.N    ??DMA_DeInit_1
    216            {
    217              /* Reset interrupt pending bits for DMA1 Stream0 */
    218              DMA1->LIFCR = DMA_Stream0_IT_MASK;
   \   000000B6   0x203D             MOVS     R0,#+61
   \   000000B8   0x.... 0x....      LDR.W    R1,??DataTable7_6  ;; 0x40026008
   \   000000BC   0x6008             STR      R0,[R1, #+0]
   \   000000BE   0xE093             B.N      ??DMA_DeInit_2
    219            }
    220            else if (DMAy_Streamx == DMA1_Stream1)
   \                     ??DMA_DeInit_1: (+1)
   \   000000C0   0x.... 0x....      LDR.W    R0,??DataTable6_1  ;; 0x40026028
   \   000000C4   0x4284             CMP      R4,R0
   \   000000C6   0xD105             BNE.N    ??DMA_DeInit_3
    221            {
    222              /* Reset interrupt pending bits for DMA1 Stream1 */
    223              DMA1->LIFCR = DMA_Stream1_IT_MASK;
   \   000000C8   0xF44F 0x6074      MOV      R0,#+3904
   \   000000CC   0x.... 0x....      LDR.W    R1,??DataTable7_6  ;; 0x40026008
   \   000000D0   0x6008             STR      R0,[R1, #+0]
   \   000000D2   0xE089             B.N      ??DMA_DeInit_2
    224            }
    225            else if (DMAy_Streamx == DMA1_Stream2)
   \                     ??DMA_DeInit_3: (+1)
   \   000000D4   0x.... 0x....      LDR.W    R0,??DataTable6_2  ;; 0x40026040
   \   000000D8   0x4284             CMP      R4,R0
   \   000000DA   0xD105             BNE.N    ??DMA_DeInit_4
    226            {
    227              /* Reset interrupt pending bits for DMA1 Stream2 */
    228              DMA1->LIFCR = DMA_Stream2_IT_MASK;
   \   000000DC   0xF45F 0x1074      MOVS     R0,#+3997696
   \   000000E0   0x.... 0x....      LDR.W    R1,??DataTable7_6  ;; 0x40026008
   \   000000E4   0x6008             STR      R0,[R1, #+0]
   \   000000E6   0xE07F             B.N      ??DMA_DeInit_2
    229            }
    230            else if (DMAy_Streamx == DMA1_Stream3)
   \                     ??DMA_DeInit_4: (+1)
   \   000000E8   0x.... 0x....      LDR.W    R0,??DataTable6_3  ;; 0x40026058
   \   000000EC   0x4284             CMP      R4,R0
   \   000000EE   0xD105             BNE.N    ??DMA_DeInit_5
    231            {
    232              /* Reset interrupt pending bits for DMA1 Stream3 */
    233              DMA1->LIFCR = DMA_Stream3_IT_MASK;
   \   000000F0   0xF05F 0x6074      MOVS     R0,#+255852544
   \   000000F4   0x.... 0x....      LDR.W    R1,??DataTable7_6  ;; 0x40026008
   \   000000F8   0x6008             STR      R0,[R1, #+0]
   \   000000FA   0xE075             B.N      ??DMA_DeInit_2
    234            }
    235            else if (DMAy_Streamx == DMA1_Stream4)
   \                     ??DMA_DeInit_5: (+1)
   \   000000FC   0x.... 0x....      LDR.W    R0,??DataTable6_4  ;; 0x40026070
   \   00000100   0x4284             CMP      R4,R0
   \   00000102   0xD105             BNE.N    ??DMA_DeInit_6
    236            {
    237              /* Reset interrupt pending bits for DMA1 Stream4 */
    238              DMA1->HIFCR = DMA_Stream4_IT_MASK;
   \   00000104   0x.... 0x....      LDR.W    R0,??DataTable7_7  ;; 0x2000003d
   \   00000108   0x.... 0x....      LDR.W    R1,??DataTable7_8  ;; 0x4002600c
   \   0000010C   0x6008             STR      R0,[R1, #+0]
   \   0000010E   0xE06B             B.N      ??DMA_DeInit_2
    239            }
    240            else if (DMAy_Streamx == DMA1_Stream5)
   \                     ??DMA_DeInit_6: (+1)
   \   00000110   0x.... 0x....      LDR.W    R0,??DataTable6_5  ;; 0x40026088
   \   00000114   0x4284             CMP      R4,R0
   \   00000116   0xD105             BNE.N    ??DMA_DeInit_7
    241            {
    242              /* Reset interrupt pending bits for DMA1 Stream5 */
    243              DMA1->HIFCR = DMA_Stream5_IT_MASK;
   \   00000118   0x.... 0x....      LDR.W    R0,??DataTable7_9  ;; 0x20000f40
   \   0000011C   0x.... 0x....      LDR.W    R1,??DataTable7_8  ;; 0x4002600c
   \   00000120   0x6008             STR      R0,[R1, #+0]
   \   00000122   0xE061             B.N      ??DMA_DeInit_2
    244            }
    245            else if (DMAy_Streamx == DMA1_Stream6)
   \                     ??DMA_DeInit_7: (+1)
   \   00000124   0x.... 0x....      LDR.W    R0,??DataTable6_6  ;; 0x400260a0
   \   00000128   0x4284             CMP      R4,R0
   \   0000012A   0xD105             BNE.N    ??DMA_DeInit_8
    246            {
    247              /* Reset interrupt pending bits for DMA1 Stream6 */
    248              DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
   \   0000012C   0x.... 0x....      LDR.W    R0,??DataTable7_10  ;; 0x203d0000
   \   00000130   0x.... 0x....      LDR.W    R1,??DataTable7_8  ;; 0x4002600c
   \   00000134   0x6008             STR      R0,[R1, #+0]
   \   00000136   0xE057             B.N      ??DMA_DeInit_2
    249            }
    250            else if (DMAy_Streamx == DMA1_Stream7)
   \                     ??DMA_DeInit_8: (+1)
   \   00000138   0x.... 0x....      LDR.W    R0,??DataTable6_7  ;; 0x400260b8
   \   0000013C   0x4284             CMP      R4,R0
   \   0000013E   0xD105             BNE.N    ??DMA_DeInit_9
    251            {
    252              /* Reset interrupt pending bits for DMA1 Stream7 */
    253              DMA1->HIFCR = DMA_Stream7_IT_MASK;
   \   00000140   0xF05F 0x503D      MOVS     R0,#+792723456
   \   00000144   0x.... 0x....      LDR.W    R1,??DataTable7_8  ;; 0x4002600c
   \   00000148   0x6008             STR      R0,[R1, #+0]
   \   0000014A   0xE04D             B.N      ??DMA_DeInit_2
    254            }
    255            else if (DMAy_Streamx == DMA2_Stream0)
   \                     ??DMA_DeInit_9: (+1)
   \   0000014C   0x.... 0x....      LDR.W    R0,??DataTable6_8  ;; 0x40026410
   \   00000150   0x4284             CMP      R4,R0
   \   00000152   0xD104             BNE.N    ??DMA_DeInit_10
    256            {
    257              /* Reset interrupt pending bits for DMA2 Stream0 */
    258              DMA2->LIFCR = DMA_Stream0_IT_MASK;
   \   00000154   0x203D             MOVS     R0,#+61
   \   00000156   0x.... 0x....      LDR.W    R1,??DataTable7_11  ;; 0x40026408
   \   0000015A   0x6008             STR      R0,[R1, #+0]
   \   0000015C   0xE044             B.N      ??DMA_DeInit_2
    259            }
    260            else if (DMAy_Streamx == DMA2_Stream1)
   \                     ??DMA_DeInit_10: (+1)
   \   0000015E   0x.... 0x....      LDR.W    R0,??DataTable6_9  ;; 0x40026428
   \   00000162   0x4284             CMP      R4,R0
   \   00000164   0xD105             BNE.N    ??DMA_DeInit_11
    261            {
    262              /* Reset interrupt pending bits for DMA2 Stream1 */
    263              DMA2->LIFCR = DMA_Stream1_IT_MASK;
   \   00000166   0xF44F 0x6074      MOV      R0,#+3904
   \   0000016A   0x.... 0x....      LDR.W    R1,??DataTable7_11  ;; 0x40026408
   \   0000016E   0x6008             STR      R0,[R1, #+0]
   \   00000170   0xE03A             B.N      ??DMA_DeInit_2
    264            }
    265            else if (DMAy_Streamx == DMA2_Stream2)
   \                     ??DMA_DeInit_11: (+1)
   \   00000172   0x.... 0x....      LDR.W    R0,??DataTable7  ;; 0x40026440
   \   00000176   0x4284             CMP      R4,R0
   \   00000178   0xD105             BNE.N    ??DMA_DeInit_12
    266            {
    267              /* Reset interrupt pending bits for DMA2 Stream2 */
    268              DMA2->LIFCR = DMA_Stream2_IT_MASK;
   \   0000017A   0xF45F 0x1074      MOVS     R0,#+3997696
   \   0000017E   0x.... 0x....      LDR.W    R1,??DataTable7_11  ;; 0x40026408
   \   00000182   0x6008             STR      R0,[R1, #+0]
   \   00000184   0xE030             B.N      ??DMA_DeInit_2
    269            }
    270            else if (DMAy_Streamx == DMA2_Stream3)
   \                     ??DMA_DeInit_12: (+1)
   \   00000186   0x.... 0x....      LDR.W    R0,??DataTable7_1  ;; 0x40026458
   \   0000018A   0x4284             CMP      R4,R0
   \   0000018C   0xD105             BNE.N    ??DMA_DeInit_13
    271            {
    272              /* Reset interrupt pending bits for DMA2 Stream3 */
    273              DMA2->LIFCR = DMA_Stream3_IT_MASK;
   \   0000018E   0xF05F 0x6074      MOVS     R0,#+255852544
   \   00000192   0x.... 0x....      LDR.W    R1,??DataTable7_11  ;; 0x40026408
   \   00000196   0x6008             STR      R0,[R1, #+0]
   \   00000198   0xE026             B.N      ??DMA_DeInit_2
    274            }
    275            else if (DMAy_Streamx == DMA2_Stream4)
   \                     ??DMA_DeInit_13: (+1)
   \   0000019A   0x.... 0x....      LDR.W    R0,??DataTable7_2  ;; 0x40026470
   \   0000019E   0x4284             CMP      R4,R0
   \   000001A0   0xD105             BNE.N    ??DMA_DeInit_14
    276            {
    277              /* Reset interrupt pending bits for DMA2 Stream4 */
    278              DMA2->HIFCR = DMA_Stream4_IT_MASK;
   \   000001A2   0x.... 0x....      LDR.W    R0,??DataTable7_7  ;; 0x2000003d
   \   000001A6   0x.... 0x....      LDR.W    R1,??DataTable12  ;; 0x4002640c
   \   000001AA   0x6008             STR      R0,[R1, #+0]
   \   000001AC   0xE01C             B.N      ??DMA_DeInit_2
    279            }
    280            else if (DMAy_Streamx == DMA2_Stream5)
   \                     ??DMA_DeInit_14: (+1)
   \   000001AE   0x.... 0x....      LDR.W    R0,??DataTable7_3  ;; 0x40026488
   \   000001B2   0x4284             CMP      R4,R0
   \   000001B4   0xD105             BNE.N    ??DMA_DeInit_15
    281            {
    282              /* Reset interrupt pending bits for DMA2 Stream5 */
    283              DMA2->HIFCR = DMA_Stream5_IT_MASK;
   \   000001B6   0x.... 0x....      LDR.W    R0,??DataTable7_9  ;; 0x20000f40
   \   000001BA   0x.... 0x....      LDR.W    R1,??DataTable12  ;; 0x4002640c
   \   000001BE   0x6008             STR      R0,[R1, #+0]
   \   000001C0   0xE012             B.N      ??DMA_DeInit_2
    284            }
    285            else if (DMAy_Streamx == DMA2_Stream6)
   \                     ??DMA_DeInit_15: (+1)
   \   000001C2   0x.... 0x....      LDR.W    R0,??DataTable7_4  ;; 0x400264a0
   \   000001C6   0x4284             CMP      R4,R0
   \   000001C8   0xD105             BNE.N    ??DMA_DeInit_16
    286            {
    287              /* Reset interrupt pending bits for DMA2 Stream6 */
    288              DMA2->HIFCR = DMA_Stream6_IT_MASK;
   \   000001CA   0x.... 0x....      LDR.W    R0,??DataTable7_10  ;; 0x203d0000
   \   000001CE   0x.... 0x....      LDR.W    R1,??DataTable12  ;; 0x4002640c
   \   000001D2   0x6008             STR      R0,[R1, #+0]
   \   000001D4   0xE008             B.N      ??DMA_DeInit_2
    289            }
    290            else 
    291            {
    292              if (DMAy_Streamx == DMA2_Stream7)
   \                     ??DMA_DeInit_16: (+1)
   \   000001D6   0x.... 0x....      LDR.W    R0,??DataTable7_5  ;; 0x400264b8
   \   000001DA   0x4284             CMP      R4,R0
   \   000001DC   0xD104             BNE.N    ??DMA_DeInit_2
    293              {
    294                /* Reset interrupt pending bits for DMA2 Stream7 */
    295                DMA2->HIFCR = DMA_Stream7_IT_MASK;
   \   000001DE   0xF05F 0x503D      MOVS     R0,#+792723456
   \   000001E2   0x.... 0x....      LDR.W    R1,??DataTable12  ;; 0x4002640c
   \   000001E6   0x6008             STR      R0,[R1, #+0]
    296              }
    297            }
    298          }
   \                     ??DMA_DeInit_2: (+1)
   \   000001E8   0xBD10             POP      {R4,PC}          ;; return
    299          
    300          /**
    301            * @brief  Initializes the DMAy Streamx according to the specified parameters in 
    302            *         the DMA_InitStruct structure.
    303            * @note   Before calling this function, it is recommended to check that the Stream 
    304            *         is actually disabled using the function DMA_GetCmdStatus().  
    305            * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
    306            *         to 7 to select the DMA Stream.
    307            * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
    308            *         the configuration information for the specified DMA Stream.  
    309            * @retval None
    310            */

   \                                 In section .text, align 2, keep-with-next
    311          void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
    312          {
   \                     DMA_Init: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    313            uint32_t tmpreg = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    314          
    315            /* Check the parameters */
    316            assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable6  ;; 0x40026010
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD041             BEQ.N    ??DMA_Init_0
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable6_1  ;; 0x40026028
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD03D             BEQ.N    ??DMA_Init_0
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable6_2  ;; 0x40026040
   \   0000001C   0x4284             CMP      R4,R0
   \   0000001E   0xD039             BEQ.N    ??DMA_Init_0
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable6_3  ;; 0x40026058
   \   00000024   0x4284             CMP      R4,R0
   \   00000026   0xD035             BEQ.N    ??DMA_Init_0
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable6_4  ;; 0x40026070
   \   0000002C   0x4284             CMP      R4,R0
   \   0000002E   0xD031             BEQ.N    ??DMA_Init_0
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable6_5  ;; 0x40026088
   \   00000034   0x4284             CMP      R4,R0
   \   00000036   0xD02D             BEQ.N    ??DMA_Init_0
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable6_6  ;; 0x400260a0
   \   0000003C   0x4284             CMP      R4,R0
   \   0000003E   0xD029             BEQ.N    ??DMA_Init_0
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable6_7  ;; 0x400260b8
   \   00000044   0x4284             CMP      R4,R0
   \   00000046   0xD025             BEQ.N    ??DMA_Init_0
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable6_8  ;; 0x40026410
   \   0000004C   0x4284             CMP      R4,R0
   \   0000004E   0xD021             BEQ.N    ??DMA_Init_0
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable6_9  ;; 0x40026428
   \   00000054   0x4284             CMP      R4,R0
   \   00000056   0xD01D             BEQ.N    ??DMA_Init_0
   \   00000058   0x.... 0x....      LDR.W    R0,??DataTable7  ;; 0x40026440
   \   0000005C   0x4284             CMP      R4,R0
   \   0000005E   0xD019             BEQ.N    ??DMA_Init_0
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable7_1  ;; 0x40026458
   \   00000064   0x4284             CMP      R4,R0
   \   00000066   0xD015             BEQ.N    ??DMA_Init_0
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable7_2  ;; 0x40026470
   \   0000006C   0x4284             CMP      R4,R0
   \   0000006E   0xD011             BEQ.N    ??DMA_Init_0
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable7_3  ;; 0x40026488
   \   00000074   0x4284             CMP      R4,R0
   \   00000076   0xD00D             BEQ.N    ??DMA_Init_0
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable7_4  ;; 0x400264a0
   \   0000007C   0x4284             CMP      R4,R0
   \   0000007E   0xD009             BEQ.N    ??DMA_Init_0
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable7_5  ;; 0x400264b8
   \   00000084   0x4284             CMP      R4,R0
   \   00000086   0xD005             BEQ.N    ??DMA_Init_0
   \   00000088   0xF44F 0x719E      MOV      R1,#+316
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable6_10
   \   00000090   0x.... 0x....      BL       assert_failed
    317            assert_param(IS_DMA_CHANNEL(DMA_InitStruct->DMA_Channel));
   \                     ??DMA_Init_0: (+1)
   \   00000094   0x6828             LDR      R0,[R5, #+0]
   \   00000096   0x2800             CMP      R0,#+0
   \   00000098   0xD021             BEQ.N    ??DMA_Init_1
   \   0000009A   0x6828             LDR      R0,[R5, #+0]
   \   0000009C   0xF1B0 0x7F00      CMP      R0,#+33554432
   \   000000A0   0xD01D             BEQ.N    ??DMA_Init_1
   \   000000A2   0x6828             LDR      R0,[R5, #+0]
   \   000000A4   0xF1B0 0x6F80      CMP      R0,#+67108864
   \   000000A8   0xD019             BEQ.N    ??DMA_Init_1
   \   000000AA   0x6828             LDR      R0,[R5, #+0]
   \   000000AC   0xF1B0 0x6FC0      CMP      R0,#+100663296
   \   000000B0   0xD015             BEQ.N    ??DMA_Init_1
   \   000000B2   0x6828             LDR      R0,[R5, #+0]
   \   000000B4   0xF1B0 0x6F00      CMP      R0,#+134217728
   \   000000B8   0xD011             BEQ.N    ??DMA_Init_1
   \   000000BA   0x6828             LDR      R0,[R5, #+0]
   \   000000BC   0xF1B0 0x6F20      CMP      R0,#+167772160
   \   000000C0   0xD00D             BEQ.N    ??DMA_Init_1
   \   000000C2   0x6828             LDR      R0,[R5, #+0]
   \   000000C4   0xF1B0 0x6F40      CMP      R0,#+201326592
   \   000000C8   0xD009             BEQ.N    ??DMA_Init_1
   \   000000CA   0x6828             LDR      R0,[R5, #+0]
   \   000000CC   0xF1B0 0x6F60      CMP      R0,#+234881024
   \   000000D0   0xD005             BEQ.N    ??DMA_Init_1
   \   000000D2   0xF240 0x113D      MOVW     R1,#+317
   \   000000D6   0x.... 0x....      LDR.W    R0,??DataTable6_10
   \   000000DA   0x.... 0x....      BL       assert_failed
    318            assert_param(IS_DMA_DIRECTION(DMA_InitStruct->DMA_DIR));
   \                     ??DMA_Init_1: (+1)
   \   000000DE   0x68E8             LDR      R0,[R5, #+12]
   \   000000E0   0x2800             CMP      R0,#+0
   \   000000E2   0xD00B             BEQ.N    ??DMA_Init_2
   \   000000E4   0x68E8             LDR      R0,[R5, #+12]
   \   000000E6   0x2840             CMP      R0,#+64
   \   000000E8   0xD008             BEQ.N    ??DMA_Init_2
   \   000000EA   0x68E8             LDR      R0,[R5, #+12]
   \   000000EC   0x2880             CMP      R0,#+128
   \   000000EE   0xD005             BEQ.N    ??DMA_Init_2
   \   000000F0   0xF44F 0x719F      MOV      R1,#+318
   \   000000F4   0x.... 0x....      LDR.W    R0,??DataTable6_10
   \   000000F8   0x.... 0x....      BL       assert_failed
    319            assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
   \                     ??DMA_Init_2: (+1)
   \   000000FC   0x6928             LDR      R0,[R5, #+16]
   \   000000FE   0x2800             CMP      R0,#+0
   \   00000100   0xD003             BEQ.N    ??DMA_Init_3
   \   00000102   0x6928             LDR      R0,[R5, #+16]
   \   00000104   0xF5B0 0x3F80      CMP      R0,#+65536
   \   00000108   0xD305             BCC.N    ??DMA_Init_4
   \                     ??DMA_Init_3: (+1)
   \   0000010A   0xF240 0x113F      MOVW     R1,#+319
   \   0000010E   0x.... 0x....      LDR.W    R0,??DataTable6_10
   \   00000112   0x.... 0x....      BL       assert_failed
    320            assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
   \                     ??DMA_Init_4: (+1)
   \   00000116   0x6968             LDR      R0,[R5, #+20]
   \   00000118   0xF5B0 0x7F00      CMP      R0,#+512
   \   0000011C   0xD008             BEQ.N    ??DMA_Init_5
   \   0000011E   0x6968             LDR      R0,[R5, #+20]
   \   00000120   0x2800             CMP      R0,#+0
   \   00000122   0xD005             BEQ.N    ??DMA_Init_5
   \   00000124   0xF44F 0x71A0      MOV      R1,#+320
   \   00000128   0x.... 0x....      LDR.W    R0,??DataTable6_10
   \   0000012C   0x.... 0x....      BL       assert_failed
    321            assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
   \                     ??DMA_Init_5: (+1)
   \   00000130   0x69A8             LDR      R0,[R5, #+24]
   \   00000132   0xF5B0 0x6F80      CMP      R0,#+1024
   \   00000136   0xD008             BEQ.N    ??DMA_Init_6
   \   00000138   0x69A8             LDR      R0,[R5, #+24]
   \   0000013A   0x2800             CMP      R0,#+0
   \   0000013C   0xD005             BEQ.N    ??DMA_Init_6
   \   0000013E   0xF240 0x1141      MOVW     R1,#+321
   \   00000142   0x.... 0x....      LDR.W    R0,??DataTable6_10
   \   00000146   0x.... 0x....      BL       assert_failed
    322            assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
   \                     ??DMA_Init_6: (+1)
   \   0000014A   0x69E8             LDR      R0,[R5, #+28]
   \   0000014C   0x2800             CMP      R0,#+0
   \   0000014E   0xD00D             BEQ.N    ??DMA_Init_7
   \   00000150   0x69E8             LDR      R0,[R5, #+28]
   \   00000152   0xF5B0 0x6F00      CMP      R0,#+2048
   \   00000156   0xD009             BEQ.N    ??DMA_Init_7
   \   00000158   0x69E8             LDR      R0,[R5, #+28]
   \   0000015A   0xF5B0 0x5F80      CMP      R0,#+4096
   \   0000015E   0xD005             BEQ.N    ??DMA_Init_7
   \   00000160   0xF44F 0x71A1      MOV      R1,#+322
   \   00000164   0x.... 0x....      LDR.W    R0,??DataTable6_10
   \   00000168   0x.... 0x....      BL       assert_failed
    323            assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
   \                     ??DMA_Init_7: (+1)
   \   0000016C   0x6A28             LDR      R0,[R5, #+32]
   \   0000016E   0x2800             CMP      R0,#+0
   \   00000170   0xD00D             BEQ.N    ??DMA_Init_8
   \   00000172   0x6A28             LDR      R0,[R5, #+32]
   \   00000174   0xF5B0 0x5F00      CMP      R0,#+8192
   \   00000178   0xD009             BEQ.N    ??DMA_Init_8
   \   0000017A   0x6A28             LDR      R0,[R5, #+32]
   \   0000017C   0xF5B0 0x4F80      CMP      R0,#+16384
   \   00000180   0xD005             BEQ.N    ??DMA_Init_8
   \   00000182   0xF240 0x1143      MOVW     R1,#+323
   \   00000186   0x.... 0x....      LDR.W    R0,??DataTable6_10
   \   0000018A   0x.... 0x....      BL       assert_failed
    324            assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
   \                     ??DMA_Init_8: (+1)
   \   0000018E   0x6A68             LDR      R0,[R5, #+36]
   \   00000190   0x2800             CMP      R0,#+0
   \   00000192   0xD009             BEQ.N    ??DMA_Init_9
   \   00000194   0x6A68             LDR      R0,[R5, #+36]
   \   00000196   0xF5B0 0x7F80      CMP      R0,#+256
   \   0000019A   0xD005             BEQ.N    ??DMA_Init_9
   \   0000019C   0xF44F 0x71A2      MOV      R1,#+324
   \   000001A0   0x.... 0x....      LDR.W    R0,??DataTable6_10
   \   000001A4   0x.... 0x....      BL       assert_failed
    325            assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
   \                     ??DMA_Init_9: (+1)
   \   000001A8   0x6AA8             LDR      R0,[R5, #+40]
   \   000001AA   0x2800             CMP      R0,#+0
   \   000001AC   0xD011             BEQ.N    ??DMA_Init_10
   \   000001AE   0x6AA8             LDR      R0,[R5, #+40]
   \   000001B0   0xF5B0 0x3F80      CMP      R0,#+65536
   \   000001B4   0xD00D             BEQ.N    ??DMA_Init_10
   \   000001B6   0x6AA8             LDR      R0,[R5, #+40]
   \   000001B8   0xF5B0 0x3F00      CMP      R0,#+131072
   \   000001BC   0xD009             BEQ.N    ??DMA_Init_10
   \   000001BE   0x6AA8             LDR      R0,[R5, #+40]
   \   000001C0   0xF5B0 0x3F40      CMP      R0,#+196608
   \   000001C4   0xD005             BEQ.N    ??DMA_Init_10
   \   000001C6   0xF240 0x1145      MOVW     R1,#+325
   \   000001CA   0x.... 0x....      LDR.W    R0,??DataTable6_10
   \   000001CE   0x.... 0x....      BL       assert_failed
    326            assert_param(IS_DMA_FIFO_MODE_STATE(DMA_InitStruct->DMA_FIFOMode));
   \                     ??DMA_Init_10: (+1)
   \   000001D2   0x6AE8             LDR      R0,[R5, #+44]
   \   000001D4   0x2800             CMP      R0,#+0
   \   000001D6   0xD008             BEQ.N    ??DMA_Init_11
   \   000001D8   0x6AE8             LDR      R0,[R5, #+44]
   \   000001DA   0x2804             CMP      R0,#+4
   \   000001DC   0xD005             BEQ.N    ??DMA_Init_11
   \   000001DE   0xF44F 0x71A3      MOV      R1,#+326
   \   000001E2   0x.... 0x....      LDR.W    R0,??DataTable6_10
   \   000001E6   0x.... 0x....      BL       assert_failed
    327            assert_param(IS_DMA_FIFO_THRESHOLD(DMA_InitStruct->DMA_FIFOThreshold));
   \                     ??DMA_Init_11: (+1)
   \   000001EA   0x6B28             LDR      R0,[R5, #+48]
   \   000001EC   0x2800             CMP      R0,#+0
   \   000001EE   0xD00E             BEQ.N    ??DMA_Init_12
   \   000001F0   0x6B28             LDR      R0,[R5, #+48]
   \   000001F2   0x2801             CMP      R0,#+1
   \   000001F4   0xD00B             BEQ.N    ??DMA_Init_12
   \   000001F6   0x6B28             LDR      R0,[R5, #+48]
   \   000001F8   0x2802             CMP      R0,#+2
   \   000001FA   0xD008             BEQ.N    ??DMA_Init_12
   \   000001FC   0x6B28             LDR      R0,[R5, #+48]
   \   000001FE   0x2803             CMP      R0,#+3
   \   00000200   0xD005             BEQ.N    ??DMA_Init_12
   \   00000202   0xF240 0x1147      MOVW     R1,#+327
   \   00000206   0x.... 0x....      LDR.W    R0,??DataTable6_10
   \   0000020A   0x.... 0x....      BL       assert_failed
    328            assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
   \                     ??DMA_Init_12: (+1)
   \   0000020E   0x6B68             LDR      R0,[R5, #+52]
   \   00000210   0x2800             CMP      R0,#+0
   \   00000212   0xD011             BEQ.N    ??DMA_Init_13
   \   00000214   0x6B68             LDR      R0,[R5, #+52]
   \   00000216   0xF5B0 0x0F00      CMP      R0,#+8388608
   \   0000021A   0xD00D             BEQ.N    ??DMA_Init_13
   \   0000021C   0x6B68             LDR      R0,[R5, #+52]
   \   0000021E   0xF1B0 0x7F80      CMP      R0,#+16777216
   \   00000222   0xD009             BEQ.N    ??DMA_Init_13
   \   00000224   0x6B68             LDR      R0,[R5, #+52]
   \   00000226   0xF1B0 0x7FC0      CMP      R0,#+25165824
   \   0000022A   0xD005             BEQ.N    ??DMA_Init_13
   \   0000022C   0xF44F 0x71A4      MOV      R1,#+328
   \   00000230   0x.... 0x....      LDR.W    R0,??DataTable6_10
   \   00000234   0x.... 0x....      BL       assert_failed
    329            assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));
   \                     ??DMA_Init_13: (+1)
   \   00000238   0x6BA8             LDR      R0,[R5, #+56]
   \   0000023A   0x2800             CMP      R0,#+0
   \   0000023C   0xD011             BEQ.N    ??DMA_Init_14
   \   0000023E   0x6BA8             LDR      R0,[R5, #+56]
   \   00000240   0xF5B0 0x1F00      CMP      R0,#+2097152
   \   00000244   0xD00D             BEQ.N    ??DMA_Init_14
   \   00000246   0x6BA8             LDR      R0,[R5, #+56]
   \   00000248   0xF5B0 0x0F80      CMP      R0,#+4194304
   \   0000024C   0xD009             BEQ.N    ??DMA_Init_14
   \   0000024E   0x6BA8             LDR      R0,[R5, #+56]
   \   00000250   0xF5B0 0x0FC0      CMP      R0,#+6291456
   \   00000254   0xD005             BEQ.N    ??DMA_Init_14
   \   00000256   0xF240 0x1149      MOVW     R1,#+329
   \   0000025A   0x.... 0x....      LDR.W    R0,??DataTable6_10
   \   0000025E   0x.... 0x....      BL       assert_failed
    330          
    331            /*------------------------- DMAy Streamx CR Configuration ------------------*/
    332            /* Get the DMAy_Streamx CR value */
    333            tmpreg = DMAy_Streamx->CR;
   \                     ??DMA_Init_14: (+1)
   \   00000262   0x6820             LDR      R0,[R4, #+0]
   \   00000264   0x0006             MOVS     R6,R0
    334          
    335            /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
    336            tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
    337                                   DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | \
    338                                   DMA_SxCR_MINC | DMA_SxCR_PINC | DMA_SxCR_CIRC | \
    339                                   DMA_SxCR_DIR));
   \   00000266   0x.... 0x....      LDR.W    R0,??DataTable14  ;; 0xf01c803f
   \   0000026A   0x4006             ANDS     R6,R0,R6
    340          
    341            /* Configure DMAy Streamx: */
    342            /* Set CHSEL bits according to DMA_CHSEL value */
    343            /* Set DIR bits according to DMA_DIR value */
    344            /* Set PINC bit according to DMA_PeripheralInc value */
    345            /* Set MINC bit according to DMA_MemoryInc value */
    346            /* Set PSIZE bits according to DMA_PeripheralDataSize value */
    347            /* Set MSIZE bits according to DMA_MemoryDataSize value */
    348            /* Set CIRC bit according to DMA_Mode value */
    349            /* Set PL bits according to DMA_Priority value */
    350            /* Set MBURST bits according to DMA_MemoryBurst value */
    351            /* Set PBURST bits according to DMA_PeripheralBurst value */
    352            tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
    353                      DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
    354                      DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
    355                      DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
    356                      DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
   \   0000026C   0x6828             LDR      R0,[R5, #+0]
   \   0000026E   0x68E9             LDR      R1,[R5, #+12]
   \   00000270   0x4308             ORRS     R0,R1,R0
   \   00000272   0x6969             LDR      R1,[R5, #+20]
   \   00000274   0x4308             ORRS     R0,R1,R0
   \   00000276   0x69A9             LDR      R1,[R5, #+24]
   \   00000278   0x4308             ORRS     R0,R1,R0
   \   0000027A   0x69E9             LDR      R1,[R5, #+28]
   \   0000027C   0x4308             ORRS     R0,R1,R0
   \   0000027E   0x6A29             LDR      R1,[R5, #+32]
   \   00000280   0x4308             ORRS     R0,R1,R0
   \   00000282   0x6A69             LDR      R1,[R5, #+36]
   \   00000284   0x4308             ORRS     R0,R1,R0
   \   00000286   0x6AA9             LDR      R1,[R5, #+40]
   \   00000288   0x4308             ORRS     R0,R1,R0
   \   0000028A   0x6B69             LDR      R1,[R5, #+52]
   \   0000028C   0x4308             ORRS     R0,R1,R0
   \   0000028E   0x6BA9             LDR      R1,[R5, #+56]
   \   00000290   0x4308             ORRS     R0,R1,R0
   \   00000292   0x4306             ORRS     R6,R0,R6
    357          
    358            /* Write to DMAy Streamx CR register */
    359            DMAy_Streamx->CR = tmpreg;
   \   00000294   0x6026             STR      R6,[R4, #+0]
    360          
    361            /*------------------------- DMAy Streamx FCR Configuration -----------------*/
    362            /* Get the DMAy_Streamx FCR value */
    363            tmpreg = DMAy_Streamx->FCR;
   \   00000296   0x6960             LDR      R0,[R4, #+20]
   \   00000298   0x0006             MOVS     R6,R0
    364          
    365            /* Clear DMDIS and FTH bits */
    366            tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
   \   0000029A   0x08F6             LSRS     R6,R6,#+3
   \   0000029C   0x00F6             LSLS     R6,R6,#+3
    367          
    368            /* Configure DMAy Streamx FIFO: 
    369              Set DMDIS bits according to DMA_FIFOMode value 
    370              Set FTH bits according to DMA_FIFOThreshold value */
    371            tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
   \   0000029E   0x6AE8             LDR      R0,[R5, #+44]
   \   000002A0   0x6B29             LDR      R1,[R5, #+48]
   \   000002A2   0x4308             ORRS     R0,R1,R0
   \   000002A4   0x4306             ORRS     R6,R0,R6
    372          
    373            /* Write to DMAy Streamx CR */
    374            DMAy_Streamx->FCR = tmpreg;
   \   000002A6   0x6166             STR      R6,[R4, #+20]
    375          
    376            /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
    377            /* Write to DMAy Streamx NDTR register */
    378            DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
   \   000002A8   0x6928             LDR      R0,[R5, #+16]
   \   000002AA   0x6060             STR      R0,[R4, #+4]
    379          
    380            /*------------------------- DMAy Streamx PAR Configuration -----------------*/
    381            /* Write to DMAy Streamx PAR */
    382            DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
   \   000002AC   0x6868             LDR      R0,[R5, #+4]
   \   000002AE   0x60A0             STR      R0,[R4, #+8]
    383          
    384            /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
    385            /* Write to DMAy Streamx M0AR */
    386            DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
   \   000002B0   0x68A8             LDR      R0,[R5, #+8]
   \   000002B2   0x60E0             STR      R0,[R4, #+12]
    387          }
   \   000002B4   0xBD70             POP      {R4-R6,PC}       ;; return
    388          
    389          /**
    390            * @brief  Fills each DMA_InitStruct member with its default value.
    391            * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
    392            *         be initialized.
    393            * @retval None
    394            */

   \                                 In section .text, align 2, keep-with-next
    395          void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
    396          {
    397            /*-------------- Reset DMA init structure parameters values ----------------*/
    398            /* Initialize the DMA_Channel member */
    399            DMA_InitStruct->DMA_Channel = 0;
   \                     DMA_StructInit: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x6001             STR      R1,[R0, #+0]
    400          
    401            /* Initialize the DMA_PeripheralBaseAddr member */
    402            DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x6041             STR      R1,[R0, #+4]
    403          
    404            /* Initialize the DMA_Memory0BaseAddr member */
    405            DMA_InitStruct->DMA_Memory0BaseAddr = 0;
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x6081             STR      R1,[R0, #+8]
    406          
    407            /* Initialize the DMA_DIR member */
    408            DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x60C1             STR      R1,[R0, #+12]
    409          
    410            /* Initialize the DMA_BufferSize member */
    411            DMA_InitStruct->DMA_BufferSize = 0;
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x6101             STR      R1,[R0, #+16]
    412          
    413            /* Initialize the DMA_PeripheralInc member */
    414            DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x6141             STR      R1,[R0, #+20]
    415          
    416            /* Initialize the DMA_MemoryInc member */
    417            DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x6181             STR      R1,[R0, #+24]
    418          
    419            /* Initialize the DMA_PeripheralDataSize member */
    420            DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x61C1             STR      R1,[R0, #+28]
    421          
    422            /* Initialize the DMA_MemoryDataSize member */
    423            DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x6201             STR      R1,[R0, #+32]
    424          
    425            /* Initialize the DMA_Mode member */
    426            DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
   \   00000024   0x2100             MOVS     R1,#+0
   \   00000026   0x6241             STR      R1,[R0, #+36]
    427          
    428            /* Initialize the DMA_Priority member */
    429            DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x6281             STR      R1,[R0, #+40]
    430          
    431            /* Initialize the DMA_FIFOMode member */
    432            DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0x62C1             STR      R1,[R0, #+44]
    433          
    434            /* Initialize the DMA_FIFOThreshold member */
    435            DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x6301             STR      R1,[R0, #+48]
    436          
    437            /* Initialize the DMA_MemoryBurst member */
    438            DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0x6341             STR      R1,[R0, #+52]
    439          
    440            /* Initialize the DMA_PeripheralBurst member */
    441            DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
   \   00000038   0x2100             MOVS     R1,#+0
   \   0000003A   0x6381             STR      R1,[R0, #+56]
    442          }
   \   0000003C   0x4770             BX       LR               ;; return
    443          
    444          /**
    445            * @brief  Enables or disables the specified DMAy Streamx.
    446            * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
    447            *         to 7 to select the DMA Stream.
    448            * @param  NewState: new state of the DMAy Streamx. 
    449            *          This parameter can be: ENABLE or DISABLE.
    450            *
    451            * @note  This function may be used to perform Pause-Resume operation. When a
    452            *        transfer is ongoing, calling this function to disable the Stream will
    453            *        cause the transfer to be paused. All configuration registers and the
    454            *        number of remaining data will be preserved. When calling again this
    455            *        function to re-enable the Stream, the transfer will be resumed from
    456            *        the point where it was paused.          
    457            *    
    458            * @note  After configuring the DMA Stream (DMA_Init() function) and enabling the
    459            *        stream, it is recommended to check (or wait until) the DMA Stream is
    460            *        effectively enabled. A Stream may remain disabled if a configuration 
    461            *        parameter is wrong.
    462            *        After disabling a DMA Stream, it is also recommended to check (or wait
    463            *        until) the DMA Stream is effectively disabled. If a Stream is disabled 
    464            *        while a data transfer is ongoing, the current data will be transferred
    465            *        and the Stream will be effectively disabled only after the transfer of
    466            *        this single data is finished.            
    467            *    
    468            * @retval None
    469            */

   \                                 In section .text, align 2, keep-with-next
    470          void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
    471          {
   \                     DMA_Cmd: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    472            /* Check the parameters */
    473            assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable6  ;; 0x40026010
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD040             BEQ.N    ??DMA_Cmd_0
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable6_1  ;; 0x40026028
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD03C             BEQ.N    ??DMA_Cmd_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable6_2  ;; 0x40026040
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD038             BEQ.N    ??DMA_Cmd_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable6_3  ;; 0x40026058
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD034             BEQ.N    ??DMA_Cmd_0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable6_4  ;; 0x40026070
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD030             BEQ.N    ??DMA_Cmd_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable6_5  ;; 0x40026088
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD02C             BEQ.N    ??DMA_Cmd_0
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable6_6  ;; 0x400260a0
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD028             BEQ.N    ??DMA_Cmd_0
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable6_7  ;; 0x400260b8
   \   00000042   0x4284             CMP      R4,R0
   \   00000044   0xD024             BEQ.N    ??DMA_Cmd_0
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable6_8  ;; 0x40026410
   \   0000004A   0x4284             CMP      R4,R0
   \   0000004C   0xD020             BEQ.N    ??DMA_Cmd_0
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable6_9  ;; 0x40026428
   \   00000052   0x4284             CMP      R4,R0
   \   00000054   0xD01C             BEQ.N    ??DMA_Cmd_0
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable7  ;; 0x40026440
   \   0000005A   0x4284             CMP      R4,R0
   \   0000005C   0xD018             BEQ.N    ??DMA_Cmd_0
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable7_1  ;; 0x40026458
   \   00000062   0x4284             CMP      R4,R0
   \   00000064   0xD014             BEQ.N    ??DMA_Cmd_0
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable7_2  ;; 0x40026470
   \   0000006A   0x4284             CMP      R4,R0
   \   0000006C   0xD010             BEQ.N    ??DMA_Cmd_0
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable7_3  ;; 0x40026488
   \   00000072   0x4284             CMP      R4,R0
   \   00000074   0xD00C             BEQ.N    ??DMA_Cmd_0
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable7_4  ;; 0x400264a0
   \   0000007A   0x4284             CMP      R4,R0
   \   0000007C   0xD008             BEQ.N    ??DMA_Cmd_0
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable7_5  ;; 0x400264b8
   \   00000082   0x4284             CMP      R4,R0
   \   00000084   0xD004             BEQ.N    ??DMA_Cmd_0
   \   00000086   0xF240 0x11D9      MOVW     R1,#+473
   \   0000008A   0x....             LDR.N    R0,??DataTable6_10
   \   0000008C   0x.... 0x....      BL       assert_failed
    474            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \                     ??DMA_Cmd_0: (+1)
   \   00000090   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000092   0x2D00             CMP      R5,#+0
   \   00000094   0xD007             BEQ.N    ??DMA_Cmd_1
   \   00000096   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000098   0x2D01             CMP      R5,#+1
   \   0000009A   0xD004             BEQ.N    ??DMA_Cmd_1
   \   0000009C   0xF44F 0x71ED      MOV      R1,#+474
   \   000000A0   0x....             LDR.N    R0,??DataTable6_10
   \   000000A2   0x.... 0x....      BL       assert_failed
    475          
    476            if (NewState != DISABLE)
   \                     ??DMA_Cmd_1: (+1)
   \   000000A6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000A8   0x2D00             CMP      R5,#+0
   \   000000AA   0xD004             BEQ.N    ??DMA_Cmd_2
    477            {
    478              /* Enable the selected DMAy Streamx by setting EN bit */
    479              DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
   \   000000AC   0x6820             LDR      R0,[R4, #+0]
   \   000000AE   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000B2   0x6020             STR      R0,[R4, #+0]
   \   000000B4   0xE003             B.N      ??DMA_Cmd_3
    480            }
    481            else
    482            {
    483              /* Disable the selected DMAy Streamx by clearing EN bit */
    484              DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
   \                     ??DMA_Cmd_2: (+1)
   \   000000B6   0x6820             LDR      R0,[R4, #+0]
   \   000000B8   0x0840             LSRS     R0,R0,#+1
   \   000000BA   0x0040             LSLS     R0,R0,#+1
   \   000000BC   0x6020             STR      R0,[R4, #+0]
    485            }
    486          }
   \                     ??DMA_Cmd_3: (+1)
   \   000000BE   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    487          
    488          /**
    489            * @brief  Configures, when the PINC (Peripheral Increment address mode) bit is
    490            *         set, if the peripheral address should be incremented with the data 
    491            *         size (configured with PSIZE bits) or by a fixed offset equal to 4
    492            *         (32-bit aligned addresses).
    493            *   
    494            * @note   This function has no effect if the Peripheral Increment mode is disabled.
    495            *     
    496            * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
    497            *          to 7 to select the DMA Stream.
    498            * @param  DMA_Pincos: specifies the Peripheral increment offset size.
    499            *          This parameter can be one of the following values:
    500            *            @arg DMA_PINCOS_Psize: Peripheral address increment is done  
    501            *                                   accordingly to PSIZE parameter.
    502            *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
    503            *                                         fixed to 4 (32-bit aligned addresses). 
    504            * @retval None
    505            */

   \                                 In section .text, align 2, keep-with-next
    506          void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
    507          {
   \                     DMA_PeriphIncOffsetSizeConfig: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    508            /* Check the parameters */
    509            assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
   \   00000006   0x....             LDR.N    R0,??DataTable6  ;; 0x40026010
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD032             BEQ.N    ??DMA_PeriphIncOffsetSizeConfig_0
   \   0000000C   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40026028
   \   0000000E   0x4284             CMP      R4,R0
   \   00000010   0xD02F             BEQ.N    ??DMA_PeriphIncOffsetSizeConfig_0
   \   00000012   0x....             LDR.N    R0,??DataTable6_2  ;; 0x40026040
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD02C             BEQ.N    ??DMA_PeriphIncOffsetSizeConfig_0
   \   00000018   0x....             LDR.N    R0,??DataTable6_3  ;; 0x40026058
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD029             BEQ.N    ??DMA_PeriphIncOffsetSizeConfig_0
   \   0000001E   0x....             LDR.N    R0,??DataTable6_4  ;; 0x40026070
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD026             BEQ.N    ??DMA_PeriphIncOffsetSizeConfig_0
   \   00000024   0x....             LDR.N    R0,??DataTable6_5  ;; 0x40026088
   \   00000026   0x4284             CMP      R4,R0
   \   00000028   0xD023             BEQ.N    ??DMA_PeriphIncOffsetSizeConfig_0
   \   0000002A   0x....             LDR.N    R0,??DataTable6_6  ;; 0x400260a0
   \   0000002C   0x4284             CMP      R4,R0
   \   0000002E   0xD020             BEQ.N    ??DMA_PeriphIncOffsetSizeConfig_0
   \   00000030   0x....             LDR.N    R0,??DataTable6_7  ;; 0x400260b8
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD01D             BEQ.N    ??DMA_PeriphIncOffsetSizeConfig_0
   \   00000036   0x....             LDR.N    R0,??DataTable6_8  ;; 0x40026410
   \   00000038   0x4284             CMP      R4,R0
   \   0000003A   0xD01A             BEQ.N    ??DMA_PeriphIncOffsetSizeConfig_0
   \   0000003C   0x....             LDR.N    R0,??DataTable6_9  ;; 0x40026428
   \   0000003E   0x4284             CMP      R4,R0
   \   00000040   0xD017             BEQ.N    ??DMA_PeriphIncOffsetSizeConfig_0
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable7  ;; 0x40026440
   \   00000046   0x4284             CMP      R4,R0
   \   00000048   0xD013             BEQ.N    ??DMA_PeriphIncOffsetSizeConfig_0
   \   0000004A   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40026458
   \   0000004C   0x4284             CMP      R4,R0
   \   0000004E   0xD010             BEQ.N    ??DMA_PeriphIncOffsetSizeConfig_0
   \   00000050   0x....             LDR.N    R0,??DataTable7_2  ;; 0x40026470
   \   00000052   0x4284             CMP      R4,R0
   \   00000054   0xD00D             BEQ.N    ??DMA_PeriphIncOffsetSizeConfig_0
   \   00000056   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40026488
   \   00000058   0x4284             CMP      R4,R0
   \   0000005A   0xD00A             BEQ.N    ??DMA_PeriphIncOffsetSizeConfig_0
   \   0000005C   0x....             LDR.N    R0,??DataTable7_4  ;; 0x400264a0
   \   0000005E   0x4284             CMP      R4,R0
   \   00000060   0xD007             BEQ.N    ??DMA_PeriphIncOffsetSizeConfig_0
   \   00000062   0x....             LDR.N    R0,??DataTable7_5  ;; 0x400264b8
   \   00000064   0x4284             CMP      R4,R0
   \   00000066   0xD004             BEQ.N    ??DMA_PeriphIncOffsetSizeConfig_0
   \   00000068   0xF240 0x11FD      MOVW     R1,#+509
   \   0000006C   0x....             LDR.N    R0,??DataTable6_10
   \   0000006E   0x.... 0x....      BL       assert_failed
    510            assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));
   \                     ??DMA_PeriphIncOffsetSizeConfig_0: (+1)
   \   00000072   0x2D00             CMP      R5,#+0
   \   00000074   0xD007             BEQ.N    ??DMA_PeriphIncOffsetSizeConfig_1
   \   00000076   0xF5B5 0x4F00      CMP      R5,#+32768
   \   0000007A   0xD004             BEQ.N    ??DMA_PeriphIncOffsetSizeConfig_1
   \   0000007C   0xF44F 0x71FF      MOV      R1,#+510
   \   00000080   0x....             LDR.N    R0,??DataTable6_10
   \   00000082   0x.... 0x....      BL       assert_failed
    511          
    512            /* Check the needed Peripheral increment offset */
    513            if(DMA_Pincos != DMA_PINCOS_Psize)
   \                     ??DMA_PeriphIncOffsetSizeConfig_1: (+1)
   \   00000086   0x2D00             CMP      R5,#+0
   \   00000088   0xD004             BEQ.N    ??DMA_PeriphIncOffsetSizeConfig_2
    514            {
    515              /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    516              DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
   \   0000008A   0x6820             LDR      R0,[R4, #+0]
   \   0000008C   0xF450 0x4000      ORRS     R0,R0,#0x8000
   \   00000090   0x6020             STR      R0,[R4, #+0]
   \   00000092   0xE003             B.N      ??DMA_PeriphIncOffsetSizeConfig_3
    517            }
    518            else
    519            {
    520              /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    521              DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
   \                     ??DMA_PeriphIncOffsetSizeConfig_2: (+1)
   \   00000094   0x6820             LDR      R0,[R4, #+0]
   \   00000096   0xF430 0x4000      BICS     R0,R0,#0x8000
   \   0000009A   0x6020             STR      R0,[R4, #+0]
    522            }
    523          }
   \                     ??DMA_PeriphIncOffsetSizeConfig_3: (+1)
   \   0000009C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    524          
    525          /**
    526            * @brief  Configures, when the DMAy Streamx is disabled, the flow controller for
    527            *         the next transactions (Peripheral or Memory).
    528            *       
    529            * @note   Before enabling this feature, check if the used peripheral supports 
    530            *         the Flow Controller mode or not.    
    531            *  
    532            * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
    533            *          to 7 to select the DMA Stream.
    534            * @param  DMA_FlowCtrl: specifies the DMA flow controller.
    535            *          This parameter can be one of the following values:
    536            *            @arg DMA_FlowCtrl_Memory: DMAy_Streamx transactions flow controller is 
    537            *                                      the DMA controller.
    538            *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
    539            *                                          is the peripheral.    
    540            * @retval None
    541            */

   \                                 In section .text, align 2, keep-with-next
    542          void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
    543          {
   \                     DMA_FlowControllerConfig: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    544            /* Check the parameters */
    545            assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
   \   00000006   0x....             LDR.N    R0,??DataTable6  ;; 0x40026010
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD031             BEQ.N    ??DMA_FlowControllerConfig_0
   \   0000000C   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40026028
   \   0000000E   0x4284             CMP      R4,R0
   \   00000010   0xD02E             BEQ.N    ??DMA_FlowControllerConfig_0
   \   00000012   0x....             LDR.N    R0,??DataTable6_2  ;; 0x40026040
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD02B             BEQ.N    ??DMA_FlowControllerConfig_0
   \   00000018   0x....             LDR.N    R0,??DataTable6_3  ;; 0x40026058
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD028             BEQ.N    ??DMA_FlowControllerConfig_0
   \   0000001E   0x....             LDR.N    R0,??DataTable6_4  ;; 0x40026070
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD025             BEQ.N    ??DMA_FlowControllerConfig_0
   \   00000024   0x....             LDR.N    R0,??DataTable6_5  ;; 0x40026088
   \   00000026   0x4284             CMP      R4,R0
   \   00000028   0xD022             BEQ.N    ??DMA_FlowControllerConfig_0
   \   0000002A   0x....             LDR.N    R0,??DataTable6_6  ;; 0x400260a0
   \   0000002C   0x4284             CMP      R4,R0
   \   0000002E   0xD01F             BEQ.N    ??DMA_FlowControllerConfig_0
   \   00000030   0x....             LDR.N    R0,??DataTable6_7  ;; 0x400260b8
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD01C             BEQ.N    ??DMA_FlowControllerConfig_0
   \   00000036   0x....             LDR.N    R0,??DataTable6_8  ;; 0x40026410
   \   00000038   0x4284             CMP      R4,R0
   \   0000003A   0xD019             BEQ.N    ??DMA_FlowControllerConfig_0
   \   0000003C   0x....             LDR.N    R0,??DataTable6_9  ;; 0x40026428
   \   0000003E   0x4284             CMP      R4,R0
   \   00000040   0xD016             BEQ.N    ??DMA_FlowControllerConfig_0
   \   00000042   0x....             LDR.N    R0,??DataTable7  ;; 0x40026440
   \   00000044   0x4284             CMP      R4,R0
   \   00000046   0xD013             BEQ.N    ??DMA_FlowControllerConfig_0
   \   00000048   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40026458
   \   0000004A   0x4284             CMP      R4,R0
   \   0000004C   0xD010             BEQ.N    ??DMA_FlowControllerConfig_0
   \   0000004E   0x....             LDR.N    R0,??DataTable7_2  ;; 0x40026470
   \   00000050   0x4284             CMP      R4,R0
   \   00000052   0xD00D             BEQ.N    ??DMA_FlowControllerConfig_0
   \   00000054   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40026488
   \   00000056   0x4284             CMP      R4,R0
   \   00000058   0xD00A             BEQ.N    ??DMA_FlowControllerConfig_0
   \   0000005A   0x....             LDR.N    R0,??DataTable7_4  ;; 0x400264a0
   \   0000005C   0x4284             CMP      R4,R0
   \   0000005E   0xD007             BEQ.N    ??DMA_FlowControllerConfig_0
   \   00000060   0x....             LDR.N    R0,??DataTable7_5  ;; 0x400264b8
   \   00000062   0x4284             CMP      R4,R0
   \   00000064   0xD004             BEQ.N    ??DMA_FlowControllerConfig_0
   \   00000066   0xF240 0x2121      MOVW     R1,#+545
   \   0000006A   0x....             LDR.N    R0,??DataTable6_10
   \   0000006C   0x.... 0x....      BL       assert_failed
    546            assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));
   \                     ??DMA_FlowControllerConfig_0: (+1)
   \   00000070   0x2D00             CMP      R5,#+0
   \   00000072   0xD006             BEQ.N    ??DMA_FlowControllerConfig_1
   \   00000074   0x2D20             CMP      R5,#+32
   \   00000076   0xD004             BEQ.N    ??DMA_FlowControllerConfig_1
   \   00000078   0xF240 0x2122      MOVW     R1,#+546
   \   0000007C   0x....             LDR.N    R0,??DataTable6_10
   \   0000007E   0x.... 0x....      BL       assert_failed
    547          
    548            /* Check the needed flow controller  */
    549            if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
   \                     ??DMA_FlowControllerConfig_1: (+1)
   \   00000082   0x2D00             CMP      R5,#+0
   \   00000084   0xD004             BEQ.N    ??DMA_FlowControllerConfig_2
    550            {
    551              /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    552              DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
   \   00000086   0x6820             LDR      R0,[R4, #+0]
   \   00000088   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   0000008C   0x6020             STR      R0,[R4, #+0]
   \   0000008E   0xE003             B.N      ??DMA_FlowControllerConfig_3
    553            }
    554            else
    555            {
    556              /* Clear the PFCTRL bit: Memory is the flow controller */
    557              DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
   \                     ??DMA_FlowControllerConfig_2: (+1)
   \   00000090   0x6820             LDR      R0,[R4, #+0]
   \   00000092   0xF030 0x0020      BICS     R0,R0,#0x20
   \   00000096   0x6020             STR      R0,[R4, #+0]
    558            }
    559          }
   \                     ??DMA_FlowControllerConfig_3: (+1)
   \   00000098   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    560          /**
    561            * @}
    562            */
    563          
    564          /** @defgroup DMA_Group2 Data Counter functions
    565           *  @brief   Data Counter functions 
    566           *
    567          @verbatim   
    568           ===============================================================================
    569                                     Data Counter functions
    570           ===============================================================================  
    571          
    572            This subsection provides function allowing to configure and read the buffer size
    573            (number of data to be transferred). 
    574          
    575            The DMA data counter can be written only when the DMA Stream is disabled 
    576            (ie. after transfer complete event).
    577          
    578            The following function can be used to write the Stream data counter value:
    579              - void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter);
    580          
    581          @note It is advised to use this function rather than DMA_Init() in situations where
    582                only the Data buffer needs to be reloaded.
    583          
    584          @note If the Source and Destination Data Sizes are different, then the value written in
    585                data counter, expressing the number of transfers, is relative to the number of 
    586                transfers from the Peripheral point of view.
    587                ie. If Memory data size is Word, Peripheral data size is Half-Words, then the value
    588                to be configured in the data counter is the number of Half-Words to be transferred
    589                from/to the peripheral.
    590          
    591            The DMA data counter can be read to indicate the number of remaining transfers for
    592            the relative DMA Stream. This counter is decremented at the end of each data 
    593            transfer and when the transfer is complete: 
    594             - If Normal mode is selected: the counter is set to 0.
    595             - If Circular mode is selected: the counter is reloaded with the initial value
    596               (configured before enabling the DMA Stream)
    597             
    598            The following function can be used to read the Stream data counter value:
    599               - uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx);
    600          
    601          @endverbatim
    602            * @{
    603            */
    604          
    605          /**
    606            * @brief  Writes the number of data units to be transferred on the DMAy Streamx.
    607            * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
    608            *          to 7 to select the DMA Stream.
    609            * @param  Counter: Number of data units to be transferred (from 0 to 65535) 
    610            *          Number of data items depends only on the Peripheral data format.
    611            *            
    612            * @note   If Peripheral data format is Bytes: number of data units is equal 
    613            *         to total number of bytes to be transferred.
    614            *           
    615            * @note   If Peripheral data format is Half-Word: number of data units is  
    616            *         equal to total number of bytes to be transferred / 2.
    617            *           
    618            * @note   If Peripheral data format is Word: number of data units is equal 
    619            *         to total  number of bytes to be transferred / 4.
    620            *      
    621            * @note   In Memory-to-Memory transfer mode, the memory buffer pointed by 
    622            *         DMAy_SxPAR register is considered as Peripheral.
    623            *      
    624            * @retval The number of remaining data units in the current DMAy Streamx transfer.
    625            */

   \                                 In section .text, align 2, keep-with-next
    626          void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
    627          {
   \                     DMA_SetCurrDataCounter: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    628            /* Check the parameters */
    629            assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
   \   00000006   0x....             LDR.N    R0,??DataTable6  ;; 0x40026010
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD031             BEQ.N    ??DMA_SetCurrDataCounter_0
   \   0000000C   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40026028
   \   0000000E   0x4284             CMP      R4,R0
   \   00000010   0xD02E             BEQ.N    ??DMA_SetCurrDataCounter_0
   \   00000012   0x....             LDR.N    R0,??DataTable6_2  ;; 0x40026040
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD02B             BEQ.N    ??DMA_SetCurrDataCounter_0
   \   00000018   0x....             LDR.N    R0,??DataTable6_3  ;; 0x40026058
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD028             BEQ.N    ??DMA_SetCurrDataCounter_0
   \   0000001E   0x....             LDR.N    R0,??DataTable6_4  ;; 0x40026070
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD025             BEQ.N    ??DMA_SetCurrDataCounter_0
   \   00000024   0x....             LDR.N    R0,??DataTable6_5  ;; 0x40026088
   \   00000026   0x4284             CMP      R4,R0
   \   00000028   0xD022             BEQ.N    ??DMA_SetCurrDataCounter_0
   \   0000002A   0x....             LDR.N    R0,??DataTable6_6  ;; 0x400260a0
   \   0000002C   0x4284             CMP      R4,R0
   \   0000002E   0xD01F             BEQ.N    ??DMA_SetCurrDataCounter_0
   \   00000030   0x....             LDR.N    R0,??DataTable6_7  ;; 0x400260b8
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD01C             BEQ.N    ??DMA_SetCurrDataCounter_0
   \   00000036   0x....             LDR.N    R0,??DataTable6_8  ;; 0x40026410
   \   00000038   0x4284             CMP      R4,R0
   \   0000003A   0xD019             BEQ.N    ??DMA_SetCurrDataCounter_0
   \   0000003C   0x....             LDR.N    R0,??DataTable6_9  ;; 0x40026428
   \   0000003E   0x4284             CMP      R4,R0
   \   00000040   0xD016             BEQ.N    ??DMA_SetCurrDataCounter_0
   \   00000042   0x....             LDR.N    R0,??DataTable7  ;; 0x40026440
   \   00000044   0x4284             CMP      R4,R0
   \   00000046   0xD013             BEQ.N    ??DMA_SetCurrDataCounter_0
   \   00000048   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40026458
   \   0000004A   0x4284             CMP      R4,R0
   \   0000004C   0xD010             BEQ.N    ??DMA_SetCurrDataCounter_0
   \   0000004E   0x....             LDR.N    R0,??DataTable7_2  ;; 0x40026470
   \   00000050   0x4284             CMP      R4,R0
   \   00000052   0xD00D             BEQ.N    ??DMA_SetCurrDataCounter_0
   \   00000054   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40026488
   \   00000056   0x4284             CMP      R4,R0
   \   00000058   0xD00A             BEQ.N    ??DMA_SetCurrDataCounter_0
   \   0000005A   0x....             LDR.N    R0,??DataTable7_4  ;; 0x400264a0
   \   0000005C   0x4284             CMP      R4,R0
   \   0000005E   0xD007             BEQ.N    ??DMA_SetCurrDataCounter_0
   \   00000060   0x....             LDR.N    R0,??DataTable7_5  ;; 0x400264b8
   \   00000062   0x4284             CMP      R4,R0
   \   00000064   0xD004             BEQ.N    ??DMA_SetCurrDataCounter_0
   \   00000066   0xF240 0x2175      MOVW     R1,#+629
   \   0000006A   0x....             LDR.N    R0,??DataTable6_10
   \   0000006C   0x.... 0x....      BL       assert_failed
    630          
    631            /* Write the number of data units to be transferred */
    632            DMAy_Streamx->NDTR = (uint16_t)Counter;
   \                     ??DMA_SetCurrDataCounter_0: (+1)
   \   00000070   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000072   0x6065             STR      R5,[R4, #+4]
    633          }
   \   00000074   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    634          
    635          /**
    636            * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer.
    637            * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
    638            *          to 7 to select the DMA Stream.
    639            * @retval The number of remaining data units in the current DMAy Streamx transfer.
    640            */

   \                                 In section .text, align 2, keep-with-next
    641          uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
    642          {
   \                     DMA_GetCurrDataCounter: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    643            /* Check the parameters */
    644            assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
   \   00000004   0x....             LDR.N    R0,??DataTable6  ;; 0x40026010
   \   00000006   0x4284             CMP      R4,R0
   \   00000008   0xD032             BEQ.N    ??DMA_GetCurrDataCounter_0
   \   0000000A   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40026028
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD02F             BEQ.N    ??DMA_GetCurrDataCounter_0
   \   00000010   0x....             LDR.N    R0,??DataTable6_2  ;; 0x40026040
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD02C             BEQ.N    ??DMA_GetCurrDataCounter_0
   \   00000016   0x....             LDR.N    R0,??DataTable6_3  ;; 0x40026058
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD029             BEQ.N    ??DMA_GetCurrDataCounter_0
   \   0000001C   0x....             LDR.N    R0,??DataTable6_4  ;; 0x40026070
   \   0000001E   0x4284             CMP      R4,R0
   \   00000020   0xD026             BEQ.N    ??DMA_GetCurrDataCounter_0
   \   00000022   0x....             LDR.N    R0,??DataTable6_5  ;; 0x40026088
   \   00000024   0x4284             CMP      R4,R0
   \   00000026   0xD023             BEQ.N    ??DMA_GetCurrDataCounter_0
   \   00000028   0x....             LDR.N    R0,??DataTable6_6  ;; 0x400260a0
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD020             BEQ.N    ??DMA_GetCurrDataCounter_0
   \   0000002E   0x....             LDR.N    R0,??DataTable6_7  ;; 0x400260b8
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD01D             BEQ.N    ??DMA_GetCurrDataCounter_0
   \   00000034   0x....             LDR.N    R0,??DataTable6_8  ;; 0x40026410
   \   00000036   0x4284             CMP      R4,R0
   \   00000038   0xD01A             BEQ.N    ??DMA_GetCurrDataCounter_0
   \   0000003A   0x....             LDR.N    R0,??DataTable6_9  ;; 0x40026428
   \   0000003C   0x4284             CMP      R4,R0
   \   0000003E   0xD017             BEQ.N    ??DMA_GetCurrDataCounter_0
   \   00000040   0x....             LDR.N    R0,??DataTable7  ;; 0x40026440
   \   00000042   0x4284             CMP      R4,R0
   \   00000044   0xD014             BEQ.N    ??DMA_GetCurrDataCounter_0
   \   00000046   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40026458
   \   00000048   0x4284             CMP      R4,R0
   \   0000004A   0xD011             BEQ.N    ??DMA_GetCurrDataCounter_0
   \   0000004C   0x....             LDR.N    R0,??DataTable7_2  ;; 0x40026470
   \   0000004E   0x4284             CMP      R4,R0
   \   00000050   0xD00E             BEQ.N    ??DMA_GetCurrDataCounter_0
   \   00000052   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40026488
   \   00000054   0x4284             CMP      R4,R0
   \   00000056   0xD00B             BEQ.N    ??DMA_GetCurrDataCounter_0
   \   00000058   0x....             LDR.N    R0,??DataTable7_4  ;; 0x400264a0
   \   0000005A   0x4284             CMP      R4,R0
   \   0000005C   0xD008             BEQ.N    ??DMA_GetCurrDataCounter_0
   \   0000005E   0x....             LDR.N    R0,??DataTable7_5  ;; 0x400264b8
   \   00000060   0x4284             CMP      R4,R0
   \   00000062   0xD005             BEQ.N    ??DMA_GetCurrDataCounter_0
   \   00000064   0xF44F 0x7121      MOV      R1,#+644
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable17
   \   0000006C   0x.... 0x....      BL       assert_failed
    645          
    646            /* Return the number of remaining data units for DMAy Streamx */
    647            return ((uint16_t)(DMAy_Streamx->NDTR));
   \                     ??DMA_GetCurrDataCounter_0: (+1)
   \   00000070   0x6860             LDR      R0,[R4, #+4]
   \   00000072   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000074   0xBD10             POP      {R4,PC}          ;; return
    648          }
    649          /**
    650            * @}
    651            */
    652          
    653          /** @defgroup DMA_Group3 Double Buffer mode functions
    654           *  @brief   Double Buffer mode functions 
    655           *
    656          @verbatim   
    657           ===============================================================================
    658                                   Double Buffer mode functions
    659           ===============================================================================  
    660          
    661            This subsection provides function allowing to configure and control the double 
    662            buffer mode parameters.
    663            
    664            The Double Buffer mode can be used only when Circular mode is enabled.
    665            The Double Buffer mode cannot be used when transferring data from Memory to Memory.
    666            
    667            The Double Buffer mode allows to set two different Memory addresses from/to which
    668            the DMA controller will access alternatively (after completing transfer to/from target
    669            memory 0, it will start transfer to/from target memory 1).
    670            This allows to reduce software overhead for double buffering and reduce the CPU
    671            access time.
    672          
    673            Two functions must be called before calling the DMA_Init() function:
    674             - void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
    675                                          uint32_t DMA_CurrentMemory);
    676             - void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState);
    677             
    678            DMA_DoubleBufferModeConfig() is called to configure the Memory 1 base address and the first
    679            Memory target from/to which the transfer will start after enabling the DMA Stream.
    680            Then DMA_DoubleBufferModeCmd() must be called to enable the Double Buffer mode (or disable 
    681            it when it should not be used).
    682            
    683             
    684            Two functions can be called dynamically when the transfer is ongoing (or when the DMA Stream is 
    685            stopped) to modify on of the target Memories addresses or to check wich Memory target is currently
    686             used:
    687              - void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
    688                                      uint32_t DMA_MemoryTarget);
    689              - uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx);
    690          
    691            DMA_MemoryTargetConfig() can be called to modify the base address of one of the two target Memories.
    692            The Memory of which the base address will be modified must not be currently be used by the DMA Stream
    693            (ie. if the DMA Stream is currently transferring from Memory 1 then you can only modify base address
    694            of target Memory 0 and vice versa).
    695            To check this condition, it is recommended to use the function DMA_GetCurrentMemoryTarget() which
    696            returns the index of the Memory target currently in use by the DMA Stream.
    697          
    698          @endverbatim
    699            * @{
    700            */
    701            
    702          /**
    703            * @brief  Configures, when the DMAy Streamx is disabled, the double buffer mode 
    704            *         and the current memory target.
    705            * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
    706            *          to 7 to select the DMA Stream.
    707            * @param  Memory1BaseAddr: the base address of the second buffer (Memory 1)  
    708            * @param  DMA_CurrentMemory: specifies which memory will be first buffer for
    709            *         the transactions when the Stream will be enabled. 
    710            *          This parameter can be one of the following values:
    711            *            @arg DMA_Memory_0: Memory 0 is the current buffer.
    712            *            @arg DMA_Memory_1: Memory 1 is the current buffer.  
    713            *       
    714            * @note   Memory0BaseAddr is set by the DMA structure configuration in DMA_Init().
    715            *   
    716            * @retval None
    717            */

   \                                 In section .text, align 2, keep-with-next
    718          void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
    719                                          uint32_t DMA_CurrentMemory)
    720          {  
   \                     DMA_DoubleBufferModeConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    721            /* Check the parameters */
    722            assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable14_1  ;; 0x40026010
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD03B             BEQ.N    ??DMA_DoubleBufferModeConfig_0
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable14_2  ;; 0x40026028
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD037             BEQ.N    ??DMA_DoubleBufferModeConfig_0
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable14_3  ;; 0x40026040
   \   0000001C   0x4284             CMP      R4,R0
   \   0000001E   0xD033             BEQ.N    ??DMA_DoubleBufferModeConfig_0
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable14_4  ;; 0x40026058
   \   00000024   0x4284             CMP      R4,R0
   \   00000026   0xD02F             BEQ.N    ??DMA_DoubleBufferModeConfig_0
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable14_5  ;; 0x40026070
   \   0000002C   0x4284             CMP      R4,R0
   \   0000002E   0xD02B             BEQ.N    ??DMA_DoubleBufferModeConfig_0
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable14_6  ;; 0x40026088
   \   00000034   0x4284             CMP      R4,R0
   \   00000036   0xD027             BEQ.N    ??DMA_DoubleBufferModeConfig_0
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable14_7  ;; 0x400260a0
   \   0000003C   0x4284             CMP      R4,R0
   \   0000003E   0xD023             BEQ.N    ??DMA_DoubleBufferModeConfig_0
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable14_8  ;; 0x400260b8
   \   00000044   0x4284             CMP      R4,R0
   \   00000046   0xD01F             BEQ.N    ??DMA_DoubleBufferModeConfig_0
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable14_9  ;; 0x40026410
   \   0000004C   0x4284             CMP      R4,R0
   \   0000004E   0xD01B             BEQ.N    ??DMA_DoubleBufferModeConfig_0
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable14_10  ;; 0x40026428
   \   00000054   0x4284             CMP      R4,R0
   \   00000056   0xD017             BEQ.N    ??DMA_DoubleBufferModeConfig_0
   \   00000058   0x....             LDR.N    R0,??DataTable7  ;; 0x40026440
   \   0000005A   0x4284             CMP      R4,R0
   \   0000005C   0xD014             BEQ.N    ??DMA_DoubleBufferModeConfig_0
   \   0000005E   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40026458
   \   00000060   0x4284             CMP      R4,R0
   \   00000062   0xD011             BEQ.N    ??DMA_DoubleBufferModeConfig_0
   \   00000064   0x....             LDR.N    R0,??DataTable7_2  ;; 0x40026470
   \   00000066   0x4284             CMP      R4,R0
   \   00000068   0xD00E             BEQ.N    ??DMA_DoubleBufferModeConfig_0
   \   0000006A   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40026488
   \   0000006C   0x4284             CMP      R4,R0
   \   0000006E   0xD00B             BEQ.N    ??DMA_DoubleBufferModeConfig_0
   \   00000070   0x....             LDR.N    R0,??DataTable7_4  ;; 0x400264a0
   \   00000072   0x4284             CMP      R4,R0
   \   00000074   0xD008             BEQ.N    ??DMA_DoubleBufferModeConfig_0
   \   00000076   0x....             LDR.N    R0,??DataTable7_5  ;; 0x400264b8
   \   00000078   0x4284             CMP      R4,R0
   \   0000007A   0xD005             BEQ.N    ??DMA_DoubleBufferModeConfig_0
   \   0000007C   0xF240 0x21D2      MOVW     R1,#+722
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable17
   \   00000084   0x.... 0x....      BL       assert_failed
    723            assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));
   \                     ??DMA_DoubleBufferModeConfig_0: (+1)
   \   00000088   0x2E00             CMP      R6,#+0
   \   0000008A   0xD008             BEQ.N    ??DMA_DoubleBufferModeConfig_1
   \   0000008C   0xF5B6 0x2F00      CMP      R6,#+524288
   \   00000090   0xD005             BEQ.N    ??DMA_DoubleBufferModeConfig_1
   \   00000092   0xF240 0x21D3      MOVW     R1,#+723
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable17
   \   0000009A   0x.... 0x....      BL       assert_failed
    724          
    725            if (DMA_CurrentMemory != DMA_Memory_0)
   \                     ??DMA_DoubleBufferModeConfig_1: (+1)
   \   0000009E   0x2E00             CMP      R6,#+0
   \   000000A0   0xD004             BEQ.N    ??DMA_DoubleBufferModeConfig_2
    726            {
    727              /* Set Memory 1 as current memory address */
    728              DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
   \   000000A2   0x6820             LDR      R0,[R4, #+0]
   \   000000A4   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   000000A8   0x6020             STR      R0,[R4, #+0]
   \   000000AA   0xE003             B.N      ??DMA_DoubleBufferModeConfig_3
    729            }
    730            else
    731            {
    732              /* Set Memory 0 as current memory address */
    733              DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
   \                     ??DMA_DoubleBufferModeConfig_2: (+1)
   \   000000AC   0x6820             LDR      R0,[R4, #+0]
   \   000000AE   0xF430 0x2000      BICS     R0,R0,#0x80000
   \   000000B2   0x6020             STR      R0,[R4, #+0]
    734            }
    735          
    736            /* Write to DMAy Streamx M1AR */
    737            DMAy_Streamx->M1AR = Memory1BaseAddr;
   \                     ??DMA_DoubleBufferModeConfig_3: (+1)
   \   000000B4   0x6125             STR      R5,[R4, #+16]
    738          }
   \   000000B6   0xBD70             POP      {R4-R6,PC}       ;; return
    739          
    740          /**
    741            * @brief  Enables or disables the double buffer mode for the selected DMA stream.
    742            * @note   This function can be called only when the DMA Stream is disabled.  
    743            * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
    744            *          to 7 to select the DMA Stream.
    745            * @param  NewState: new state of the DMAy Streamx double buffer mode. 
    746            *          This parameter can be: ENABLE or DISABLE.
    747            * @retval None
    748            */

   \                                 In section .text, align 2, keep-with-next
    749          void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
    750          {  
   \                     DMA_DoubleBufferModeCmd: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    751            /* Check the parameters */
    752            assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable14_1  ;; 0x40026010
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD041             BEQ.N    ??DMA_DoubleBufferModeCmd_0
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable14_2  ;; 0x40026028
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD03D             BEQ.N    ??DMA_DoubleBufferModeCmd_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable14_3  ;; 0x40026040
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD039             BEQ.N    ??DMA_DoubleBufferModeCmd_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable14_4  ;; 0x40026058
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD035             BEQ.N    ??DMA_DoubleBufferModeCmd_0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable14_5  ;; 0x40026070
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD031             BEQ.N    ??DMA_DoubleBufferModeCmd_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable14_6  ;; 0x40026088
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD02D             BEQ.N    ??DMA_DoubleBufferModeCmd_0
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable14_7  ;; 0x400260a0
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD029             BEQ.N    ??DMA_DoubleBufferModeCmd_0
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable14_8  ;; 0x400260b8
   \   00000042   0x4284             CMP      R4,R0
   \   00000044   0xD025             BEQ.N    ??DMA_DoubleBufferModeCmd_0
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable14_9  ;; 0x40026410
   \   0000004A   0x4284             CMP      R4,R0
   \   0000004C   0xD021             BEQ.N    ??DMA_DoubleBufferModeCmd_0
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable14_10  ;; 0x40026428
   \   00000052   0x4284             CMP      R4,R0
   \   00000054   0xD01D             BEQ.N    ??DMA_DoubleBufferModeCmd_0
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable15  ;; 0x40026440
   \   0000005A   0x4284             CMP      R4,R0
   \   0000005C   0xD019             BEQ.N    ??DMA_DoubleBufferModeCmd_0
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable15_1  ;; 0x40026458
   \   00000062   0x4284             CMP      R4,R0
   \   00000064   0xD015             BEQ.N    ??DMA_DoubleBufferModeCmd_0
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable15_2  ;; 0x40026470
   \   0000006A   0x4284             CMP      R4,R0
   \   0000006C   0xD011             BEQ.N    ??DMA_DoubleBufferModeCmd_0
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable15_3  ;; 0x40026488
   \   00000072   0x4284             CMP      R4,R0
   \   00000074   0xD00D             BEQ.N    ??DMA_DoubleBufferModeCmd_0
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable15_4  ;; 0x400264a0
   \   0000007A   0x4284             CMP      R4,R0
   \   0000007C   0xD009             BEQ.N    ??DMA_DoubleBufferModeCmd_0
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable15_5  ;; 0x400264b8
   \   00000082   0x4284             CMP      R4,R0
   \   00000084   0xD005             BEQ.N    ??DMA_DoubleBufferModeCmd_0
   \   00000086   0xF44F 0x713C      MOV      R1,#+752
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable17
   \   0000008E   0x.... 0x....      BL       assert_failed
    753            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \                     ??DMA_DoubleBufferModeCmd_0: (+1)
   \   00000092   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000094   0x2D00             CMP      R5,#+0
   \   00000096   0xD008             BEQ.N    ??DMA_DoubleBufferModeCmd_1
   \   00000098   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000009A   0x2D01             CMP      R5,#+1
   \   0000009C   0xD005             BEQ.N    ??DMA_DoubleBufferModeCmd_1
   \   0000009E   0xF240 0x21F1      MOVW     R1,#+753
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable17
   \   000000A6   0x.... 0x....      BL       assert_failed
    754          
    755            /* Configure the Double Buffer mode */
    756            if (NewState != DISABLE)
   \                     ??DMA_DoubleBufferModeCmd_1: (+1)
   \   000000AA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000AC   0x2D00             CMP      R5,#+0
   \   000000AE   0xD004             BEQ.N    ??DMA_DoubleBufferModeCmd_2
    757            {
    758              /* Enable the Double buffer mode */
    759              DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
   \   000000B0   0x6820             LDR      R0,[R4, #+0]
   \   000000B2   0xF450 0x2080      ORRS     R0,R0,#0x40000
   \   000000B6   0x6020             STR      R0,[R4, #+0]
   \   000000B8   0xE003             B.N      ??DMA_DoubleBufferModeCmd_3
    760            }
    761            else
    762            {
    763              /* Disable the Double buffer mode */
    764              DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
   \                     ??DMA_DoubleBufferModeCmd_2: (+1)
   \   000000BA   0x6820             LDR      R0,[R4, #+0]
   \   000000BC   0xF430 0x2080      BICS     R0,R0,#0x40000
   \   000000C0   0x6020             STR      R0,[R4, #+0]
    765            }
    766          }
   \                     ??DMA_DoubleBufferModeCmd_3: (+1)
   \   000000C2   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    767          
    768          /**
    769            * @brief  Configures the Memory address for the next buffer transfer in double
    770            *         buffer mode (for dynamic use). This function can be called when the
    771            *         DMA Stream is enabled and when the transfer is ongoing.  
    772            * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
    773            *          to 7 to select the DMA Stream.
    774            * @param  MemoryBaseAddr: The base address of the target memory buffer
    775            * @param  DMA_MemoryTarget: Next memory target to be used. 
    776            *         This parameter can be one of the following values:
    777            *            @arg DMA_Memory_0: To use the memory address 0
    778            *            @arg DMA_Memory_1: To use the memory address 1
    779            * 
    780            * @note    It is not allowed to modify the Base Address of a target Memory when
    781            *          this target is involved in the current transfer. ie. If the DMA Stream
    782            *          is currently transferring to/from Memory 1, then it not possible to
    783            *          modify Base address of Memory 1, but it is possible to modify Base
    784            *          address of Memory 0.
    785            *          To know which Memory is currently used, you can use the function
    786            *          DMA_GetCurrentMemoryTarget().             
    787            *  
    788            * @retval None
    789            */

   \                                 In section .text, align 2, keep-with-next
    790          void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
    791                                     uint32_t DMA_MemoryTarget)
    792          {
   \                     DMA_MemoryTargetConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    793            /* Check the parameters */
    794            assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable14_1  ;; 0x40026010
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD041             BEQ.N    ??DMA_MemoryTargetConfig_0
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable14_2  ;; 0x40026028
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD03D             BEQ.N    ??DMA_MemoryTargetConfig_0
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable14_3  ;; 0x40026040
   \   0000001C   0x4284             CMP      R4,R0
   \   0000001E   0xD039             BEQ.N    ??DMA_MemoryTargetConfig_0
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable14_4  ;; 0x40026058
   \   00000024   0x4284             CMP      R4,R0
   \   00000026   0xD035             BEQ.N    ??DMA_MemoryTargetConfig_0
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable14_5  ;; 0x40026070
   \   0000002C   0x4284             CMP      R4,R0
   \   0000002E   0xD031             BEQ.N    ??DMA_MemoryTargetConfig_0
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable14_6  ;; 0x40026088
   \   00000034   0x4284             CMP      R4,R0
   \   00000036   0xD02D             BEQ.N    ??DMA_MemoryTargetConfig_0
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable14_7  ;; 0x400260a0
   \   0000003C   0x4284             CMP      R4,R0
   \   0000003E   0xD029             BEQ.N    ??DMA_MemoryTargetConfig_0
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable14_8  ;; 0x400260b8
   \   00000044   0x4284             CMP      R4,R0
   \   00000046   0xD025             BEQ.N    ??DMA_MemoryTargetConfig_0
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable14_9  ;; 0x40026410
   \   0000004C   0x4284             CMP      R4,R0
   \   0000004E   0xD021             BEQ.N    ??DMA_MemoryTargetConfig_0
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable14_10  ;; 0x40026428
   \   00000054   0x4284             CMP      R4,R0
   \   00000056   0xD01D             BEQ.N    ??DMA_MemoryTargetConfig_0
   \   00000058   0x.... 0x....      LDR.W    R0,??DataTable15  ;; 0x40026440
   \   0000005C   0x4284             CMP      R4,R0
   \   0000005E   0xD019             BEQ.N    ??DMA_MemoryTargetConfig_0
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable15_1  ;; 0x40026458
   \   00000064   0x4284             CMP      R4,R0
   \   00000066   0xD015             BEQ.N    ??DMA_MemoryTargetConfig_0
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable15_2  ;; 0x40026470
   \   0000006C   0x4284             CMP      R4,R0
   \   0000006E   0xD011             BEQ.N    ??DMA_MemoryTargetConfig_0
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable15_3  ;; 0x40026488
   \   00000074   0x4284             CMP      R4,R0
   \   00000076   0xD00D             BEQ.N    ??DMA_MemoryTargetConfig_0
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable15_4  ;; 0x400264a0
   \   0000007C   0x4284             CMP      R4,R0
   \   0000007E   0xD009             BEQ.N    ??DMA_MemoryTargetConfig_0
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable15_5  ;; 0x400264b8
   \   00000084   0x4284             CMP      R4,R0
   \   00000086   0xD005             BEQ.N    ??DMA_MemoryTargetConfig_0
   \   00000088   0xF240 0x311A      MOVW     R1,#+794
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable17
   \   00000090   0x.... 0x....      BL       assert_failed
    795            assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
   \                     ??DMA_MemoryTargetConfig_0: (+1)
   \   00000094   0x2E00             CMP      R6,#+0
   \   00000096   0xD008             BEQ.N    ??DMA_MemoryTargetConfig_1
   \   00000098   0xF5B6 0x2F00      CMP      R6,#+524288
   \   0000009C   0xD005             BEQ.N    ??DMA_MemoryTargetConfig_1
   \   0000009E   0xF240 0x311B      MOVW     R1,#+795
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable17
   \   000000A6   0x.... 0x....      BL       assert_failed
    796              
    797            /* Check the Memory target to be configured */
    798            if (DMA_MemoryTarget != DMA_Memory_0)
   \                     ??DMA_MemoryTargetConfig_1: (+1)
   \   000000AA   0x2E00             CMP      R6,#+0
   \   000000AC   0xD001             BEQ.N    ??DMA_MemoryTargetConfig_2
    799            {
    800              /* Write to DMAy Streamx M1AR */
    801              DMAy_Streamx->M1AR = MemoryBaseAddr;    
   \   000000AE   0x6125             STR      R5,[R4, #+16]
   \   000000B0   0xE000             B.N      ??DMA_MemoryTargetConfig_3
    802            }  
    803            else
    804            {
    805              /* Write to DMAy Streamx M0AR */
    806              DMAy_Streamx->M0AR = MemoryBaseAddr;  
   \                     ??DMA_MemoryTargetConfig_2: (+1)
   \   000000B2   0x60E5             STR      R5,[R4, #+12]
    807            }
    808          }
   \                     ??DMA_MemoryTargetConfig_3: (+1)
   \   000000B4   0xBD70             POP      {R4-R6,PC}       ;; return
    809          
    810          /**
    811            * @brief  Returns the current memory target used by double buffer transfer.
    812            * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
    813            *          to 7 to select the DMA Stream.
    814            * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
    815            */

   \                                 In section .text, align 2, keep-with-next
    816          uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
    817          {
   \                     DMA_GetCurrentMemoryTarget: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    818            uint32_t tmp = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    819            
    820            /* Check the parameters */
    821            assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable14_1  ;; 0x40026010
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD041             BEQ.N    ??DMA_GetCurrentMemoryTarget_0
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable14_2  ;; 0x40026028
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD03D             BEQ.N    ??DMA_GetCurrentMemoryTarget_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable14_3  ;; 0x40026040
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD039             BEQ.N    ??DMA_GetCurrentMemoryTarget_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable14_4  ;; 0x40026058
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD035             BEQ.N    ??DMA_GetCurrentMemoryTarget_0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable14_5  ;; 0x40026070
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD031             BEQ.N    ??DMA_GetCurrentMemoryTarget_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable14_6  ;; 0x40026088
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD02D             BEQ.N    ??DMA_GetCurrentMemoryTarget_0
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable14_7  ;; 0x400260a0
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD029             BEQ.N    ??DMA_GetCurrentMemoryTarget_0
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable14_8  ;; 0x400260b8
   \   00000042   0x4284             CMP      R4,R0
   \   00000044   0xD025             BEQ.N    ??DMA_GetCurrentMemoryTarget_0
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable14_9  ;; 0x40026410
   \   0000004A   0x4284             CMP      R4,R0
   \   0000004C   0xD021             BEQ.N    ??DMA_GetCurrentMemoryTarget_0
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable14_10  ;; 0x40026428
   \   00000052   0x4284             CMP      R4,R0
   \   00000054   0xD01D             BEQ.N    ??DMA_GetCurrentMemoryTarget_0
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable15  ;; 0x40026440
   \   0000005A   0x4284             CMP      R4,R0
   \   0000005C   0xD019             BEQ.N    ??DMA_GetCurrentMemoryTarget_0
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable15_1  ;; 0x40026458
   \   00000062   0x4284             CMP      R4,R0
   \   00000064   0xD015             BEQ.N    ??DMA_GetCurrentMemoryTarget_0
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable15_2  ;; 0x40026470
   \   0000006A   0x4284             CMP      R4,R0
   \   0000006C   0xD011             BEQ.N    ??DMA_GetCurrentMemoryTarget_0
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable15_3  ;; 0x40026488
   \   00000072   0x4284             CMP      R4,R0
   \   00000074   0xD00D             BEQ.N    ??DMA_GetCurrentMemoryTarget_0
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable15_4  ;; 0x400264a0
   \   0000007A   0x4284             CMP      R4,R0
   \   0000007C   0xD009             BEQ.N    ??DMA_GetCurrentMemoryTarget_0
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable15_5  ;; 0x400264b8
   \   00000082   0x4284             CMP      R4,R0
   \   00000084   0xD005             BEQ.N    ??DMA_GetCurrentMemoryTarget_0
   \   00000086   0xF240 0x3135      MOVW     R1,#+821
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable17
   \   0000008E   0x.... 0x....      BL       assert_failed
    822          
    823            /* Get the current memory target */
    824            if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
   \                     ??DMA_GetCurrentMemoryTarget_0: (+1)
   \   00000092   0x6820             LDR      R0,[R4, #+0]
   \   00000094   0x0300             LSLS     R0,R0,#+12
   \   00000096   0xD502             BPL.N    ??DMA_GetCurrentMemoryTarget_1
    825            {
    826              /* Current memory buffer used is Memory 1 */
    827              tmp = 1;
   \   00000098   0x2001             MOVS     R0,#+1
   \   0000009A   0x0005             MOVS     R5,R0
   \   0000009C   0xE001             B.N      ??DMA_GetCurrentMemoryTarget_2
    828            }  
    829            else
    830            {
    831              /* Current memory buffer used is Memory 0 */
    832              tmp = 0;    
   \                     ??DMA_GetCurrentMemoryTarget_1: (+1)
   \   0000009E   0x2000             MOVS     R0,#+0
   \   000000A0   0x0005             MOVS     R5,R0
    833            }
    834            return tmp;
   \                     ??DMA_GetCurrentMemoryTarget_2: (+1)
   \   000000A2   0x0028             MOVS     R0,R5
   \   000000A4   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    835          }
    836          /**
    837            * @}
    838            */
    839          
    840          /** @defgroup DMA_Group4 Interrupts and flags management functions
    841           *  @brief   Interrupts and flags management functions 
    842           *
    843          @verbatim   
    844           ===============================================================================
    845                            Interrupts and flags management functions
    846           ===============================================================================  
    847          
    848            This subsection provides functions allowing to
    849             - Check the DMA enable status
    850             - Check the FIFO status 
    851             - Configure the DMA Interrupts sources and check or clear the flags or pending bits status.   
    852             
    853           1. DMA Enable status:
    854             After configuring the DMA Stream (DMA_Init() function) and enabling the stream,
    855             it is recommended to check (or wait until) the DMA Stream is effectively enabled.
    856             A Stream may remain disabled if a configuration parameter is wrong.
    857             After disabling a DMA Stream, it is also recommended to check (or wait until) the DMA
    858             Stream is effectively disabled. If a Stream is disabled while a data transfer is ongoing, 
    859             the current data will be transferred and the Stream will be effectively disabled only after
    860             this data transfer completion.
    861             To monitor this state it is possible to use the following function:
    862               - FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx); 
    863           
    864           2. FIFO Status:
    865             It is possible to monitor the FIFO status when a transfer is ongoing using the following 
    866             function:
    867               - uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx); 
    868           
    869           3. DMA Interrupts and Flags:
    870            The user should identify which mode will be used in his application to manage the
    871            DMA controller events: Polling mode or Interrupt mode. 
    872              
    873            Polling Mode
    874            =============
    875              Each DMA stream can be managed through 4 event Flags:
    876              (x : DMA Stream number )
    877                 1. DMA_FLAG_FEIFx  : to indicate that a FIFO Mode Transfer Error event occurred.
    878                 2. DMA_FLAG_DMEIFx : to indicate that a Direct Mode Transfer Error event occurred.
    879                 3. DMA_FLAG_TEIFx  : to indicate that a Transfer Error event occurred.
    880                 4. DMA_FLAG_HTIFx  : to indicate that a Half-Transfer Complete event occurred.
    881                 5. DMA_FLAG_TCIFx  : to indicate that a Transfer Complete event occurred .       
    882          
    883             In this Mode it is advised to use the following functions:
    884                - FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG);
    885                - void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG);
    886          
    887            Interrupt Mode
    888            ===============
    889              Each DMA Stream can be managed through 4 Interrupts:
    890          
    891              Interrupt Source
    892              ----------------
    893                 1. DMA_IT_FEIFx  : specifies the interrupt source for the  FIFO Mode Transfer Error event.
    894                 2. DMA_IT_DMEIFx : specifies the interrupt source for the Direct Mode Transfer Error event.
    895                 3. DMA_IT_TEIFx  : specifies the interrupt source for the Transfer Error event.
    896                 4. DMA_IT_HTIFx  : specifies the interrupt source for the Half-Transfer Complete event.
    897                 5. DMA_IT_TCIFx  : specifies the interrupt source for the a Transfer Complete event. 
    898               
    899            In this Mode it is advised to use the following functions:
    900               - void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState);
    901               - ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT);
    902               - void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT);
    903          
    904          @endverbatim
    905            * @{
    906            */
    907          
    908          /**
    909            * @brief  Returns the status of EN bit for the specified DMAy Streamx.
    910            * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
    911            *          to 7 to select the DMA Stream.
    912            *   
    913            * @note    After configuring the DMA Stream (DMA_Init() function) and enabling
    914            *          the stream, it is recommended to check (or wait until) the DMA Stream
    915            *          is effectively enabled. A Stream may remain disabled if a configuration
    916            *          parameter is wrong.
    917            *          After disabling a DMA Stream, it is also recommended to check (or wait 
    918            *          until) the DMA Stream is effectively disabled. If a Stream is disabled
    919            *          while a data transfer is ongoing, the current data will be transferred
    920            *          and the Stream will be effectively disabled only after the transfer
    921            *          of this single data is finished.  
    922            *      
    923            * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
    924            */

   \                                 In section .text, align 2, keep-with-next
    925          FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
    926          {
   \                     DMA_GetCmdStatus: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    927            FunctionalState state = DISABLE;
   \   00000004   0x2500             MOVS     R5,#+0
    928          
    929            /* Check the parameters */
    930            assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable14_1  ;; 0x40026010
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD041             BEQ.N    ??DMA_GetCmdStatus_0
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable14_2  ;; 0x40026028
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD03D             BEQ.N    ??DMA_GetCmdStatus_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable14_3  ;; 0x40026040
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD039             BEQ.N    ??DMA_GetCmdStatus_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable14_4  ;; 0x40026058
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD035             BEQ.N    ??DMA_GetCmdStatus_0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable14_5  ;; 0x40026070
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD031             BEQ.N    ??DMA_GetCmdStatus_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable14_6  ;; 0x40026088
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD02D             BEQ.N    ??DMA_GetCmdStatus_0
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable14_7  ;; 0x400260a0
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD029             BEQ.N    ??DMA_GetCmdStatus_0
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable14_8  ;; 0x400260b8
   \   00000042   0x4284             CMP      R4,R0
   \   00000044   0xD025             BEQ.N    ??DMA_GetCmdStatus_0
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable14_9  ;; 0x40026410
   \   0000004A   0x4284             CMP      R4,R0
   \   0000004C   0xD021             BEQ.N    ??DMA_GetCmdStatus_0
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable14_10  ;; 0x40026428
   \   00000052   0x4284             CMP      R4,R0
   \   00000054   0xD01D             BEQ.N    ??DMA_GetCmdStatus_0
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable15  ;; 0x40026440
   \   0000005A   0x4284             CMP      R4,R0
   \   0000005C   0xD019             BEQ.N    ??DMA_GetCmdStatus_0
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable15_1  ;; 0x40026458
   \   00000062   0x4284             CMP      R4,R0
   \   00000064   0xD015             BEQ.N    ??DMA_GetCmdStatus_0
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable15_2  ;; 0x40026470
   \   0000006A   0x4284             CMP      R4,R0
   \   0000006C   0xD011             BEQ.N    ??DMA_GetCmdStatus_0
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable15_3  ;; 0x40026488
   \   00000072   0x4284             CMP      R4,R0
   \   00000074   0xD00D             BEQ.N    ??DMA_GetCmdStatus_0
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable15_4  ;; 0x400264a0
   \   0000007A   0x4284             CMP      R4,R0
   \   0000007C   0xD009             BEQ.N    ??DMA_GetCmdStatus_0
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable15_5  ;; 0x400264b8
   \   00000082   0x4284             CMP      R4,R0
   \   00000084   0xD005             BEQ.N    ??DMA_GetCmdStatus_0
   \   00000086   0xF240 0x31A2      MOVW     R1,#+930
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable17
   \   0000008E   0x.... 0x....      BL       assert_failed
    931          
    932            if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
   \                     ??DMA_GetCmdStatus_0: (+1)
   \   00000092   0x6820             LDR      R0,[R4, #+0]
   \   00000094   0x07C0             LSLS     R0,R0,#+31
   \   00000096   0xD502             BPL.N    ??DMA_GetCmdStatus_1
    933            {
    934              /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    935              state = ENABLE;
   \   00000098   0x2001             MOVS     R0,#+1
   \   0000009A   0x0005             MOVS     R5,R0
   \   0000009C   0xE001             B.N      ??DMA_GetCmdStatus_2
    936            }
    937            else
    938            {
    939              /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
    940                  all transfers are complete) */
    941              state = DISABLE;
   \                     ??DMA_GetCmdStatus_1: (+1)
   \   0000009E   0x2000             MOVS     R0,#+0
   \   000000A0   0x0005             MOVS     R5,R0
    942            }
    943            return state;
   \                     ??DMA_GetCmdStatus_2: (+1)
   \   000000A2   0x0028             MOVS     R0,R5
   \   000000A4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A6   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    944          }
    945          
    946          /**
    947            * @brief  Returns the current DMAy Streamx FIFO filled level.
    948            * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0 
    949            *         to 7 to select the DMA Stream.
    950            * @retval The FIFO filling state.
    951            *           - DMA_FIFOStatus_Less1QuarterFull: when FIFO is less than 1 quarter-full 
    952            *                                               and not empty.
    953            *           - DMA_FIFOStatus_1QuarterFull: if more than 1 quarter-full.
    954            *           - DMA_FIFOStatus_HalfFull: if more than 1 half-full.
    955            *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
    956            *           - DMA_FIFOStatus_Empty: when FIFO is empty
    957            *           - DMA_FIFOStatus_Full: when FIFO is full
    958            */

   \                                 In section .text, align 2, keep-with-next
    959          uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
    960          {
   \                     DMA_GetFIFOStatus: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    961            uint32_t tmpreg = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    962           
    963            /* Check the parameters */
    964            assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable14_1  ;; 0x40026010
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD041             BEQ.N    ??DMA_GetFIFOStatus_0
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable14_2  ;; 0x40026028
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD03D             BEQ.N    ??DMA_GetFIFOStatus_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable14_3  ;; 0x40026040
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD039             BEQ.N    ??DMA_GetFIFOStatus_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable14_4  ;; 0x40026058
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD035             BEQ.N    ??DMA_GetFIFOStatus_0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable14_5  ;; 0x40026070
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD031             BEQ.N    ??DMA_GetFIFOStatus_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable14_6  ;; 0x40026088
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD02D             BEQ.N    ??DMA_GetFIFOStatus_0
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable14_7  ;; 0x400260a0
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD029             BEQ.N    ??DMA_GetFIFOStatus_0
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable14_8  ;; 0x400260b8
   \   00000042   0x4284             CMP      R4,R0
   \   00000044   0xD025             BEQ.N    ??DMA_GetFIFOStatus_0
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable14_9  ;; 0x40026410
   \   0000004A   0x4284             CMP      R4,R0
   \   0000004C   0xD021             BEQ.N    ??DMA_GetFIFOStatus_0
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable14_10  ;; 0x40026428
   \   00000052   0x4284             CMP      R4,R0
   \   00000054   0xD01D             BEQ.N    ??DMA_GetFIFOStatus_0
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable15  ;; 0x40026440
   \   0000005A   0x4284             CMP      R4,R0
   \   0000005C   0xD019             BEQ.N    ??DMA_GetFIFOStatus_0
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable15_1  ;; 0x40026458
   \   00000062   0x4284             CMP      R4,R0
   \   00000064   0xD015             BEQ.N    ??DMA_GetFIFOStatus_0
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable15_2  ;; 0x40026470
   \   0000006A   0x4284             CMP      R4,R0
   \   0000006C   0xD011             BEQ.N    ??DMA_GetFIFOStatus_0
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable15_3  ;; 0x40026488
   \   00000072   0x4284             CMP      R4,R0
   \   00000074   0xD00D             BEQ.N    ??DMA_GetFIFOStatus_0
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable15_4  ;; 0x400264a0
   \   0000007A   0x4284             CMP      R4,R0
   \   0000007C   0xD009             BEQ.N    ??DMA_GetFIFOStatus_0
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable15_5  ;; 0x400264b8
   \   00000082   0x4284             CMP      R4,R0
   \   00000084   0xD005             BEQ.N    ??DMA_GetFIFOStatus_0
   \   00000086   0xF44F 0x7171      MOV      R1,#+964
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable17
   \   0000008E   0x.... 0x....      BL       assert_failed
    965            
    966            /* Get the FIFO level bits */
    967            tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
   \                     ??DMA_GetFIFOStatus_0: (+1)
   \   00000092   0x6960             LDR      R0,[R4, #+20]
   \   00000094   0xF010 0x0038      ANDS     R0,R0,#0x38
   \   00000098   0x0005             MOVS     R5,R0
    968            
    969            return tmpreg;
   \   0000009A   0x0028             MOVS     R0,R5
   \   0000009C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    970          }
    971          
    972          /**
    973            * @brief  Checks whether the specified DMAy Streamx flag is set or not.
    974            * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
    975            *          to 7 to select the DMA Stream.
    976            * @param  DMA_FLAG: specifies the flag to check.
    977            *          This parameter can be one of the following values:
    978            *            @arg DMA_FLAG_TCIFx:  Streamx transfer complete flag
    979            *            @arg DMA_FLAG_HTIFx:  Streamx half transfer complete flag
    980            *            @arg DMA_FLAG_TEIFx:  Streamx transfer error flag
    981            *            @arg DMA_FLAG_DMEIFx: Streamx direct mode error flag
    982            *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
    983            *         Where x can be 0 to 7 to select the DMA Stream.
    984            * @retval The new state of DMA_FLAG (SET or RESET).
    985            */

   \                                 In section .text, align 2, keep-with-next
    986          FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
    987          {
   \                     DMA_GetFlagStatus: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    988            FlagStatus bitstatus = RESET;
   \   00000008   0x2600             MOVS     R6,#+0
    989            DMA_TypeDef* DMAy;
    990            uint32_t tmpreg = 0;
   \   0000000A   0xF05F 0x0800      MOVS     R8,#+0
    991          
    992            /* Check the parameters */
    993            assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
   \   0000000E   0x....             LDR.N    R0,??DataTable14_1  ;; 0x40026010
   \   00000010   0x4284             CMP      R4,R0
   \   00000012   0xD038             BEQ.N    ??DMA_GetFlagStatus_0
   \   00000014   0x....             LDR.N    R0,??DataTable14_2  ;; 0x40026028
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xD035             BEQ.N    ??DMA_GetFlagStatus_0
   \   0000001A   0x....             LDR.N    R0,??DataTable14_3  ;; 0x40026040
   \   0000001C   0x4284             CMP      R4,R0
   \   0000001E   0xD032             BEQ.N    ??DMA_GetFlagStatus_0
   \   00000020   0x....             LDR.N    R0,??DataTable14_4  ;; 0x40026058
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD02F             BEQ.N    ??DMA_GetFlagStatus_0
   \   00000026   0x....             LDR.N    R0,??DataTable14_5  ;; 0x40026070
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD02C             BEQ.N    ??DMA_GetFlagStatus_0
   \   0000002C   0x....             LDR.N    R0,??DataTable14_6  ;; 0x40026088
   \   0000002E   0x4284             CMP      R4,R0
   \   00000030   0xD029             BEQ.N    ??DMA_GetFlagStatus_0
   \   00000032   0x....             LDR.N    R0,??DataTable14_7  ;; 0x400260a0
   \   00000034   0x4284             CMP      R4,R0
   \   00000036   0xD026             BEQ.N    ??DMA_GetFlagStatus_0
   \   00000038   0x....             LDR.N    R0,??DataTable14_8  ;; 0x400260b8
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD023             BEQ.N    ??DMA_GetFlagStatus_0
   \   0000003E   0x....             LDR.N    R0,??DataTable14_9  ;; 0x40026410
   \   00000040   0x4284             CMP      R4,R0
   \   00000042   0xD020             BEQ.N    ??DMA_GetFlagStatus_0
   \   00000044   0x....             LDR.N    R0,??DataTable14_10  ;; 0x40026428
   \   00000046   0x4284             CMP      R4,R0
   \   00000048   0xD01D             BEQ.N    ??DMA_GetFlagStatus_0
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable15  ;; 0x40026440
   \   0000004E   0x4284             CMP      R4,R0
   \   00000050   0xD019             BEQ.N    ??DMA_GetFlagStatus_0
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable15_1  ;; 0x40026458
   \   00000056   0x4284             CMP      R4,R0
   \   00000058   0xD015             BEQ.N    ??DMA_GetFlagStatus_0
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable15_2  ;; 0x40026470
   \   0000005E   0x4284             CMP      R4,R0
   \   00000060   0xD011             BEQ.N    ??DMA_GetFlagStatus_0
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable15_3  ;; 0x40026488
   \   00000066   0x4284             CMP      R4,R0
   \   00000068   0xD00D             BEQ.N    ??DMA_GetFlagStatus_0
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable15_4  ;; 0x400264a0
   \   0000006E   0x4284             CMP      R4,R0
   \   00000070   0xD009             BEQ.N    ??DMA_GetFlagStatus_0
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable15_5  ;; 0x400264b8
   \   00000076   0x4284             CMP      R4,R0
   \   00000078   0xD005             BEQ.N    ??DMA_GetFlagStatus_0
   \   0000007A   0xF240 0x31E1      MOVW     R1,#+993
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable17
   \   00000082   0x.... 0x....      BL       assert_failed
    994            assert_param(IS_DMA_GET_FLAG(DMA_FLAG));
   \                     ??DMA_GetFlagStatus_0: (+1)
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable17_1  ;; 0x10000020
   \   0000008A   0x4285             CMP      R5,R0
   \   0000008C   0xF000 0x809D      BEQ.W    ??DMA_GetFlagStatus_1
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable17_2  ;; 0x10000010
   \   00000094   0x4285             CMP      R5,R0
   \   00000096   0xF000 0x8098      BEQ.W    ??DMA_GetFlagStatus_1
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable17_3  ;; 0x10000008
   \   0000009E   0x4285             CMP      R5,R0
   \   000000A0   0xF000 0x8093      BEQ.W    ??DMA_GetFlagStatus_1
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable17_4  ;; 0x10800004
   \   000000A8   0x4285             CMP      R5,R0
   \   000000AA   0xF000 0x808E      BEQ.W    ??DMA_GetFlagStatus_1
   \   000000AE   0x.... 0x....      LDR.W    R0,??DataTable17_5  ;; 0x10800001
   \   000000B2   0x4285             CMP      R5,R0
   \   000000B4   0xF000 0x8089      BEQ.W    ??DMA_GetFlagStatus_1
   \   000000B8   0x.... 0x....      LDR.W    R0,??DataTable17_6  ;; 0x10000800
   \   000000BC   0x4285             CMP      R5,R0
   \   000000BE   0xF000 0x8084      BEQ.W    ??DMA_GetFlagStatus_1
   \   000000C2   0x.... 0x....      LDR.W    R0,??DataTable17_7  ;; 0x10000400
   \   000000C6   0x4285             CMP      R5,R0
   \   000000C8   0xF000 0x807F      BEQ.W    ??DMA_GetFlagStatus_1
   \   000000CC   0x.... 0x....      LDR.W    R0,??DataTable17_8  ;; 0x10000200
   \   000000D0   0x4285             CMP      R5,R0
   \   000000D2   0xD07A             BEQ.N    ??DMA_GetFlagStatus_1
   \   000000D4   0x.... 0x....      LDR.W    R0,??DataTable17_9  ;; 0x10000100
   \   000000D8   0x4285             CMP      R5,R0
   \   000000DA   0xD076             BEQ.N    ??DMA_GetFlagStatus_1
   \   000000DC   0x.... 0x....      LDR.W    R0,??DataTable17_10  ;; 0x10000040
   \   000000E0   0x4285             CMP      R5,R0
   \   000000E2   0xD072             BEQ.N    ??DMA_GetFlagStatus_1
   \   000000E4   0xF1B5 0x5F81      CMP      R5,#+270532608
   \   000000E8   0xD06F             BEQ.N    ??DMA_GetFlagStatus_1
   \   000000EA   0x.... 0x....      LDR.W    R0,??DataTable17_11  ;; 0x10100000
   \   000000EE   0x4285             CMP      R5,R0
   \   000000F0   0xD06B             BEQ.N    ??DMA_GetFlagStatus_1
   \   000000F2   0x.... 0x....      LDR.W    R0,??DataTable17_12  ;; 0x10080000
   \   000000F6   0x4285             CMP      R5,R0
   \   000000F8   0xD067             BEQ.N    ??DMA_GetFlagStatus_1
   \   000000FA   0x.... 0x....      LDR.W    R0,??DataTable17_13  ;; 0x10040000
   \   000000FE   0x4285             CMP      R5,R0
   \   00000100   0xD063             BEQ.N    ??DMA_GetFlagStatus_1
   \   00000102   0x.... 0x....      LDR.W    R0,??DataTable17_14  ;; 0x10010000
   \   00000106   0x4285             CMP      R5,R0
   \   00000108   0xD05F             BEQ.N    ??DMA_GetFlagStatus_1
   \   0000010A   0xF1B5 0x5FC0      CMP      R5,#+402653184
   \   0000010E   0xD05C             BEQ.N    ??DMA_GetFlagStatus_1
   \   00000110   0xF1B5 0x5FA0      CMP      R5,#+335544320
   \   00000114   0xD059             BEQ.N    ??DMA_GetFlagStatus_1
   \   00000116   0xF1B5 0x5F90      CMP      R5,#+301989888
   \   0000011A   0xD056             BEQ.N    ??DMA_GetFlagStatus_1
   \   0000011C   0xF1B5 0x5F88      CMP      R5,#+285212672
   \   00000120   0xD053             BEQ.N    ??DMA_GetFlagStatus_1
   \   00000122   0xF1B5 0x5F82      CMP      R5,#+272629760
   \   00000126   0xD050             BEQ.N    ??DMA_GetFlagStatus_1
   \   00000128   0x.... 0x....      LDR.W    R0,??DataTable17_15  ;; 0x20000020
   \   0000012C   0x4285             CMP      R5,R0
   \   0000012E   0xD04C             BEQ.N    ??DMA_GetFlagStatus_1
   \   00000130   0x.... 0x....      LDR.W    R0,??DataTable17_16  ;; 0x20000010
   \   00000134   0x4285             CMP      R5,R0
   \   00000136   0xD048             BEQ.N    ??DMA_GetFlagStatus_1
   \   00000138   0x.... 0x....      LDR.W    R0,??DataTable17_17  ;; 0x20000008
   \   0000013C   0x4285             CMP      R5,R0
   \   0000013E   0xD044             BEQ.N    ??DMA_GetFlagStatus_1
   \   00000140   0x.... 0x....      LDR.W    R0,??DataTable17_18  ;; 0x20000004
   \   00000144   0x4285             CMP      R5,R0
   \   00000146   0xD040             BEQ.N    ??DMA_GetFlagStatus_1
   \   00000148   0x.... 0x....      LDR.W    R0,??DataTable17_19  ;; 0x20000001
   \   0000014C   0x4285             CMP      R5,R0
   \   0000014E   0xD03C             BEQ.N    ??DMA_GetFlagStatus_1
   \   00000150   0x.... 0x....      LDR.W    R0,??DataTable17_20  ;; 0x20000800
   \   00000154   0x4285             CMP      R5,R0
   \   00000156   0xD038             BEQ.N    ??DMA_GetFlagStatus_1
   \   00000158   0x.... 0x....      LDR.W    R0,??DataTable17_21  ;; 0x20000400
   \   0000015C   0x4285             CMP      R5,R0
   \   0000015E   0xD034             BEQ.N    ??DMA_GetFlagStatus_1
   \   00000160   0x.... 0x....      LDR.W    R0,??DataTable17_22  ;; 0x20000200
   \   00000164   0x4285             CMP      R5,R0
   \   00000166   0xD030             BEQ.N    ??DMA_GetFlagStatus_1
   \   00000168   0x.... 0x....      LDR.W    R0,??DataTable17_23  ;; 0x20000100
   \   0000016C   0x4285             CMP      R5,R0
   \   0000016E   0xD02C             BEQ.N    ??DMA_GetFlagStatus_1
   \   00000170   0x.... 0x....      LDR.W    R0,??DataTable17_24  ;; 0x20000040
   \   00000174   0x4285             CMP      R5,R0
   \   00000176   0xD028             BEQ.N    ??DMA_GetFlagStatus_1
   \   00000178   0x.... 0x....      LDR.W    R0,??DataTable17_25  ;; 0x20200000
   \   0000017C   0x4285             CMP      R5,R0
   \   0000017E   0xD024             BEQ.N    ??DMA_GetFlagStatus_1
   \   00000180   0x.... 0x....      LDR.W    R0,??DataTable17_26  ;; 0x20100000
   \   00000184   0x4285             CMP      R5,R0
   \   00000186   0xD020             BEQ.N    ??DMA_GetFlagStatus_1
   \   00000188   0x.... 0x....      LDR.W    R0,??DataTable17_27  ;; 0x20080000
   \   0000018C   0x4285             CMP      R5,R0
   \   0000018E   0xD01C             BEQ.N    ??DMA_GetFlagStatus_1
   \   00000190   0x.... 0x....      LDR.W    R0,??DataTable17_28  ;; 0x20040000
   \   00000194   0x4285             CMP      R5,R0
   \   00000196   0xD018             BEQ.N    ??DMA_GetFlagStatus_1
   \   00000198   0x.... 0x....      LDR.W    R0,??DataTable17_29  ;; 0x20010000
   \   0000019C   0x4285             CMP      R5,R0
   \   0000019E   0xD014             BEQ.N    ??DMA_GetFlagStatus_1
   \   000001A0   0xF1B5 0x5F20      CMP      R5,#+671088640
   \   000001A4   0xD011             BEQ.N    ??DMA_GetFlagStatus_1
   \   000001A6   0xF1B5 0x5F10      CMP      R5,#+603979776
   \   000001AA   0xD00E             BEQ.N    ??DMA_GetFlagStatus_1
   \   000001AC   0xF1B5 0x5F08      CMP      R5,#+570425344
   \   000001B0   0xD00B             BEQ.N    ??DMA_GetFlagStatus_1
   \   000001B2   0xF1B5 0x5F04      CMP      R5,#+553648128
   \   000001B6   0xD008             BEQ.N    ??DMA_GetFlagStatus_1
   \   000001B8   0xF1B5 0x5F01      CMP      R5,#+541065216
   \   000001BC   0xD005             BEQ.N    ??DMA_GetFlagStatus_1
   \   000001BE   0xF240 0x31E2      MOVW     R1,#+994
   \   000001C2   0x.... 0x....      LDR.W    R0,??DataTable17
   \   000001C6   0x.... 0x....      BL       assert_failed
    995          
    996            /* Determine the DMA to which belongs the stream */
    997            if (DMAy_Streamx < DMA2_Stream0)
   \                     ??DMA_GetFlagStatus_1: (+1)
   \   000001CA   0x....             LDR.N    R0,??DataTable14_9  ;; 0x40026410
   \   000001CC   0x4284             CMP      R4,R0
   \   000001CE   0xD203             BCS.N    ??DMA_GetFlagStatus_2
    998            {
    999              /* DMAy_Streamx belongs to DMA1 */
   1000              DMAy = DMA1; 
   \   000001D0   0x.... 0x....      LDR.W    R0,??DataTable17_30  ;; 0x40026000
   \   000001D4   0x0007             MOVS     R7,R0
   \   000001D6   0xE002             B.N      ??DMA_GetFlagStatus_3
   1001            } 
   1002            else 
   1003            {
   1004              /* DMAy_Streamx belongs to DMA2 */
   1005              DMAy = DMA2; 
   \                     ??DMA_GetFlagStatus_2: (+1)
   \   000001D8   0x.... 0x....      LDR.W    R0,??DataTable17_31  ;; 0x40026400
   \   000001DC   0x0007             MOVS     R7,R0
   1006            }
   1007          
   1008            /* Check if the flag is in HISR or LISR */
   1009            if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
   \                     ??DMA_GetFlagStatus_3: (+1)
   \   000001DE   0x00A8             LSLS     R0,R5,#+2
   \   000001E0   0xD502             BPL.N    ??DMA_GetFlagStatus_4
   1010            {
   1011              /* Get DMAy HISR register value */
   1012              tmpreg = DMAy->HISR;
   \   000001E2   0x6878             LDR      R0,[R7, #+4]
   \   000001E4   0x4680             MOV      R8,R0
   \   000001E6   0xE001             B.N      ??DMA_GetFlagStatus_5
   1013            }
   1014            else
   1015            {
   1016              /* Get DMAy LISR register value */
   1017              tmpreg = DMAy->LISR;
   \                     ??DMA_GetFlagStatus_4: (+1)
   \   000001E8   0x6838             LDR      R0,[R7, #+0]
   \   000001EA   0x4680             MOV      R8,R0
   1018            }   
   1019           
   1020            /* Mask the reserved bits */
   1021            tmpreg &= (uint32_t)RESERVED_MASK;
   \                     ??DMA_GetFlagStatus_5: (+1)
   \   000001EC   0x.... 0x....      LDR.W    R0,??DataTable17_32  ;; 0xf7d0f7d
   \   000001F0   0xEA10 0x0808      ANDS     R8,R0,R8
   1022          
   1023            /* Check the status of the specified DMA flag */
   1024            if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
   \   000001F4   0xEA18 0x0F05      TST      R8,R5
   \   000001F8   0xD002             BEQ.N    ??DMA_GetFlagStatus_6
   1025            {
   1026              /* DMA_FLAG is set */
   1027              bitstatus = SET;
   \   000001FA   0x2001             MOVS     R0,#+1
   \   000001FC   0x0006             MOVS     R6,R0
   \   000001FE   0xE001             B.N      ??DMA_GetFlagStatus_7
   1028            }
   1029            else
   1030            {
   1031              /* DMA_FLAG is reset */
   1032              bitstatus = RESET;
   \                     ??DMA_GetFlagStatus_6: (+1)
   \   00000200   0x2000             MOVS     R0,#+0
   \   00000202   0x0006             MOVS     R6,R0
   1033            }
   1034          
   1035            /* Return the DMA_FLAG status */
   1036            return  bitstatus;
   \                     ??DMA_GetFlagStatus_7: (+1)
   \   00000204   0x0030             MOVS     R0,R6
   \   00000206   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000208   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   1037          }
   1038          
   1039          /**
   1040            * @brief  Clears the DMAy Streamx's pending flags.
   1041            * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
   1042            *          to 7 to select the DMA Stream.
   1043            * @param  DMA_FLAG: specifies the flag to clear.
   1044            *          This parameter can be any combination of the following values:
   1045            *            @arg DMA_FLAG_TCIFx:  Streamx transfer complete flag
   1046            *            @arg DMA_FLAG_HTIFx:  Streamx half transfer complete flag
   1047            *            @arg DMA_FLAG_TEIFx:  Streamx transfer error flag
   1048            *            @arg DMA_FLAG_DMEIFx: Streamx direct mode error flag
   1049            *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
   1050            *         Where x can be 0 to 7 to select the DMA Stream.   
   1051            * @retval None
   1052            */

   \                                 In section .text, align 2, keep-with-next
   1053          void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
   1054          {
   \                     DMA_ClearFlag: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1055            DMA_TypeDef* DMAy;
   1056          
   1057            /* Check the parameters */
   1058            assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
   \   00000006   0x....             LDR.N    R0,??DataTable14_1  ;; 0x40026010
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD032             BEQ.N    ??DMA_ClearFlag_0
   \   0000000C   0x....             LDR.N    R0,??DataTable14_2  ;; 0x40026028
   \   0000000E   0x4284             CMP      R4,R0
   \   00000010   0xD02F             BEQ.N    ??DMA_ClearFlag_0
   \   00000012   0x....             LDR.N    R0,??DataTable14_3  ;; 0x40026040
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD02C             BEQ.N    ??DMA_ClearFlag_0
   \   00000018   0x....             LDR.N    R0,??DataTable14_4  ;; 0x40026058
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD029             BEQ.N    ??DMA_ClearFlag_0
   \   0000001E   0x....             LDR.N    R0,??DataTable14_5  ;; 0x40026070
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD026             BEQ.N    ??DMA_ClearFlag_0
   \   00000024   0x....             LDR.N    R0,??DataTable14_6  ;; 0x40026088
   \   00000026   0x4284             CMP      R4,R0
   \   00000028   0xD023             BEQ.N    ??DMA_ClearFlag_0
   \   0000002A   0x....             LDR.N    R0,??DataTable14_7  ;; 0x400260a0
   \   0000002C   0x4284             CMP      R4,R0
   \   0000002E   0xD020             BEQ.N    ??DMA_ClearFlag_0
   \   00000030   0x....             LDR.N    R0,??DataTable14_8  ;; 0x400260b8
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD01D             BEQ.N    ??DMA_ClearFlag_0
   \   00000036   0x....             LDR.N    R0,??DataTable14_9  ;; 0x40026410
   \   00000038   0x4284             CMP      R4,R0
   \   0000003A   0xD01A             BEQ.N    ??DMA_ClearFlag_0
   \   0000003C   0x....             LDR.N    R0,??DataTable14_10  ;; 0x40026428
   \   0000003E   0x4284             CMP      R4,R0
   \   00000040   0xD017             BEQ.N    ??DMA_ClearFlag_0
   \   00000042   0x....             LDR.N    R0,??DataTable15  ;; 0x40026440
   \   00000044   0x4284             CMP      R4,R0
   \   00000046   0xD014             BEQ.N    ??DMA_ClearFlag_0
   \   00000048   0x....             LDR.N    R0,??DataTable15_1  ;; 0x40026458
   \   0000004A   0x4284             CMP      R4,R0
   \   0000004C   0xD011             BEQ.N    ??DMA_ClearFlag_0
   \   0000004E   0x....             LDR.N    R0,??DataTable15_2  ;; 0x40026470
   \   00000050   0x4284             CMP      R4,R0
   \   00000052   0xD00E             BEQ.N    ??DMA_ClearFlag_0
   \   00000054   0x....             LDR.N    R0,??DataTable15_3  ;; 0x40026488
   \   00000056   0x4284             CMP      R4,R0
   \   00000058   0xD00B             BEQ.N    ??DMA_ClearFlag_0
   \   0000005A   0x....             LDR.N    R0,??DataTable15_4  ;; 0x400264a0
   \   0000005C   0x4284             CMP      R4,R0
   \   0000005E   0xD008             BEQ.N    ??DMA_ClearFlag_0
   \   00000060   0x....             LDR.N    R0,??DataTable15_5  ;; 0x400264b8
   \   00000062   0x4284             CMP      R4,R0
   \   00000064   0xD005             BEQ.N    ??DMA_ClearFlag_0
   \   00000066   0xF240 0x4122      MOVW     R1,#+1058
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable17
   \   0000006E   0x.... 0x....      BL       assert_failed
   1059            assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
   \                     ??DMA_ClearFlag_0: (+1)
   \   00000072   0xF015 0x5040      ANDS     R0,R5,#0x30000000
   \   00000076   0xF1B0 0x5F40      CMP      R0,#+805306368
   \   0000007A   0xD008             BEQ.N    ??DMA_ClearFlag_1
   \   0000007C   0xF015 0x5F40      TST      R5,#0x30000000
   \   00000080   0xD005             BEQ.N    ??DMA_ClearFlag_1
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable17_33  ;; 0xc082f082
   \   00000086   0x4205             TST      R5,R0
   \   00000088   0xD101             BNE.N    ??DMA_ClearFlag_1
   \   0000008A   0x2D00             CMP      R5,#+0
   \   0000008C   0xD105             BNE.N    ??DMA_ClearFlag_2
   \                     ??DMA_ClearFlag_1: (+1)
   \   0000008E   0xF240 0x4123      MOVW     R1,#+1059
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable17
   \   00000096   0x.... 0x....      BL       assert_failed
   1060          
   1061            /* Determine the DMA to which belongs the stream */
   1062            if (DMAy_Streamx < DMA2_Stream0)
   \                     ??DMA_ClearFlag_2: (+1)
   \   0000009A   0x....             LDR.N    R0,??DataTable14_9  ;; 0x40026410
   \   0000009C   0x4284             CMP      R4,R0
   \   0000009E   0xD203             BCS.N    ??DMA_ClearFlag_3
   1063            {
   1064              /* DMAy_Streamx belongs to DMA1 */
   1065              DMAy = DMA1; 
   \   000000A0   0x.... 0x....      LDR.W    R0,??DataTable17_30  ;; 0x40026000
   \   000000A4   0x0006             MOVS     R6,R0
   \   000000A6   0xE002             B.N      ??DMA_ClearFlag_4
   1066            } 
   1067            else 
   1068            {
   1069              /* DMAy_Streamx belongs to DMA2 */
   1070              DMAy = DMA2; 
   \                     ??DMA_ClearFlag_3: (+1)
   \   000000A8   0x.... 0x....      LDR.W    R0,??DataTable17_31  ;; 0x40026400
   \   000000AC   0x0006             MOVS     R6,R0
   1071            }
   1072          
   1073            /* Check if LIFCR or HIFCR register is targeted */
   1074            if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
   \                     ??DMA_ClearFlag_4: (+1)
   \   000000AE   0x00A8             LSLS     R0,R5,#+2
   \   000000B0   0xD504             BPL.N    ??DMA_ClearFlag_5
   1075            {
   1076              /* Set DMAy HIFCR register clear flag bits */
   1077              DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
   \   000000B2   0x.... 0x....      LDR.W    R0,??DataTable17_32  ;; 0xf7d0f7d
   \   000000B6   0x4028             ANDS     R0,R0,R5
   \   000000B8   0x60F0             STR      R0,[R6, #+12]
   \   000000BA   0xE003             B.N      ??DMA_ClearFlag_6
   1078            }
   1079            else 
   1080            {
   1081              /* Set DMAy LIFCR register clear flag bits */
   1082              DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
   \                     ??DMA_ClearFlag_5: (+1)
   \   000000BC   0x.... 0x....      LDR.W    R0,??DataTable17_32  ;; 0xf7d0f7d
   \   000000C0   0x4028             ANDS     R0,R0,R5
   \   000000C2   0x60B0             STR      R0,[R6, #+8]
   1083            }    
   1084          }
   \                     ??DMA_ClearFlag_6: (+1)
   \   000000C4   0xBD70             POP      {R4-R6,PC}       ;; return
   1085          
   1086          /**
   1087            * @brief  Enables or disables the specified DMAy Streamx interrupts.
   1088            * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
   1089            *          to 7 to select the DMA Stream.
   1090            * @param DMA_IT: specifies the DMA interrupt sources to be enabled or disabled. 
   1091            *          This parameter can be any combination of the following values:
   1092            *            @arg DMA_IT_TC:  Transfer complete interrupt mask
   1093            *            @arg DMA_IT_HT:  Half transfer complete interrupt mask
   1094            *            @arg DMA_IT_TE:  Transfer error interrupt mask
   1095            *            @arg DMA_IT_FE:  FIFO error interrupt mask
   1096            * @param  NewState: new state of the specified DMA interrupts.
   1097            *          This parameter can be: ENABLE or DISABLE.
   1098            * @retval None
   1099            */

   \                                 In section .text, align 2, keep-with-next
   1100          void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
   1101          {
   \                     DMA_ITConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   1102            /* Check the parameters */
   1103            assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable17_34  ;; 0x40026010
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD03B             BEQ.N    ??DMA_ITConfig_0
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable17_35  ;; 0x40026028
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD037             BEQ.N    ??DMA_ITConfig_0
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable17_36  ;; 0x40026040
   \   0000001C   0x4284             CMP      R4,R0
   \   0000001E   0xD033             BEQ.N    ??DMA_ITConfig_0
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable17_37  ;; 0x40026058
   \   00000024   0x4284             CMP      R4,R0
   \   00000026   0xD02F             BEQ.N    ??DMA_ITConfig_0
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable17_38  ;; 0x40026070
   \   0000002C   0x4284             CMP      R4,R0
   \   0000002E   0xD02B             BEQ.N    ??DMA_ITConfig_0
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable17_39  ;; 0x40026088
   \   00000034   0x4284             CMP      R4,R0
   \   00000036   0xD027             BEQ.N    ??DMA_ITConfig_0
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable17_40  ;; 0x400260a0
   \   0000003C   0x4284             CMP      R4,R0
   \   0000003E   0xD023             BEQ.N    ??DMA_ITConfig_0
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable17_41  ;; 0x400260b8
   \   00000044   0x4284             CMP      R4,R0
   \   00000046   0xD01F             BEQ.N    ??DMA_ITConfig_0
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable17_42  ;; 0x40026410
   \   0000004C   0x4284             CMP      R4,R0
   \   0000004E   0xD01B             BEQ.N    ??DMA_ITConfig_0
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable17_43  ;; 0x40026428
   \   00000054   0x4284             CMP      R4,R0
   \   00000056   0xD017             BEQ.N    ??DMA_ITConfig_0
   \   00000058   0x....             LDR.N    R0,??DataTable15  ;; 0x40026440
   \   0000005A   0x4284             CMP      R4,R0
   \   0000005C   0xD014             BEQ.N    ??DMA_ITConfig_0
   \   0000005E   0x....             LDR.N    R0,??DataTable15_1  ;; 0x40026458
   \   00000060   0x4284             CMP      R4,R0
   \   00000062   0xD011             BEQ.N    ??DMA_ITConfig_0
   \   00000064   0x....             LDR.N    R0,??DataTable15_2  ;; 0x40026470
   \   00000066   0x4284             CMP      R4,R0
   \   00000068   0xD00E             BEQ.N    ??DMA_ITConfig_0
   \   0000006A   0x....             LDR.N    R0,??DataTable15_3  ;; 0x40026488
   \   0000006C   0x4284             CMP      R4,R0
   \   0000006E   0xD00B             BEQ.N    ??DMA_ITConfig_0
   \   00000070   0x....             LDR.N    R0,??DataTable15_4  ;; 0x400264a0
   \   00000072   0x4284             CMP      R4,R0
   \   00000074   0xD008             BEQ.N    ??DMA_ITConfig_0
   \   00000076   0x....             LDR.N    R0,??DataTable15_5  ;; 0x400264b8
   \   00000078   0x4284             CMP      R4,R0
   \   0000007A   0xD005             BEQ.N    ??DMA_ITConfig_0
   \   0000007C   0xF240 0x414F      MOVW     R1,#+1103
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable17
   \   00000084   0x.... 0x....      BL       assert_failed
   1104            assert_param(IS_DMA_CONFIG_IT(DMA_IT));
   \                     ??DMA_ITConfig_0: (+1)
   \   00000088   0xF035 0x009E      BICS     R0,R5,#0x9E
   \   0000008C   0x2800             CMP      R0,#+0
   \   0000008E   0xD101             BNE.N    ??DMA_ITConfig_1
   \   00000090   0x2D00             CMP      R5,#+0
   \   00000092   0xD105             BNE.N    ??DMA_ITConfig_2
   \                     ??DMA_ITConfig_1: (+1)
   \   00000094   0xF44F 0x618A      MOV      R1,#+1104
   \   00000098   0x.... 0x....      LDR.W    R0,??DataTable17
   \   0000009C   0x.... 0x....      BL       assert_failed
   1105            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \                     ??DMA_ITConfig_2: (+1)
   \   000000A0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000A2   0x2E00             CMP      R6,#+0
   \   000000A4   0xD008             BEQ.N    ??DMA_ITConfig_3
   \   000000A6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000A8   0x2E01             CMP      R6,#+1
   \   000000AA   0xD005             BEQ.N    ??DMA_ITConfig_3
   \   000000AC   0xF240 0x4151      MOVW     R1,#+1105
   \   000000B0   0x.... 0x....      LDR.W    R0,??DataTable17
   \   000000B4   0x.... 0x....      BL       assert_failed
   1106          
   1107            /* Check if the DMA_IT parameter contains a FIFO interrupt */
   1108            if ((DMA_IT & DMA_IT_FE) != 0)
   \                     ??DMA_ITConfig_3: (+1)
   \   000000B8   0x0628             LSLS     R0,R5,#+24
   \   000000BA   0xD50B             BPL.N    ??DMA_ITConfig_4
   1109            {
   1110              if (NewState != DISABLE)
   \   000000BC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000BE   0x2E00             CMP      R6,#+0
   \   000000C0   0xD004             BEQ.N    ??DMA_ITConfig_5
   1111              {
   1112                /* Enable the selected DMA FIFO interrupts */
   1113                DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
   \   000000C2   0x6960             LDR      R0,[R4, #+20]
   \   000000C4   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   000000C8   0x6160             STR      R0,[R4, #+20]
   \   000000CA   0xE003             B.N      ??DMA_ITConfig_4
   1114              }    
   1115              else 
   1116              {
   1117                /* Disable the selected DMA FIFO interrupts */
   1118                DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
   \                     ??DMA_ITConfig_5: (+1)
   \   000000CC   0x6960             LDR      R0,[R4, #+20]
   \   000000CE   0xF030 0x0080      BICS     R0,R0,#0x80
   \   000000D2   0x6160             STR      R0,[R4, #+20]
   1119              }
   1120            }
   1121          
   1122            /* Check if the DMA_IT parameter contains a Transfer interrupt */
   1123            if (DMA_IT != DMA_IT_FE)
   \                     ??DMA_ITConfig_4: (+1)
   \   000000D4   0x2D80             CMP      R5,#+128
   \   000000D6   0xD00D             BEQ.N    ??DMA_ITConfig_6
   1124            {
   1125              if (NewState != DISABLE)
   \   000000D8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000DA   0x2E00             CMP      R6,#+0
   \   000000DC   0xD005             BEQ.N    ??DMA_ITConfig_7
   1126              {
   1127                /* Enable the selected DMA transfer interrupts */
   1128                DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
   \   000000DE   0x6820             LDR      R0,[R4, #+0]
   \   000000E0   0xF015 0x011E      ANDS     R1,R5,#0x1E
   \   000000E4   0x4308             ORRS     R0,R1,R0
   \   000000E6   0x6020             STR      R0,[R4, #+0]
   \   000000E8   0xE004             B.N      ??DMA_ITConfig_6
   1129              }
   1130              else
   1131              {
   1132                /* Disable the selected DMA transfer interrupts */
   1133                DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
   \                     ??DMA_ITConfig_7: (+1)
   \   000000EA   0x6820             LDR      R0,[R4, #+0]
   \   000000EC   0xF015 0x011E      ANDS     R1,R5,#0x1E
   \   000000F0   0x4388             BICS     R0,R0,R1
   \   000000F2   0x6020             STR      R0,[R4, #+0]
   1134              }    
   1135            }
   1136          }
   \                     ??DMA_ITConfig_6: (+1)
   \   000000F4   0xBD70             POP      {R4-R6,PC}       ;; return
   1137          
   1138          /**
   1139            * @brief  Checks whether the specified DMAy Streamx interrupt has occurred or not.
   1140            * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
   1141            *          to 7 to select the DMA Stream.
   1142            * @param  DMA_IT: specifies the DMA interrupt source to check.
   1143            *          This parameter can be one of the following values:
   1144            *            @arg DMA_IT_TCIFx:  Streamx transfer complete interrupt
   1145            *            @arg DMA_IT_HTIFx:  Streamx half transfer complete interrupt
   1146            *            @arg DMA_IT_TEIFx:  Streamx transfer error interrupt
   1147            *            @arg DMA_IT_DMEIFx: Streamx direct mode error interrupt
   1148            *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
   1149            *         Where x can be 0 to 7 to select the DMA Stream.
   1150            * @retval The new state of DMA_IT (SET or RESET).
   1151            */

   \                                 In section .text, align 2, keep-with-next
   1152          ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
   1153          {
   \                     DMA_GetITStatus: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   1154            ITStatus bitstatus = RESET;
   \   00000008   0x2600             MOVS     R6,#+0
   1155            DMA_TypeDef* DMAy;
   1156            uint32_t tmpreg = 0, enablestatus = 0;
   \   0000000A   0xF05F 0x0800      MOVS     R8,#+0
   \   0000000E   0xF05F 0x0900      MOVS     R9,#+0
   1157          
   1158            /* Check the parameters */
   1159            assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable17_34  ;; 0x40026010
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xD040             BEQ.N    ??DMA_GetITStatus_0
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable17_35  ;; 0x40026028
   \   0000001E   0x4284             CMP      R4,R0
   \   00000020   0xD03C             BEQ.N    ??DMA_GetITStatus_0
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable17_36  ;; 0x40026040
   \   00000026   0x4284             CMP      R4,R0
   \   00000028   0xD038             BEQ.N    ??DMA_GetITStatus_0
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable17_37  ;; 0x40026058
   \   0000002E   0x4284             CMP      R4,R0
   \   00000030   0xD034             BEQ.N    ??DMA_GetITStatus_0
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable17_38  ;; 0x40026070
   \   00000036   0x4284             CMP      R4,R0
   \   00000038   0xD030             BEQ.N    ??DMA_GetITStatus_0
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable17_39  ;; 0x40026088
   \   0000003E   0x4284             CMP      R4,R0
   \   00000040   0xD02C             BEQ.N    ??DMA_GetITStatus_0
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable17_40  ;; 0x400260a0
   \   00000046   0x4284             CMP      R4,R0
   \   00000048   0xD028             BEQ.N    ??DMA_GetITStatus_0
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable17_41  ;; 0x400260b8
   \   0000004E   0x4284             CMP      R4,R0
   \   00000050   0xD024             BEQ.N    ??DMA_GetITStatus_0
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable17_42  ;; 0x40026410
   \   00000056   0x4284             CMP      R4,R0
   \   00000058   0xD020             BEQ.N    ??DMA_GetITStatus_0
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable17_43  ;; 0x40026428
   \   0000005E   0x4284             CMP      R4,R0
   \   00000060   0xD01C             BEQ.N    ??DMA_GetITStatus_0
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable17_44  ;; 0x40026440
   \   00000066   0x4284             CMP      R4,R0
   \   00000068   0xD018             BEQ.N    ??DMA_GetITStatus_0
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable17_45  ;; 0x40026458
   \   0000006E   0x4284             CMP      R4,R0
   \   00000070   0xD014             BEQ.N    ??DMA_GetITStatus_0
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable17_46  ;; 0x40026470
   \   00000076   0x4284             CMP      R4,R0
   \   00000078   0xD010             BEQ.N    ??DMA_GetITStatus_0
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable17_47  ;; 0x40026488
   \   0000007E   0x4284             CMP      R4,R0
   \   00000080   0xD00C             BEQ.N    ??DMA_GetITStatus_0
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable17_48  ;; 0x400264a0
   \   00000086   0x4284             CMP      R4,R0
   \   00000088   0xD008             BEQ.N    ??DMA_GetITStatus_0
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable17_49  ;; 0x400264b8
   \   0000008E   0x4284             CMP      R4,R0
   \   00000090   0xD004             BEQ.N    ??DMA_GetITStatus_0
   \   00000092   0xF240 0x4187      MOVW     R1,#+1159
   \   00000096   0x....             LDR.N    R0,??DataTable17
   \   00000098   0x.... 0x....      BL       assert_failed
   1160            assert_param(IS_DMA_GET_IT(DMA_IT));
   \                     ??DMA_GetITStatus_0: (+1)
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable17_50  ;; 0x10008020
   \   000000A0   0x4285             CMP      R5,R0
   \   000000A2   0xD07B             BEQ.N    ??DMA_GetITStatus_1
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable17_51  ;; 0x10004010
   \   000000A8   0x4285             CMP      R5,R0
   \   000000AA   0xD077             BEQ.N    ??DMA_GetITStatus_1
   \   000000AC   0x.... 0x....      LDR.W    R0,??DataTable17_52  ;; 0x10002008
   \   000000B0   0x4285             CMP      R5,R0
   \   000000B2   0xD073             BEQ.N    ??DMA_GetITStatus_1
   \   000000B4   0x....             LDR.N    R0,??DataTable17_53  ;; 0x10001004
   \   000000B6   0x4285             CMP      R5,R0
   \   000000B8   0xD070             BEQ.N    ??DMA_GetITStatus_1
   \   000000BA   0x....             LDR.N    R0,??DataTable17_54  ;; 0x90000001
   \   000000BC   0x4285             CMP      R5,R0
   \   000000BE   0xD06D             BEQ.N    ??DMA_GetITStatus_1
   \   000000C0   0x....             LDR.N    R0,??DataTable17_55  ;; 0x10008800
   \   000000C2   0x4285             CMP      R5,R0
   \   000000C4   0xD06A             BEQ.N    ??DMA_GetITStatus_1
   \   000000C6   0x....             LDR.N    R0,??DataTable17_56  ;; 0x10004400
   \   000000C8   0x4285             CMP      R5,R0
   \   000000CA   0xD067             BEQ.N    ??DMA_GetITStatus_1
   \   000000CC   0x....             LDR.N    R0,??DataTable17_57  ;; 0x10002200
   \   000000CE   0x4285             CMP      R5,R0
   \   000000D0   0xD064             BEQ.N    ??DMA_GetITStatus_1
   \   000000D2   0x....             LDR.N    R0,??DataTable17_58  ;; 0x10001100
   \   000000D4   0x4285             CMP      R5,R0
   \   000000D6   0xD061             BEQ.N    ??DMA_GetITStatus_1
   \   000000D8   0x....             LDR.N    R0,??DataTable17_59  ;; 0x90000040
   \   000000DA   0x4285             CMP      R5,R0
   \   000000DC   0xD05E             BEQ.N    ??DMA_GetITStatus_1
   \   000000DE   0x....             LDR.N    R0,??DataTable17_60  ;; 0x10208000
   \   000000E0   0x4285             CMP      R5,R0
   \   000000E2   0xD05B             BEQ.N    ??DMA_GetITStatus_1
   \   000000E4   0x....             LDR.N    R0,??DataTable17_61  ;; 0x10104000
   \   000000E6   0x4285             CMP      R5,R0
   \   000000E8   0xD058             BEQ.N    ??DMA_GetITStatus_1
   \   000000EA   0x....             LDR.N    R0,??DataTable17_62  ;; 0x10082000
   \   000000EC   0x4285             CMP      R5,R0
   \   000000EE   0xD055             BEQ.N    ??DMA_GetITStatus_1
   \   000000F0   0x....             LDR.N    R0,??DataTable17_63  ;; 0x10041000
   \   000000F2   0x4285             CMP      R5,R0
   \   000000F4   0xD052             BEQ.N    ??DMA_GetITStatus_1
   \   000000F6   0x....             LDR.N    R0,??DataTable17_64  ;; 0x90010000
   \   000000F8   0x4285             CMP      R5,R0
   \   000000FA   0xD04F             BEQ.N    ??DMA_GetITStatus_1
   \   000000FC   0x....             LDR.N    R0,??DataTable17_65  ;; 0x18008000
   \   000000FE   0x4285             CMP      R5,R0
   \   00000100   0xD04C             BEQ.N    ??DMA_GetITStatus_1
   \   00000102   0x....             LDR.N    R0,??DataTable17_66  ;; 0x14004000
   \   00000104   0x4285             CMP      R5,R0
   \   00000106   0xD049             BEQ.N    ??DMA_GetITStatus_1
   \   00000108   0x....             LDR.N    R0,??DataTable17_67  ;; 0x12002000
   \   0000010A   0x4285             CMP      R5,R0
   \   0000010C   0xD046             BEQ.N    ??DMA_GetITStatus_1
   \   0000010E   0x....             LDR.N    R0,??DataTable17_68  ;; 0x11001000
   \   00000110   0x4285             CMP      R5,R0
   \   00000112   0xD043             BEQ.N    ??DMA_GetITStatus_1
   \   00000114   0x....             LDR.N    R0,??DataTable17_69  ;; 0x90400000
   \   00000116   0x4285             CMP      R5,R0
   \   00000118   0xD040             BEQ.N    ??DMA_GetITStatus_1
   \   0000011A   0x....             LDR.N    R0,??DataTable17_70  ;; 0x20008020
   \   0000011C   0x4285             CMP      R5,R0
   \   0000011E   0xD03D             BEQ.N    ??DMA_GetITStatus_1
   \   00000120   0x....             LDR.N    R0,??DataTable17_71  ;; 0x20004010
   \   00000122   0x4285             CMP      R5,R0
   \   00000124   0xD03A             BEQ.N    ??DMA_GetITStatus_1
   \   00000126   0x....             LDR.N    R0,??DataTable17_72  ;; 0x20002008
   \   00000128   0x4285             CMP      R5,R0
   \   0000012A   0xD037             BEQ.N    ??DMA_GetITStatus_1
   \   0000012C   0x....             LDR.N    R0,??DataTable17_73  ;; 0x20001004
   \   0000012E   0x4285             CMP      R5,R0
   \   00000130   0xD034             BEQ.N    ??DMA_GetITStatus_1
   \   00000132   0x....             LDR.N    R0,??DataTable17_74  ;; 0xa0000001
   \   00000134   0x4285             CMP      R5,R0
   \   00000136   0xD031             BEQ.N    ??DMA_GetITStatus_1
   \   00000138   0x....             LDR.N    R0,??DataTable17_75  ;; 0x20008800
   \   0000013A   0x4285             CMP      R5,R0
   \   0000013C   0xD02E             BEQ.N    ??DMA_GetITStatus_1
   \   0000013E   0x....             LDR.N    R0,??DataTable17_76  ;; 0x20004400
   \   00000140   0x4285             CMP      R5,R0
   \   00000142   0xD02B             BEQ.N    ??DMA_GetITStatus_1
   \   00000144   0x....             LDR.N    R0,??DataTable17_77  ;; 0x20002200
   \   00000146   0x4285             CMP      R5,R0
   \   00000148   0xD028             BEQ.N    ??DMA_GetITStatus_1
   \   0000014A   0x....             LDR.N    R0,??DataTable17_78  ;; 0x20001100
   \   0000014C   0x4285             CMP      R5,R0
   \   0000014E   0xD025             BEQ.N    ??DMA_GetITStatus_1
   \   00000150   0x....             LDR.N    R0,??DataTable17_79  ;; 0xa0000040
   \   00000152   0x4285             CMP      R5,R0
   \   00000154   0xD022             BEQ.N    ??DMA_GetITStatus_1
   \   00000156   0x....             LDR.N    R0,??DataTable17_80  ;; 0x20208000
   \   00000158   0x4285             CMP      R5,R0
   \   0000015A   0xD01F             BEQ.N    ??DMA_GetITStatus_1
   \   0000015C   0x....             LDR.N    R0,??DataTable17_81  ;; 0x20104000
   \   0000015E   0x4285             CMP      R5,R0
   \   00000160   0xD01C             BEQ.N    ??DMA_GetITStatus_1
   \   00000162   0x....             LDR.N    R0,??DataTable17_82  ;; 0x20082000
   \   00000164   0x4285             CMP      R5,R0
   \   00000166   0xD019             BEQ.N    ??DMA_GetITStatus_1
   \   00000168   0x....             LDR.N    R0,??DataTable17_83  ;; 0x20041000
   \   0000016A   0x4285             CMP      R5,R0
   \   0000016C   0xD016             BEQ.N    ??DMA_GetITStatus_1
   \   0000016E   0x....             LDR.N    R0,??DataTable17_84  ;; 0xa0010000
   \   00000170   0x4285             CMP      R5,R0
   \   00000172   0xD013             BEQ.N    ??DMA_GetITStatus_1
   \   00000174   0x....             LDR.N    R0,??DataTable17_85  ;; 0x28008000
   \   00000176   0x4285             CMP      R5,R0
   \   00000178   0xD010             BEQ.N    ??DMA_GetITStatus_1
   \   0000017A   0x....             LDR.N    R0,??DataTable17_86  ;; 0x24004000
   \   0000017C   0x4285             CMP      R5,R0
   \   0000017E   0xD00D             BEQ.N    ??DMA_GetITStatus_1
   \   00000180   0x....             LDR.N    R0,??DataTable17_87  ;; 0x22002000
   \   00000182   0x4285             CMP      R5,R0
   \   00000184   0xD00A             BEQ.N    ??DMA_GetITStatus_1
   \   00000186   0x....             LDR.N    R0,??DataTable17_88  ;; 0x21001000
   \   00000188   0x4285             CMP      R5,R0
   \   0000018A   0xD007             BEQ.N    ??DMA_GetITStatus_1
   \   0000018C   0x....             LDR.N    R0,??DataTable17_89  ;; 0xa0400000
   \   0000018E   0x4285             CMP      R5,R0
   \   00000190   0xD004             BEQ.N    ??DMA_GetITStatus_1
   \   00000192   0xF44F 0x6191      MOV      R1,#+1160
   \   00000196   0x....             LDR.N    R0,??DataTable17
   \   00000198   0x.... 0x....      BL       assert_failed
   1161           
   1162            /* Determine the DMA to which belongs the stream */
   1163            if (DMAy_Streamx < DMA2_Stream0)
   \                     ??DMA_GetITStatus_1: (+1)
   \   0000019C   0x....             LDR.N    R0,??DataTable17_42  ;; 0x40026410
   \   0000019E   0x4284             CMP      R4,R0
   \   000001A0   0xD202             BCS.N    ??DMA_GetITStatus_2
   1164            {
   1165              /* DMAy_Streamx belongs to DMA1 */
   1166              DMAy = DMA1; 
   \   000001A2   0x....             LDR.N    R0,??DataTable17_30  ;; 0x40026000
   \   000001A4   0x0007             MOVS     R7,R0
   \   000001A6   0xE001             B.N      ??DMA_GetITStatus_3
   1167            } 
   1168            else 
   1169            {
   1170              /* DMAy_Streamx belongs to DMA2 */
   1171              DMAy = DMA2; 
   \                     ??DMA_GetITStatus_2: (+1)
   \   000001A8   0x....             LDR.N    R0,??DataTable17_31  ;; 0x40026400
   \   000001AA   0x0007             MOVS     R7,R0
   1172            }
   1173          
   1174            /* Check if the interrupt enable bit is in the CR or FCR register */
   1175            if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
   \                     ??DMA_GetITStatus_3: (+1)
   \   000001AC   0x....             LDR.N    R0,??DataTable17_90  ;; 0xf3c0f3c
   \   000001AE   0x4205             TST      R5,R0
   \   000001B0   0xD008             BEQ.N    ??DMA_GetITStatus_4
   1176            {
   1177              /* Get the interrupt enable position mask in CR register */
   1178              tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
   \   000001B2   0x0AE8             LSRS     R0,R5,#+11
   \   000001B4   0xF010 0x001E      ANDS     R0,R0,#0x1E
   \   000001B8   0x4680             MOV      R8,R0
   1179              
   1180              /* Check the enable bit in CR register */
   1181              enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
   \   000001BA   0x6820             LDR      R0,[R4, #+0]
   \   000001BC   0xEA18 0x0000      ANDS     R0,R8,R0
   \   000001C0   0x4681             MOV      R9,R0
   \   000001C2   0xE003             B.N      ??DMA_GetITStatus_5
   1182            }
   1183            else 
   1184            {
   1185              /* Check the enable bit in FCR register */
   1186              enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
   \                     ??DMA_GetITStatus_4: (+1)
   \   000001C4   0x6960             LDR      R0,[R4, #+20]
   \   000001C6   0xF010 0x0080      ANDS     R0,R0,#0x80
   \   000001CA   0x4681             MOV      R9,R0
   1187            }
   1188           
   1189            /* Check if the interrupt pending flag is in LISR or HISR */
   1190            if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
   \                     ??DMA_GetITStatus_5: (+1)
   \   000001CC   0x00A8             LSLS     R0,R5,#+2
   \   000001CE   0xD502             BPL.N    ??DMA_GetITStatus_6
   1191            {
   1192              /* Get DMAy HISR register value */
   1193              tmpreg = DMAy->HISR ;
   \   000001D0   0x6878             LDR      R0,[R7, #+4]
   \   000001D2   0x4680             MOV      R8,R0
   \   000001D4   0xE001             B.N      ??DMA_GetITStatus_7
   1194            }
   1195            else
   1196            {
   1197              /* Get DMAy LISR register value */
   1198              tmpreg = DMAy->LISR ;
   \                     ??DMA_GetITStatus_6: (+1)
   \   000001D6   0x6838             LDR      R0,[R7, #+0]
   \   000001D8   0x4680             MOV      R8,R0
   1199            } 
   1200          
   1201            /* mask all reserved bits */
   1202            tmpreg &= (uint32_t)RESERVED_MASK;
   \                     ??DMA_GetITStatus_7: (+1)
   \   000001DA   0x....             LDR.N    R0,??DataTable17_32  ;; 0xf7d0f7d
   \   000001DC   0xEA10 0x0808      ANDS     R8,R0,R8
   1203          
   1204            /* Check the status of the specified DMA interrupt */
   1205            if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
   \   000001E0   0xEA18 0x0F05      TST      R8,R5
   \   000001E4   0xD005             BEQ.N    ??DMA_GetITStatus_8
   \   000001E6   0xF1B9 0x0F00      CMP      R9,#+0
   \   000001EA   0xD002             BEQ.N    ??DMA_GetITStatus_8
   1206            {
   1207              /* DMA_IT is set */
   1208              bitstatus = SET;
   \   000001EC   0x2001             MOVS     R0,#+1
   \   000001EE   0x0006             MOVS     R6,R0
   \   000001F0   0xE001             B.N      ??DMA_GetITStatus_9
   1209            }
   1210            else
   1211            {
   1212              /* DMA_IT is reset */
   1213              bitstatus = RESET;
   \                     ??DMA_GetITStatus_8: (+1)
   \   000001F2   0x2000             MOVS     R0,#+0
   \   000001F4   0x0006             MOVS     R6,R0
   1214            }
   1215          
   1216            /* Return the DMA_IT status */
   1217            return  bitstatus;
   \                     ??DMA_GetITStatus_9: (+1)
   \   000001F6   0x0030             MOVS     R0,R6
   \   000001F8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001FA   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
   1218          }
   1219          
   1220          /**
   1221            * @brief  Clears the DMAy Streamx's interrupt pending bits.
   1222            * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
   1223            *          to 7 to select the DMA Stream.
   1224            * @param  DMA_IT: specifies the DMA interrupt pending bit to clear.
   1225            *          This parameter can be any combination of the following values:
   1226            *            @arg DMA_IT_TCIFx:  Streamx transfer complete interrupt
   1227            *            @arg DMA_IT_HTIFx:  Streamx half transfer complete interrupt
   1228            *            @arg DMA_IT_TEIFx:  Streamx transfer error interrupt
   1229            *            @arg DMA_IT_DMEIFx: Streamx direct mode error interrupt
   1230            *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
   1231            *         Where x can be 0 to 7 to select the DMA Stream.
   1232            * @retval None
   1233            */

   \                                 In section .text, align 2, keep-with-next
   1234          void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
   1235          {
   \                     DMA_ClearITPendingBit: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1236            DMA_TypeDef* DMAy;
   1237          
   1238            /* Check the parameters */
   1239            assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
   \   00000006   0x....             LDR.N    R0,??DataTable17_34  ;; 0x40026010
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD031             BEQ.N    ??DMA_ClearITPendingBit_0
   \   0000000C   0x....             LDR.N    R0,??DataTable17_35  ;; 0x40026028
   \   0000000E   0x4284             CMP      R4,R0
   \   00000010   0xD02E             BEQ.N    ??DMA_ClearITPendingBit_0
   \   00000012   0x....             LDR.N    R0,??DataTable17_36  ;; 0x40026040
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD02B             BEQ.N    ??DMA_ClearITPendingBit_0
   \   00000018   0x....             LDR.N    R0,??DataTable17_37  ;; 0x40026058
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD028             BEQ.N    ??DMA_ClearITPendingBit_0
   \   0000001E   0x....             LDR.N    R0,??DataTable17_38  ;; 0x40026070
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD025             BEQ.N    ??DMA_ClearITPendingBit_0
   \   00000024   0x....             LDR.N    R0,??DataTable17_39  ;; 0x40026088
   \   00000026   0x4284             CMP      R4,R0
   \   00000028   0xD022             BEQ.N    ??DMA_ClearITPendingBit_0
   \   0000002A   0x....             LDR.N    R0,??DataTable17_40  ;; 0x400260a0
   \   0000002C   0x4284             CMP      R4,R0
   \   0000002E   0xD01F             BEQ.N    ??DMA_ClearITPendingBit_0
   \   00000030   0x....             LDR.N    R0,??DataTable17_41  ;; 0x400260b8
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD01C             BEQ.N    ??DMA_ClearITPendingBit_0
   \   00000036   0x....             LDR.N    R0,??DataTable17_42  ;; 0x40026410
   \   00000038   0x4284             CMP      R4,R0
   \   0000003A   0xD019             BEQ.N    ??DMA_ClearITPendingBit_0
   \   0000003C   0x....             LDR.N    R0,??DataTable17_43  ;; 0x40026428
   \   0000003E   0x4284             CMP      R4,R0
   \   00000040   0xD016             BEQ.N    ??DMA_ClearITPendingBit_0
   \   00000042   0x....             LDR.N    R0,??DataTable17_44  ;; 0x40026440
   \   00000044   0x4284             CMP      R4,R0
   \   00000046   0xD013             BEQ.N    ??DMA_ClearITPendingBit_0
   \   00000048   0x....             LDR.N    R0,??DataTable17_45  ;; 0x40026458
   \   0000004A   0x4284             CMP      R4,R0
   \   0000004C   0xD010             BEQ.N    ??DMA_ClearITPendingBit_0
   \   0000004E   0x....             LDR.N    R0,??DataTable17_46  ;; 0x40026470
   \   00000050   0x4284             CMP      R4,R0
   \   00000052   0xD00D             BEQ.N    ??DMA_ClearITPendingBit_0
   \   00000054   0x....             LDR.N    R0,??DataTable17_47  ;; 0x40026488
   \   00000056   0x4284             CMP      R4,R0
   \   00000058   0xD00A             BEQ.N    ??DMA_ClearITPendingBit_0
   \   0000005A   0x....             LDR.N    R0,??DataTable17_48  ;; 0x400264a0
   \   0000005C   0x4284             CMP      R4,R0
   \   0000005E   0xD007             BEQ.N    ??DMA_ClearITPendingBit_0
   \   00000060   0x....             LDR.N    R0,??DataTable17_49  ;; 0x400264b8
   \   00000062   0x4284             CMP      R4,R0
   \   00000064   0xD004             BEQ.N    ??DMA_ClearITPendingBit_0
   \   00000066   0xF240 0x41D7      MOVW     R1,#+1239
   \   0000006A   0x....             LDR.N    R0,??DataTable17
   \   0000006C   0x.... 0x....      BL       assert_failed
   1240            assert_param(IS_DMA_CLEAR_IT(DMA_IT));
   \                     ??DMA_ClearITPendingBit_0: (+1)
   \   00000070   0xF015 0x5040      ANDS     R0,R5,#0x30000000
   \   00000074   0xF1B0 0x5F40      CMP      R0,#+805306368
   \   00000078   0xD007             BEQ.N    ??DMA_ClearITPendingBit_1
   \   0000007A   0xF015 0x5F40      TST      R5,#0x30000000
   \   0000007E   0xD004             BEQ.N    ??DMA_ClearITPendingBit_1
   \   00000080   0x2D00             CMP      R5,#+0
   \   00000082   0xD002             BEQ.N    ??DMA_ClearITPendingBit_1
   \   00000084   0x....             LDR.N    R0,??DataTable17_91  ;; 0x40820082
   \   00000086   0x4205             TST      R5,R0
   \   00000088   0xD004             BEQ.N    ??DMA_ClearITPendingBit_2
   \                     ??DMA_ClearITPendingBit_1: (+1)
   \   0000008A   0xF44F 0x619B      MOV      R1,#+1240
   \   0000008E   0x....             LDR.N    R0,??DataTable17
   \   00000090   0x.... 0x....      BL       assert_failed
   1241          
   1242            /* Determine the DMA to which belongs the stream */
   1243            if (DMAy_Streamx < DMA2_Stream0)
   \                     ??DMA_ClearITPendingBit_2: (+1)
   \   00000094   0x....             LDR.N    R0,??DataTable17_42  ;; 0x40026410
   \   00000096   0x4284             CMP      R4,R0
   \   00000098   0xD202             BCS.N    ??DMA_ClearITPendingBit_3
   1244            {
   1245              /* DMAy_Streamx belongs to DMA1 */
   1246              DMAy = DMA1; 
   \   0000009A   0x....             LDR.N    R0,??DataTable17_30  ;; 0x40026000
   \   0000009C   0x0006             MOVS     R6,R0
   \   0000009E   0xE001             B.N      ??DMA_ClearITPendingBit_4
   1247            } 
   1248            else 
   1249            {
   1250              /* DMAy_Streamx belongs to DMA2 */
   1251              DMAy = DMA2; 
   \                     ??DMA_ClearITPendingBit_3: (+1)
   \   000000A0   0x....             LDR.N    R0,??DataTable17_31  ;; 0x40026400
   \   000000A2   0x0006             MOVS     R6,R0
   1252            }
   1253          
   1254            /* Check if LIFCR or HIFCR register is targeted */
   1255            if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
   \                     ??DMA_ClearITPendingBit_4: (+1)
   \   000000A4   0x00A8             LSLS     R0,R5,#+2
   \   000000A6   0xD503             BPL.N    ??DMA_ClearITPendingBit_5
   1256            {
   1257              /* Set DMAy HIFCR register clear interrupt bits */
   1258              DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
   \   000000A8   0x....             LDR.N    R0,??DataTable17_32  ;; 0xf7d0f7d
   \   000000AA   0x4028             ANDS     R0,R0,R5
   \   000000AC   0x60F0             STR      R0,[R6, #+12]
   \   000000AE   0xE002             B.N      ??DMA_ClearITPendingBit_6
   1259            }
   1260            else 
   1261            {
   1262              /* Set DMAy LIFCR register clear interrupt bits */
   1263              DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
   \                     ??DMA_ClearITPendingBit_5: (+1)
   \   000000B0   0x....             LDR.N    R0,??DataTable17_32  ;; 0xf7d0f7d
   \   000000B2   0x4028             ANDS     R0,R0,R5
   \   000000B4   0x60B0             STR      R0,[R6, #+8]
   1264            }   
   1265          }
   \                     ??DMA_ClearITPendingBit_6: (+1)
   \   000000B6   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x40026010         DC32     0x40026010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x40026028         DC32     0x40026028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x40026040         DC32     0x40026040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x40026058         DC32     0x40026058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x40026070         DC32     0x40026070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x40026088         DC32     0x40026088

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x400260A0         DC32     0x400260a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x400260B8         DC32     0x400260b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x40026410         DC32     0x40026410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x40026428         DC32     0x40026428

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x40026440         DC32     0x40026440

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x40026458         DC32     0x40026458

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x40026470         DC32     0x40026470

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x40026488         DC32     0x40026488

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x400264A0         DC32     0x400264a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x400264B8         DC32     0x400264b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x40026008         DC32     0x40026008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x2000003D         DC32     0x2000003d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x4002600C         DC32     0x4002600c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x20000F40         DC32     0x20000f40

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x203D0000         DC32     0x203d0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   0x40026408         DC32     0x40026408

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x4002640C         DC32     0x4002640c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0xF01C803F         DC32     0xf01c803f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   0x40026010         DC32     0x40026010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \   00000000   0x40026028         DC32     0x40026028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_3:
   \   00000000   0x40026040         DC32     0x40026040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_4:
   \   00000000   0x40026058         DC32     0x40026058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_5:
   \   00000000   0x40026070         DC32     0x40026070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_6:
   \   00000000   0x40026088         DC32     0x40026088

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_7:
   \   00000000   0x400260A0         DC32     0x400260a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_8:
   \   00000000   0x400260B8         DC32     0x400260b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_9:
   \   00000000   0x40026410         DC32     0x40026410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_10:
   \   00000000   0x40026428         DC32     0x40026428

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   0x40026440         DC32     0x40026440

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \   00000000   0x40026458         DC32     0x40026458

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_2:
   \   00000000   0x40026470         DC32     0x40026470

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_3:
   \   00000000   0x40026488         DC32     0x40026488

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_4:
   \   00000000   0x400264A0         DC32     0x400264a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_5:
   \   00000000   0x400264B8         DC32     0x400264b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0x10000020         DC32     0x10000020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \   00000000   0x10000010         DC32     0x10000010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_3:
   \   00000000   0x10000008         DC32     0x10000008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_4:
   \   00000000   0x10800004         DC32     0x10800004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_5:
   \   00000000   0x10800001         DC32     0x10800001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_6:
   \   00000000   0x10000800         DC32     0x10000800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_7:
   \   00000000   0x10000400         DC32     0x10000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_8:
   \   00000000   0x10000200         DC32     0x10000200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_9:
   \   00000000   0x10000100         DC32     0x10000100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_10:
   \   00000000   0x10000040         DC32     0x10000040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_11:
   \   00000000   0x10100000         DC32     0x10100000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_12:
   \   00000000   0x10080000         DC32     0x10080000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_13:
   \   00000000   0x10040000         DC32     0x10040000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_14:
   \   00000000   0x10010000         DC32     0x10010000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_15:
   \   00000000   0x20000020         DC32     0x20000020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_16:
   \   00000000   0x20000010         DC32     0x20000010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_17:
   \   00000000   0x20000008         DC32     0x20000008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_18:
   \   00000000   0x20000004         DC32     0x20000004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_19:
   \   00000000   0x20000001         DC32     0x20000001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_20:
   \   00000000   0x20000800         DC32     0x20000800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_21:
   \   00000000   0x20000400         DC32     0x20000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_22:
   \   00000000   0x20000200         DC32     0x20000200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_23:
   \   00000000   0x20000100         DC32     0x20000100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_24:
   \   00000000   0x20000040         DC32     0x20000040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_25:
   \   00000000   0x20200000         DC32     0x20200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_26:
   \   00000000   0x20100000         DC32     0x20100000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_27:
   \   00000000   0x20080000         DC32     0x20080000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_28:
   \   00000000   0x20040000         DC32     0x20040000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_29:
   \   00000000   0x20010000         DC32     0x20010000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_30:
   \   00000000   0x40026000         DC32     0x40026000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_31:
   \   00000000   0x40026400         DC32     0x40026400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_32:
   \   00000000   0x0F7D0F7D         DC32     0xf7d0f7d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_33:
   \   00000000   0xC082F082         DC32     0xc082f082

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_34:
   \   00000000   0x40026010         DC32     0x40026010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_35:
   \   00000000   0x40026028         DC32     0x40026028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_36:
   \   00000000   0x40026040         DC32     0x40026040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_37:
   \   00000000   0x40026058         DC32     0x40026058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_38:
   \   00000000   0x40026070         DC32     0x40026070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_39:
   \   00000000   0x40026088         DC32     0x40026088

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_40:
   \   00000000   0x400260A0         DC32     0x400260a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_41:
   \   00000000   0x400260B8         DC32     0x400260b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_42:
   \   00000000   0x40026410         DC32     0x40026410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_43:
   \   00000000   0x40026428         DC32     0x40026428

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_44:
   \   00000000   0x40026440         DC32     0x40026440

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_45:
   \   00000000   0x40026458         DC32     0x40026458

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_46:
   \   00000000   0x40026470         DC32     0x40026470

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_47:
   \   00000000   0x40026488         DC32     0x40026488

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_48:
   \   00000000   0x400264A0         DC32     0x400264a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_49:
   \   00000000   0x400264B8         DC32     0x400264b8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_50:
   \   00000000   0x10008020         DC32     0x10008020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_51:
   \   00000000   0x10004010         DC32     0x10004010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_52:
   \   00000000   0x10002008         DC32     0x10002008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_53:
   \   00000000   0x10001004         DC32     0x10001004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_54:
   \   00000000   0x90000001         DC32     0x90000001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_55:
   \   00000000   0x10008800         DC32     0x10008800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_56:
   \   00000000   0x10004400         DC32     0x10004400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_57:
   \   00000000   0x10002200         DC32     0x10002200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_58:
   \   00000000   0x10001100         DC32     0x10001100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_59:
   \   00000000   0x90000040         DC32     0x90000040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_60:
   \   00000000   0x10208000         DC32     0x10208000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_61:
   \   00000000   0x10104000         DC32     0x10104000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_62:
   \   00000000   0x10082000         DC32     0x10082000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_63:
   \   00000000   0x10041000         DC32     0x10041000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_64:
   \   00000000   0x90010000         DC32     0x90010000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_65:
   \   00000000   0x18008000         DC32     0x18008000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_66:
   \   00000000   0x14004000         DC32     0x14004000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_67:
   \   00000000   0x12002000         DC32     0x12002000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_68:
   \   00000000   0x11001000         DC32     0x11001000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_69:
   \   00000000   0x90400000         DC32     0x90400000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_70:
   \   00000000   0x20008020         DC32     0x20008020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_71:
   \   00000000   0x20004010         DC32     0x20004010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_72:
   \   00000000   0x20002008         DC32     0x20002008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_73:
   \   00000000   0x20001004         DC32     0x20001004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_74:
   \   00000000   0xA0000001         DC32     0xa0000001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_75:
   \   00000000   0x20008800         DC32     0x20008800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_76:
   \   00000000   0x20004400         DC32     0x20004400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_77:
   \   00000000   0x20002200         DC32     0x20002200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_78:
   \   00000000   0x20001100         DC32     0x20001100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_79:
   \   00000000   0xA0000040         DC32     0xa0000040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_80:
   \   00000000   0x20208000         DC32     0x20208000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_81:
   \   00000000   0x20104000         DC32     0x20104000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_82:
   \   00000000   0x20082000         DC32     0x20082000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_83:
   \   00000000   0x20041000         DC32     0x20041000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_84:
   \   00000000   0xA0010000         DC32     0xa0010000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_85:
   \   00000000   0x28008000         DC32     0x28008000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_86:
   \   00000000   0x24004000         DC32     0x24004000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_87:
   \   00000000   0x22002000         DC32     0x22002000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_88:
   \   00000000   0x21001000         DC32     0x21001000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_89:
   \   00000000   0xA0400000         DC32     0xa0400000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_90:
   \   00000000   0x0F3C0F3C         DC32     0xf3c0f3c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_91:
   \   00000000   0x40820082         DC32     0x40820082

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x44 0x3A          DC8 44H, 3AH, 5CH, 49H, 41H, 52H, 20H, 57H
   \              0x5C 0x49    
   \              0x41 0x52    
   \              0x20 0x57    
   \   00000008   0x6F 0x72          DC8 6FH, 72H, 6BH, 73H, 70H, 61H, 63H, 65H
   \              0x6B 0x73    
   \              0x70 0x61    
   \              0x63 0x65    
   \   00000010   0x5C 0x53          DC8 5CH, 53H, 54H, 4DH, 33H, 32H, 46H, 34H
   \              0x54 0x4D    
   \              0x33 0x32    
   \              0x46 0x34    
   \   00000018   0x30 0x37          DC8 30H, 37H, 5CH, 53H, 54H, 4DH, 33H, 32H
   \              0x5C 0x53    
   \              0x54 0x4D    
   \              0x33 0x32    
   \   00000020   0x46 0x34          DC8 46H, 34H, 2DH, 44H, 69H, 73H, 63H, 6FH
   \              0x2D 0x44    
   \              0x69 0x73    
   \              0x63 0x6F    
   \   00000028   0x76 0x65          DC8 76H, 65H, 72H, 79H, 5FH, 46H, 57H, 5FH
   \              0x72 0x79    
   \              0x5F 0x46    
   \              0x57 0x5F    
   \   00000030   0x56 0x31          DC8 56H, 31H, 2EH, 31H, 2EH, 30H, 5CH, 4CH
   \              0x2E 0x31    
   \              0x2E 0x30    
   \              0x5C 0x4C    
   \   00000038   0x69 0x62          DC8 69H, 62H, 72H, 61H, 72H, 69H, 65H, 73H
   \              0x72 0x61    
   \              0x72 0x69    
   \              0x65 0x73    
   \   00000040   0x5C 0x53          DC8 5CH, 53H, 54H, 4DH, 33H, 32H, 46H, 34H
   \              0x54 0x4D    
   \              0x33 0x32    
   \              0x46 0x34    
   \   00000048   0x78 0x78          DC8 78H, 78H, 5FH, 53H, 74H, 64H, 50H, 65H
   \              0x5F 0x53    
   \              0x74 0x64    
   \              0x50 0x65    
   \   00000050   0x72 0x69          DC8 72H, 69H, 70H, 68H, 5FH, 44H, 72H, 69H
   \              0x70 0x68    
   \              0x5F 0x44    
   \              0x72 0x69    
   \   00000058   0x76 0x65          DC8 76H, 65H, 72H, 5CH, 73H, 72H, 63H, 5CH
   \              0x72 0x5C    
   \              0x73 0x72    
   \              0x63 0x5C    
   \   00000060   0x73 0x74          DC8 73H, 74H, 6DH, 33H, 32H, 66H, 34H, 78H
   \              0x6D 0x33    
   \              0x32 0x66    
   \              0x34 0x78    
   \   00000068   0x78 0x5F          DC8 78H, 5FH, 64H, 6DH, 61H, 2EH, 63H, 0
   \              0x64 0x6D    
   \              0x61 0x2E    
   \              0x63 0x00    
   1266          
   1267          /**
   1268            * @}
   1269            */
   1270          
   1271          /**
   1272            * @}
   1273            */
   1274          
   1275          /**
   1276            * @}
   1277            */
   1278          
   1279          /**
   1280            * @}
   1281            */
   1282          
   1283          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   DMA_ClearFlag
        16   -> assert_failed
      16   DMA_ClearITPendingBit
        16   -> assert_failed
      16   DMA_Cmd
        16   -> assert_failed
       8   DMA_DeInit
         8   -> assert_failed
      16   DMA_DoubleBufferModeCmd
        16   -> assert_failed
      16   DMA_DoubleBufferModeConfig
        16   -> assert_failed
      16   DMA_FlowControllerConfig
        16   -> assert_failed
      16   DMA_GetCmdStatus
        16   -> assert_failed
       8   DMA_GetCurrDataCounter
         8   -> assert_failed
      16   DMA_GetCurrentMemoryTarget
        16   -> assert_failed
      16   DMA_GetFIFOStatus
        16   -> assert_failed
      24   DMA_GetFlagStatus
        24   -> assert_failed
      32   DMA_GetITStatus
        32   -> assert_failed
      16   DMA_ITConfig
        16   -> assert_failed
      16   DMA_Init
        16   -> assert_failed
      16   DMA_MemoryTargetConfig
        16   -> assert_failed
      16   DMA_PeriphIncOffsetSizeConfig
        16   -> assert_failed
      16   DMA_SetCurrDataCounter
        16   -> assert_failed
       0   DMA_StructInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_10
       4  ??DataTable14_2
       4  ??DataTable14_3
       4  ??DataTable14_4
       4  ??DataTable14_5
       4  ??DataTable14_6
       4  ??DataTable14_7
       4  ??DataTable14_8
       4  ??DataTable14_9
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable15_2
       4  ??DataTable15_3
       4  ??DataTable15_4
       4  ??DataTable15_5
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_10
       4  ??DataTable17_11
       4  ??DataTable17_12
       4  ??DataTable17_13
       4  ??DataTable17_14
       4  ??DataTable17_15
       4  ??DataTable17_16
       4  ??DataTable17_17
       4  ??DataTable17_18
       4  ??DataTable17_19
       4  ??DataTable17_2
       4  ??DataTable17_20
       4  ??DataTable17_21
       4  ??DataTable17_22
       4  ??DataTable17_23
       4  ??DataTable17_24
       4  ??DataTable17_25
       4  ??DataTable17_26
       4  ??DataTable17_27
       4  ??DataTable17_28
       4  ??DataTable17_29
       4  ??DataTable17_3
       4  ??DataTable17_30
       4  ??DataTable17_31
       4  ??DataTable17_32
       4  ??DataTable17_33
       4  ??DataTable17_34
       4  ??DataTable17_35
       4  ??DataTable17_36
       4  ??DataTable17_37
       4  ??DataTable17_38
       4  ??DataTable17_39
       4  ??DataTable17_4
       4  ??DataTable17_40
       4  ??DataTable17_41
       4  ??DataTable17_42
       4  ??DataTable17_43
       4  ??DataTable17_44
       4  ??DataTable17_45
       4  ??DataTable17_46
       4  ??DataTable17_47
       4  ??DataTable17_48
       4  ??DataTable17_49
       4  ??DataTable17_5
       4  ??DataTable17_50
       4  ??DataTable17_51
       4  ??DataTable17_52
       4  ??DataTable17_53
       4  ??DataTable17_54
       4  ??DataTable17_55
       4  ??DataTable17_56
       4  ??DataTable17_57
       4  ??DataTable17_58
       4  ??DataTable17_59
       4  ??DataTable17_6
       4  ??DataTable17_60
       4  ??DataTable17_61
       4  ??DataTable17_62
       4  ??DataTable17_63
       4  ??DataTable17_64
       4  ??DataTable17_65
       4  ??DataTable17_66
       4  ??DataTable17_67
       4  ??DataTable17_68
       4  ??DataTable17_69
       4  ??DataTable17_7
       4  ??DataTable17_70
       4  ??DataTable17_71
       4  ??DataTable17_72
       4  ??DataTable17_73
       4  ??DataTable17_74
       4  ??DataTable17_75
       4  ??DataTable17_76
       4  ??DataTable17_77
       4  ??DataTable17_78
       4  ??DataTable17_79
       4  ??DataTable17_8
       4  ??DataTable17_80
       4  ??DataTable17_81
       4  ??DataTable17_82
       4  ??DataTable17_83
       4  ??DataTable17_84
       4  ??DataTable17_85
       4  ??DataTable17_86
       4  ??DataTable17_87
       4  ??DataTable17_88
       4  ??DataTable17_89
       4  ??DataTable17_9
       4  ??DataTable17_90
       4  ??DataTable17_91
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
     112  ?_0
     198  DMA_ClearFlag
     184  DMA_ClearITPendingBit
     192  DMA_Cmd
     490  DMA_DeInit
     196  DMA_DoubleBufferModeCmd
     184  DMA_DoubleBufferModeConfig
     154  DMA_FlowControllerConfig
     168  DMA_GetCmdStatus
     118  DMA_GetCurrDataCounter
     166  DMA_GetCurrentMemoryTarget
     158  DMA_GetFIFOStatus
     524  DMA_GetFlagStatus
     510  DMA_GetITStatus
     246  DMA_ITConfig
     694  DMA_Init
     182  DMA_MemoryTargetConfig
     158  DMA_PeriphIncOffsetSizeConfig
     118  DMA_SetCurrDataCounter
      62  DMA_StructInit

 
   112 bytes in section .rodata
 5 234 bytes in section .text
 
 5 234 bytes of CODE  memory
   112 bytes of CONST memory

Errors: none
Warnings: none
