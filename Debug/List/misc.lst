###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       06/May/2016  23:31:29
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\IAR
#        Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\misc.c
#    Command line =  
#        "D:\IAR
#        Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\misc.c"
#        -D USE_STDPERIPH_DRIVER -D STM32F4XX -D USE_FULL_ASSERT -lCN "D:\IAR
#        Workspace\STM32F407\VCP_ESP\Debug\List" -o "D:\IAR
#        Workspace\STM32F407\VCP_ESP\Debug\Obj" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\"
#        -I "D:\IAR Workspace\STM32F407\VCP_ESP\..\Libraries\CMSIS\Include\" -I
#        "D:\IAR Workspace\STM32F407\VCP_ESP\..\Utilities\STM32F4-Discovery\"
#        -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\..\Libraries\CMSIS\ST\STM32F4xx\Include\"
#        -I "D:\IAR Workspace\STM32F407\VCP_ESP\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_conf\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\cdc\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\otg\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\core\" -On --use_c++_inline -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  D:\IAR Workspace\STM32F407\VCP_ESP\Debug\List\misc.lst
#    Object file  =  D:\IAR Workspace\STM32F407\VCP_ESP\Debug\Obj\misc.o
#
###############################################################################

D:\IAR Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\misc.c
      1          /**
      2            ******************************************************************************
      3            * @file    misc.c
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    30-September-2011
      7            * @brief   This file provides all the miscellaneous firmware functions (add-on
      8            *          to CMSIS functions).
      9            *          
     10            *  @verbatim   
     11            *                               
     12            *          ===================================================================      
     13            *                        How to configure Interrupts using driver 
     14            *          ===================================================================      
     15            * 
     16            *            This section provide functions allowing to configure the NVIC interrupts (IRQ).
     17            *            The Cortex-M4 exceptions are managed by CMSIS functions.
     18            *
     19            *            1. Configure the NVIC Priority Grouping using NVIC_PriorityGroupConfig()
     20            *                function according to the following table.
     21           
     22            *  The table below gives the allowed values of the pre-emption priority and subpriority according
     23            *  to the Priority Grouping configuration performed by NVIC_PriorityGroupConfig function
     24            *    ==========================================================================================================================
     25            *      NVIC_PriorityGroup   | NVIC_IRQChannelPreemptionPriority | NVIC_IRQChannelSubPriority  |       Description
     26            *    ==========================================================================================================================
     27            *     NVIC_PriorityGroup_0  |                0                  |            0-15             | 0 bits for pre-emption priority
     28            *                           |                                   |                             | 4 bits for subpriority
     29            *    --------------------------------------------------------------------------------------------------------------------------
     30            *     NVIC_PriorityGroup_1  |                0-1                |            0-7              | 1 bits for pre-emption priority
     31            *                           |                                   |                             | 3 bits for subpriority
     32            *    --------------------------------------------------------------------------------------------------------------------------    
     33            *     NVIC_PriorityGroup_2  |                0-3                |            0-3              | 2 bits for pre-emption priority
     34            *                           |                                   |                             | 2 bits for subpriority
     35            *    --------------------------------------------------------------------------------------------------------------------------    
     36            *     NVIC_PriorityGroup_3  |                0-7                |            0-1              | 3 bits for pre-emption priority
     37            *                           |                                   |                             | 1 bits for subpriority
     38            *    --------------------------------------------------------------------------------------------------------------------------    
     39            *     NVIC_PriorityGroup_4  |                0-15               |            0                | 4 bits for pre-emption priority
     40            *                           |                                   |                             | 0 bits for subpriority                       
     41            *    ==========================================================================================================================     
     42            *
     43            *            2. Enable and Configure the priority of the selected IRQ Channels using NVIC_Init()  
     44            *
     45            * @note  When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
     46            *        The pending IRQ priority will be managed only by the subpriority.
     47            *
     48            * @note  IRQ priority order (sorted by highest to lowest priority):
     49            *         - Lowest pre-emption priority
     50            *         - Lowest subpriority
     51            *         - Lowest hardware priority (IRQ number)
     52            *
     53            *  @endverbatim
     54            *
     55            ******************************************************************************
     56            * @attention
     57            *
     58            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     59            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     60            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     61            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     62            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     63            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     64            *
     65            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     66            ******************************************************************************
     67            */
     68          
     69          /* Includes ------------------------------------------------------------------*/
     70          #include "misc.h"
     71          
     72          /** @addtogroup STM32F4xx_StdPeriph_Driver
     73            * @{
     74            */
     75          
     76          /** @defgroup MISC 
     77            * @brief MISC driver modules
     78            * @{
     79            */
     80          
     81          /* Private typedef -----------------------------------------------------------*/
     82          /* Private define ------------------------------------------------------------*/
     83          #define AIRCR_VECTKEY_MASK    ((uint32_t)0x05FA0000)
     84          
     85          /* Private macro -------------------------------------------------------------*/
     86          /* Private variables ---------------------------------------------------------*/
     87          /* Private function prototypes -----------------------------------------------*/
     88          /* Private functions ---------------------------------------------------------*/
     89          
     90          /** @defgroup MISC_Private_Functions
     91            * @{
     92            */
     93          
     94          /**
     95            * @brief  Configures the priority grouping: pre-emption priority and subpriority.
     96            * @param  NVIC_PriorityGroup: specifies the priority grouping bits length. 
     97            *   This parameter can be one of the following values:
     98            *     @arg NVIC_PriorityGroup_0: 0 bits for pre-emption priority
     99            *                                4 bits for subpriority
    100            *     @arg NVIC_PriorityGroup_1: 1 bits for pre-emption priority
    101            *                                3 bits for subpriority
    102            *     @arg NVIC_PriorityGroup_2: 2 bits for pre-emption priority
    103            *                                2 bits for subpriority
    104            *     @arg NVIC_PriorityGroup_3: 3 bits for pre-emption priority
    105            *                                1 bits for subpriority
    106            *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
    107            *                                0 bits for subpriority
    108            * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
    109            *         The pending IRQ priority will be managed only by the subpriority. 
    110            * @retval None
    111            */

   \                                 In section .text, align 2, keep-with-next
    112          void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
    113          {
   \                     NVIC_PriorityGroupConfig: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    114            /* Check the parameters */
    115            assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
   \   00000004   0xF5B4 0x6FE0      CMP      R4,#+1792
   \   00000008   0xD00F             BEQ.N    ??NVIC_PriorityGroupConfig_0
   \   0000000A   0xF5B4 0x6FC0      CMP      R4,#+1536
   \   0000000E   0xD00C             BEQ.N    ??NVIC_PriorityGroupConfig_0
   \   00000010   0xF5B4 0x6FA0      CMP      R4,#+1280
   \   00000014   0xD009             BEQ.N    ??NVIC_PriorityGroupConfig_0
   \   00000016   0xF5B4 0x6F80      CMP      R4,#+1024
   \   0000001A   0xD006             BEQ.N    ??NVIC_PriorityGroupConfig_0
   \   0000001C   0xF5B4 0x7F40      CMP      R4,#+768
   \   00000020   0xD003             BEQ.N    ??NVIC_PriorityGroupConfig_0
   \   00000022   0x2173             MOVS     R1,#+115
   \   00000024   0x....             LDR.N    R0,??DataTable4
   \   00000026   0x.... 0x....      BL       assert_failed
    116            
    117            /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
    118            SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
   \                     ??NVIC_PriorityGroupConfig_0: (+1)
   \   0000002A   0x....             LDR.N    R0,??DataTable4_1  ;; 0x5fa0000
   \   0000002C   0x4320             ORRS     R0,R0,R4
   \   0000002E   0x....             LDR.N    R1,??DataTable4_2  ;; 0xe000ed0c
   \   00000030   0x6008             STR      R0,[R1, #+0]
    119          }
   \   00000032   0xBD10             POP      {R4,PC}          ;; return
    120          
    121          /**
    122            * @brief  Initializes the NVIC peripheral according to the specified
    123            *         parameters in the NVIC_InitStruct.
    124            * @note   To configure interrupts priority correctly, the NVIC_PriorityGroupConfig()
    125            *         function should be called before. 
    126            * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
    127            *         the configuration information for the specified NVIC peripheral.
    128            * @retval None
    129            */

   \                                 In section .text, align 2, keep-with-next
    130          void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
    131          {
   \                     NVIC_Init: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
    132            uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0x2600             MOVS     R6,#+0
   \   00000008   0x270F             MOVS     R7,#+15
    133            
    134            /* Check the parameters */
    135            assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
   \   0000000A   0x78E0             LDRB     R0,[R4, #+3]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD006             BEQ.N    ??NVIC_Init_0
   \   00000010   0x78E0             LDRB     R0,[R4, #+3]
   \   00000012   0x2801             CMP      R0,#+1
   \   00000014   0xD003             BEQ.N    ??NVIC_Init_0
   \   00000016   0x2187             MOVS     R1,#+135
   \   00000018   0x....             LDR.N    R0,??DataTable4
   \   0000001A   0x.... 0x....      BL       assert_failed
    136            assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
   \                     ??NVIC_Init_0: (+1)
   \   0000001E   0x7860             LDRB     R0,[R4, #+1]
   \   00000020   0x2810             CMP      R0,#+16
   \   00000022   0xDB03             BLT.N    ??NVIC_Init_1
   \   00000024   0x2188             MOVS     R1,#+136
   \   00000026   0x....             LDR.N    R0,??DataTable4
   \   00000028   0x.... 0x....      BL       assert_failed
    137            assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
   \                     ??NVIC_Init_1: (+1)
   \   0000002C   0x78A0             LDRB     R0,[R4, #+2]
   \   0000002E   0x2810             CMP      R0,#+16
   \   00000030   0xDB03             BLT.N    ??NVIC_Init_2
   \   00000032   0x2189             MOVS     R1,#+137
   \   00000034   0x....             LDR.N    R0,??DataTable4
   \   00000036   0x.... 0x....      BL       assert_failed
    138              
    139            if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
   \                     ??NVIC_Init_2: (+1)
   \   0000003A   0x78E0             LDRB     R0,[R4, #+3]
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD021             BEQ.N    ??NVIC_Init_3
    140            {
    141              /* Compute the Corresponding IRQ Priority --------------------------------*/    
    142              tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
   \   00000040   0x....             LDR.N    R0,??DataTable4_2  ;; 0xe000ed0c
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   00000048   0xF5D0 0x60E0      RSBS     R0,R0,#+1792
   \   0000004C   0x0A00             LSRS     R0,R0,#+8
   \   0000004E   0x0005             MOVS     R5,R0
    143              tmppre = (0x4 - tmppriority);
   \   00000050   0xF1D5 0x0004      RSBS     R0,R5,#+4
   \   00000054   0x0006             MOVS     R6,R0
    144              tmpsub = tmpsub >> tmppriority;
   \   00000056   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000058   0x412F             ASRS     R7,R7,R5
    145          
    146              tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
   \   0000005A   0x7860             LDRB     R0,[R4, #+1]
   \   0000005C   0x40B0             LSLS     R0,R0,R6
   \   0000005E   0x0005             MOVS     R5,R0
    147              tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
   \   00000060   0x78A0             LDRB     R0,[R4, #+2]
   \   00000062   0x4038             ANDS     R0,R7,R0
   \   00000064   0x4305             ORRS     R5,R0,R5
    148                  
    149              tmppriority = tmppriority << 0x04;
   \   00000066   0x012D             LSLS     R5,R5,#+4
    150                  
    151              NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
   \   00000068   0x....             LDR.N    R0,??DataTable4_3  ;; 0xe000e400
   \   0000006A   0x7821             LDRB     R1,[R4, #+0]
   \   0000006C   0x540D             STRB     R5,[R1, R0]
    152              
    153              /* Enable the Selected IRQ Channels --------------------------------------*/
    154              NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    155                (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
   \   0000006E   0x2001             MOVS     R0,#+1
   \   00000070   0x7821             LDRB     R1,[R4, #+0]
   \   00000072   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \   00000076   0x4088             LSLS     R0,R0,R1
   \   00000078   0x....             LDR.N    R1,??DataTable4_4  ;; 0xe000e100
   \   0000007A   0x7822             LDRB     R2,[R4, #+0]
   \   0000007C   0x1152             ASRS     R2,R2,#+5
   \   0000007E   0xF841 0x0022      STR      R0,[R1, R2, LSL #+2]
   \   00000082   0xE009             B.N      ??NVIC_Init_4
    156            }
    157            else
    158            {
    159              /* Disable the Selected IRQ Channels -------------------------------------*/
    160              NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    161                (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
   \                     ??NVIC_Init_3: (+1)
   \   00000084   0x2001             MOVS     R0,#+1
   \   00000086   0x7821             LDRB     R1,[R4, #+0]
   \   00000088   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \   0000008C   0x4088             LSLS     R0,R0,R1
   \   0000008E   0x....             LDR.N    R1,??DataTable4_5  ;; 0xe000e180
   \   00000090   0x7822             LDRB     R2,[R4, #+0]
   \   00000092   0x1152             ASRS     R2,R2,#+5
   \   00000094   0xF841 0x0022      STR      R0,[R1, R2, LSL #+2]
    162            }
    163          }
   \                     ??NVIC_Init_4: (+1)
   \   00000098   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    164          
    165          /**
    166            * @brief  Sets the vector table location and Offset.
    167            * @param  NVIC_VectTab: specifies if the vector table is in RAM or FLASH memory.
    168            *   This parameter can be one of the following values:
    169            *     @arg NVIC_VectTab_RAM: Vector Table in internal SRAM.
    170            *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
    171            * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
    172            * @retval None
    173            */

   \                                 In section .text, align 2, keep-with-next
    174          void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
    175          { 
   \                     NVIC_SetVectorTable: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    176            /* Check the parameters */
    177            assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
   \   00000006   0xF1B4 0x5F00      CMP      R4,#+536870912
   \   0000000A   0xD006             BEQ.N    ??NVIC_SetVectorTable_0
   \   0000000C   0xF1B4 0x6F00      CMP      R4,#+134217728
   \   00000010   0xD003             BEQ.N    ??NVIC_SetVectorTable_0
   \   00000012   0x21B1             MOVS     R1,#+177
   \   00000014   0x....             LDR.N    R0,??DataTable4
   \   00000016   0x.... 0x....      BL       assert_failed
    178            assert_param(IS_NVIC_OFFSET(Offset));  
   \                     ??NVIC_SetVectorTable_0: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable4_6  ;; 0xfffff
   \   0000001C   0x4285             CMP      R5,R0
   \   0000001E   0xD303             BCC.N    ??NVIC_SetVectorTable_1
   \   00000020   0x21B2             MOVS     R1,#+178
   \   00000022   0x....             LDR.N    R0,??DataTable4
   \   00000024   0x.... 0x....      BL       assert_failed
    179             
    180            SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
   \                     ??NVIC_SetVectorTable_1: (+1)
   \   00000028   0x....             LDR.N    R0,??DataTable4_7  ;; 0x1fffff80
   \   0000002A   0x4028             ANDS     R0,R0,R5
   \   0000002C   0x4320             ORRS     R0,R0,R4
   \   0000002E   0x....             LDR.N    R1,??DataTable4_8  ;; 0xe000ed08
   \   00000030   0x6008             STR      R0,[R1, #+0]
    181          }
   \   00000032   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    182          
    183          /**
    184            * @brief  Selects the condition for the system to enter low power mode.
    185            * @param  LowPowerMode: Specifies the new mode for the system to enter low power mode.
    186            *   This parameter can be one of the following values:
    187            *     @arg NVIC_LP_SEVONPEND: Low Power SEV on Pend.
    188            *     @arg NVIC_LP_SLEEPDEEP: Low Power DEEPSLEEP request.
    189            *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
    190            * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
    191            * @retval None
    192            */

   \                                 In section .text, align 2, keep-with-next
    193          void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
    194          {
   \                     NVIC_SystemLPConfig: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    195            /* Check the parameters */
    196            assert_param(IS_NVIC_LP(LowPowerMode));
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C10             CMP      R4,#+16
   \   0000000A   0xD009             BEQ.N    ??NVIC_SystemLPConfig_0
   \   0000000C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000E   0x2C04             CMP      R4,#+4
   \   00000010   0xD006             BEQ.N    ??NVIC_SystemLPConfig_0
   \   00000012   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000014   0x2C02             CMP      R4,#+2
   \   00000016   0xD003             BEQ.N    ??NVIC_SystemLPConfig_0
   \   00000018   0x21C4             MOVS     R1,#+196
   \   0000001A   0x....             LDR.N    R0,??DataTable4
   \   0000001C   0x.... 0x....      BL       assert_failed
    197            assert_param(IS_FUNCTIONAL_STATE(NewState));  
   \                     ??NVIC_SystemLPConfig_0: (+1)
   \   00000020   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000022   0x2D00             CMP      R5,#+0
   \   00000024   0xD006             BEQ.N    ??NVIC_SystemLPConfig_1
   \   00000026   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000028   0x2D01             CMP      R5,#+1
   \   0000002A   0xD003             BEQ.N    ??NVIC_SystemLPConfig_1
   \   0000002C   0x21C5             MOVS     R1,#+197
   \   0000002E   0x....             LDR.N    R0,??DataTable4
   \   00000030   0x.... 0x....      BL       assert_failed
    198            
    199            if (NewState != DISABLE)
   \                     ??NVIC_SystemLPConfig_1: (+1)
   \   00000034   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000036   0x2D00             CMP      R5,#+0
   \   00000038   0xD006             BEQ.N    ??NVIC_SystemLPConfig_2
    200            {
    201              SCB->SCR |= LowPowerMode;
   \   0000003A   0x....             LDR.N    R0,??DataTable4_9  ;; 0xe000ed10
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000040   0x4320             ORRS     R0,R4,R0
   \   00000042   0x....             LDR.N    R1,??DataTable4_9  ;; 0xe000ed10
   \   00000044   0x6008             STR      R0,[R1, #+0]
   \   00000046   0xE005             B.N      ??NVIC_SystemLPConfig_3
    202            }
    203            else
    204            {
    205              SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
   \                     ??NVIC_SystemLPConfig_2: (+1)
   \   00000048   0x....             LDR.N    R0,??DataTable4_9  ;; 0xe000ed10
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004E   0x43A0             BICS     R0,R0,R4
   \   00000050   0x....             LDR.N    R1,??DataTable4_9  ;; 0xe000ed10
   \   00000052   0x6008             STR      R0,[R1, #+0]
    206            }
    207          }
   \                     ??NVIC_SystemLPConfig_3: (+1)
   \   00000054   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    208          
    209          /**
    210            * @brief  Configures the SysTick clock source.
    211            * @param  SysTick_CLKSource: specifies the SysTick clock source.
    212            *   This parameter can be one of the following values:
    213            *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
    214            *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
    215            * @retval None
    216            */

   \                                 In section .text, align 2, keep-with-next
    217          void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
    218          {
   \                     SysTick_CLKSourceConfig: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    219            /* Check the parameters */
    220            assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
   \   00000004   0x2C04             CMP      R4,#+4
   \   00000006   0xD006             BEQ.N    ??SysTick_CLKSourceConfig_0
   \   00000008   0xF114 0x0F05      CMN      R4,#+5
   \   0000000C   0xD003             BEQ.N    ??SysTick_CLKSourceConfig_0
   \   0000000E   0x21DC             MOVS     R1,#+220
   \   00000010   0x....             LDR.N    R0,??DataTable4
   \   00000012   0x.... 0x....      BL       assert_failed
    221            if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
   \                     ??SysTick_CLKSourceConfig_0: (+1)
   \   00000016   0x2C04             CMP      R4,#+4
   \   00000018   0xD106             BNE.N    ??SysTick_CLKSourceConfig_1
    222            {
    223              SysTick->CTRL |= SysTick_CLKSource_HCLK;
   \   0000001A   0x....             LDR.N    R0,??DataTable4_10  ;; 0xe000e010
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000022   0x....             LDR.N    R1,??DataTable4_10  ;; 0xe000e010
   \   00000024   0x6008             STR      R0,[R1, #+0]
   \   00000026   0xE005             B.N      ??SysTick_CLKSourceConfig_2
    224            }
    225            else
    226            {
    227              SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
   \                     ??SysTick_CLKSourceConfig_1: (+1)
   \   00000028   0x....             LDR.N    R0,??DataTable4_10  ;; 0xe000e010
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0xF030 0x0004      BICS     R0,R0,#0x4
   \   00000030   0x....             LDR.N    R1,??DataTable4_10  ;; 0xe000e010
   \   00000032   0x6008             STR      R0,[R1, #+0]
    228            }
    229          }
   \                     ??SysTick_CLKSourceConfig_2: (+1)
   \   00000034   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x05FA0000         DC32     0x5fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0xE000ED0C         DC32     0xe000ed0c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x000FFFFF         DC32     0xfffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x1FFFFF80         DC32     0x1fffff80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0xE000ED08         DC32     0xe000ed08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0xE000ED10         DC32     0xe000ed10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0xE000E010         DC32     0xe000e010

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x44 0x3A          DC8 44H, 3AH, 5CH, 49H, 41H, 52H, 20H, 57H
   \              0x5C 0x49    
   \              0x41 0x52    
   \              0x20 0x57    
   \   00000008   0x6F 0x72          DC8 6FH, 72H, 6BH, 73H, 70H, 61H, 63H, 65H
   \              0x6B 0x73    
   \              0x70 0x61    
   \              0x63 0x65    
   \   00000010   0x5C 0x53          DC8 5CH, 53H, 54H, 4DH, 33H, 32H, 46H, 34H
   \              0x54 0x4D    
   \              0x33 0x32    
   \              0x46 0x34    
   \   00000018   0x30 0x37          DC8 30H, 37H, 5CH, 53H, 54H, 4DH, 33H, 32H
   \              0x5C 0x53    
   \              0x54 0x4D    
   \              0x33 0x32    
   \   00000020   0x46 0x34          DC8 46H, 34H, 2DH, 44H, 69H, 73H, 63H, 6FH
   \              0x2D 0x44    
   \              0x69 0x73    
   \              0x63 0x6F    
   \   00000028   0x76 0x65          DC8 76H, 65H, 72H, 79H, 5FH, 46H, 57H, 5FH
   \              0x72 0x79    
   \              0x5F 0x46    
   \              0x57 0x5F    
   \   00000030   0x56 0x31          DC8 56H, 31H, 2EH, 31H, 2EH, 30H, 5CH, 4CH
   \              0x2E 0x31    
   \              0x2E 0x30    
   \              0x5C 0x4C    
   \   00000038   0x69 0x62          DC8 69H, 62H, 72H, 61H, 72H, 69H, 65H, 73H
   \              0x72 0x61    
   \              0x72 0x69    
   \              0x65 0x73    
   \   00000040   0x5C 0x53          DC8 5CH, 53H, 54H, 4DH, 33H, 32H, 46H, 34H
   \              0x54 0x4D    
   \              0x33 0x32    
   \              0x46 0x34    
   \   00000048   0x78 0x78          DC8 78H, 78H, 5FH, 53H, 74H, 64H, 50H, 65H
   \              0x5F 0x53    
   \              0x74 0x64    
   \              0x50 0x65    
   \   00000050   0x72 0x69          DC8 72H, 69H, 70H, 68H, 5FH, 44H, 72H, 69H
   \              0x70 0x68    
   \              0x5F 0x44    
   \              0x72 0x69    
   \   00000058   0x76 0x65          DC8 76H, 65H, 72H, 5CH, 73H, 72H, 63H, 5CH
   \              0x72 0x5C    
   \              0x73 0x72    
   \              0x63 0x5C    
   \   00000060   0x6D 0x69          DC8 6DH, 69H, 73H, 63H, 2EH, 63H, 0
   \              0x73 0x63    
   \              0x2E 0x63    
   \              0x00         
   \   00000067   0x00               DC8 0
    230          
    231          /**
    232            * @}
    233            */
    234          
    235          /**
    236            * @}
    237            */
    238          
    239          /**
    240            * @}
    241            */
    242          
    243          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   NVIC_Init
        24   -> assert_failed
       8   NVIC_PriorityGroupConfig
         8   -> assert_failed
      16   NVIC_SetVectorTable
        16   -> assert_failed
      16   NVIC_SystemLPConfig
        16   -> assert_failed
       8   SysTick_CLKSourceConfig
         8   -> assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
     104  ?_0
     154  NVIC_Init
      52  NVIC_PriorityGroupConfig
      52  NVIC_SetVectorTable
      86  NVIC_SystemLPConfig
      54  SysTick_CLKSourceConfig

 
 104 bytes in section .rodata
 442 bytes in section .text
 
 442 bytes of CODE  memory
 104 bytes of CONST memory

Errors: none
Warnings: none
