###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       06/May/2016  23:31:36
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\IAR
#        Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_tim.c
#    Command line =  
#        "D:\IAR
#        Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_tim.c"
#        -D USE_STDPERIPH_DRIVER -D STM32F4XX -D USE_FULL_ASSERT -lCN "D:\IAR
#        Workspace\STM32F407\VCP_ESP\Debug\List" -o "D:\IAR
#        Workspace\STM32F407\VCP_ESP\Debug\Obj" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\"
#        -I "D:\IAR Workspace\STM32F407\VCP_ESP\..\Libraries\CMSIS\Include\" -I
#        "D:\IAR Workspace\STM32F407\VCP_ESP\..\Utilities\STM32F4-Discovery\"
#        -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\..\Libraries\CMSIS\ST\STM32F4xx\Include\"
#        -I "D:\IAR Workspace\STM32F407\VCP_ESP\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_conf\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\cdc\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\otg\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\core\" -On --use_c++_inline -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        D:\IAR Workspace\STM32F407\VCP_ESP\Debug\List\stm32f4xx_tim.lst
#    Object file  =  
#        D:\IAR Workspace\STM32F407\VCP_ESP\Debug\Obj\stm32f4xx_tim.o
#
###############################################################################

D:\IAR Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_tim.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f4xx_tim.c
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    30-September-2011
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionalities of the TIM peripheral:
      9            *            - TimeBase management
     10            *            - Output Compare management
     11            *            - Input Capture management
     12            *            - Advanced-control timers (TIM1 and TIM8) specific features  
     13            *            - Interrupts, DMA and flags management
     14            *            - Clocks management
     15            *            - Synchronization management
     16            *            - Specific interface management
     17            *            - Specific remapping management      
     18            *              
     19            *  @verbatim
     20            *  
     21            *          ===================================================================
     22            *                                 How to use this driver
     23            *          ===================================================================
     24            *          This driver provides functions to configure and program the TIM 
     25            *          of all STM32F4xx devices.
     26            *          These functions are split in 9 groups: 
     27            *   
     28            *          1. TIM TimeBase management: this group includes all needed functions 
     29            *             to configure the TM Timebase unit:
     30            *                   - Set/Get Prescaler
     31            *                   - Set/Get Autoreload  
     32            *                   - Counter modes configuration
     33            *                   - Set Clock division  
     34            *                   - Select the One Pulse mode
     35            *                   - Update Request Configuration
     36            *                   - Update Disable Configuration
     37            *                   - Auto-Preload Configuration 
     38            *                   - Enable/Disable the counter     
     39            *                 
     40            *          2. TIM Output Compare management: this group includes all needed 
     41            *             functions to configure the Capture/Compare unit used in Output 
     42            *             compare mode: 
     43            *                   - Configure each channel, independently, in Output Compare mode
     44            *                   - Select the output compare modes
     45            *                   - Select the Polarities of each channel
     46            *                   - Set/Get the Capture/Compare register values
     47            *                   - Select the Output Compare Fast mode 
     48            *                   - Select the Output Compare Forced mode  
     49            *                   - Output Compare-Preload Configuration 
     50            *                   - Clear Output Compare Reference
     51            *                   - Select the OCREF Clear signal
     52            *                   - Enable/Disable the Capture/Compare Channels    
     53            *                   
     54            *          3. TIM Input Capture management: this group includes all needed 
     55            *             functions to configure the Capture/Compare unit used in 
     56            *             Input Capture mode:
     57            *                   - Configure each channel in input capture mode
     58            *                   - Configure Channel1/2 in PWM Input mode
     59            *                   - Set the Input Capture Prescaler
     60            *                   - Get the Capture/Compare values      
     61            *                   
     62            *          4. Advanced-control timers (TIM1 and TIM8) specific features
     63            *                   - Configures the Break input, dead time, Lock level, the OSSI,
     64            *                      the OSSR State and the AOE(automatic output enable)
     65            *                   - Enable/Disable the TIM peripheral Main Outputs
     66            *                   - Select the Commutation event
     67            *                   - Set/Reset the Capture Compare Preload Control bit
     68            *                              
     69            *          5. TIM interrupts, DMA and flags management
     70            *                   - Enable/Disable interrupt sources
     71            *                   - Get flags status
     72            *                   - Clear flags/ Pending bits
     73            *                   - Enable/Disable DMA requests 
     74            *                   - Configure DMA burst mode
     75            *                   - Select CaptureCompare DMA request  
     76            *              
     77            *          6. TIM clocks management: this group includes all needed functions 
     78            *             to configure the clock controller unit:
     79            *                   - Select internal/External clock
     80            *                   - Select the external clock mode: ETR(Mode1/Mode2), TIx or ITRx
     81            *         
     82            *          7. TIM synchronization management: this group includes all needed 
     83            *             functions to configure the Synchronization unit:
     84            *                   - Select Input Trigger  
     85            *                   - Select Output Trigger  
     86            *                   - Select Master Slave Mode 
     87            *                   - ETR Configuration when used as external trigger   
     88            *     
     89            *          8. TIM specific interface management, this group includes all 
     90            *             needed functions to use the specific TIM interface:
     91            *                   - Encoder Interface Configuration
     92            *                   - Select Hall Sensor   
     93            *         
     94            *          9. TIM specific remapping management includes the Remapping 
     95            *             configuration of specific timers               
     96            *   
     97            *  @endverbatim
     98            *    
     99            ******************************************************************************
    100            * @attention
    101            *
    102            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
    103            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
    104            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
    105            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
    106            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
    107            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
    108            *
    109            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
    110            ******************************************************************************
    111            */
    112          
    113          /* Includes ------------------------------------------------------------------*/
    114          #include "stm32f4xx_tim.h"
    115          #include "stm32f4xx_rcc.h"
    116          
    117          /** @addtogroup STM32F4xx_StdPeriph_Driver
    118            * @{
    119            */
    120          
    121          /** @defgroup TIM 
    122            * @brief TIM driver modules
    123            * @{
    124            */
    125          
    126          /* Private typedef -----------------------------------------------------------*/
    127          /* Private define ------------------------------------------------------------*/
    128          
    129          /* ---------------------- TIM registers bit mask ------------------------ */
    130          #define SMCR_ETR_MASK      ((uint16_t)0x00FF) 
    131          #define CCMR_OFFSET        ((uint16_t)0x0018)
    132          #define CCER_CCE_SET       ((uint16_t)0x0001)  
    133          #define	CCER_CCNE_SET      ((uint16_t)0x0004) 
    134          #define CCMR_OC13M_MASK    ((uint16_t)0xFF8F)
    135          #define CCMR_OC24M_MASK    ((uint16_t)0x8FFF) 
    136          
    137          /* Private macro -------------------------------------------------------------*/
    138          /* Private variables ---------------------------------------------------------*/
    139          /* Private function prototypes -----------------------------------------------*/
    140          static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
    141                                 uint16_t TIM_ICFilter);
    142          static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
    143                                 uint16_t TIM_ICFilter);
    144          static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
    145                                 uint16_t TIM_ICFilter);
    146          static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
    147                                 uint16_t TIM_ICFilter);
    148          
    149          /* Private functions ---------------------------------------------------------*/
    150          
    151          /** @defgroup TIM_Private_Functions
    152            * @{
    153            */
    154          
    155          /** @defgroup TIM_Group1 TimeBase management functions
    156           *  @brief   TimeBase management functions 
    157           *
    158          @verbatim   
    159           ===============================================================================
    160                                 TimeBase management functions
    161           ===============================================================================  
    162            
    163                 ===================================================================      
    164                        TIM Driver: how to use it in Timing(Time base) Mode
    165                 =================================================================== 
    166                 To use the Timer in Timing(Time base) mode, the following steps are mandatory:
    167                 
    168                 1. Enable TIM clock using RCC_APBxPeriphClockCmd(RCC_APBxPeriph_TIMx, ENABLE) function
    169                              
    170                 2. Fill the TIM_TimeBaseInitStruct with the desired parameters.
    171                 
    172                 3. Call TIM_TimeBaseInit(TIMx, &TIM_TimeBaseInitStruct) to configure the Time Base unit
    173                    with the corresponding configuration
    174                    
    175                 4. Enable the NVIC if you need to generate the update interrupt. 
    176                    
    177                 5. Enable the corresponding interrupt using the function TIM_ITConfig(TIMx, TIM_IT_Update) 
    178                 
    179                 6. Call the TIM_Cmd(ENABLE) function to enable the TIM counter.
    180                       
    181                 Note1: All other functions can be used separately to modify, if needed,
    182                    a specific feature of the Timer. 
    183          
    184          @endverbatim
    185            * @{
    186            */
    187            
    188          /**
    189            * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
    190            * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
    191            * @retval None
    192          
    193            */

   \                                 In section .text, align 2, keep-with-next
    194          void TIM_DeInit(TIM_TypeDef* TIMx)
    195          {
   \                     TIM_DeInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    196            /* Check the parameters */
    197            assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x40010000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD037             BEQ.N    ??TIM_DeInit_0
   \   0000000C   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000010   0xD034             BEQ.N    ??TIM_DeInit_0
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable10_1  ;; 0x40000400
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xD030             BEQ.N    ??TIM_DeInit_0
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable10_2  ;; 0x40000800
   \   0000001E   0x4284             CMP      R4,R0
   \   00000020   0xD02C             BEQ.N    ??TIM_DeInit_0
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable10_3  ;; 0x40000c00
   \   00000026   0x4284             CMP      R4,R0
   \   00000028   0xD028             BEQ.N    ??TIM_DeInit_0
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable10_4  ;; 0x40001000
   \   0000002E   0x4284             CMP      R4,R0
   \   00000030   0xD024             BEQ.N    ??TIM_DeInit_0
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable10_5  ;; 0x40001400
   \   00000036   0x4284             CMP      R4,R0
   \   00000038   0xD020             BEQ.N    ??TIM_DeInit_0
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable10_6  ;; 0x40010400
   \   0000003E   0x4284             CMP      R4,R0
   \   00000040   0xD01C             BEQ.N    ??TIM_DeInit_0
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable10_7  ;; 0x40014000
   \   00000046   0x4284             CMP      R4,R0
   \   00000048   0xD018             BEQ.N    ??TIM_DeInit_0
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable10_8  ;; 0x40014400
   \   0000004E   0x4284             CMP      R4,R0
   \   00000050   0xD014             BEQ.N    ??TIM_DeInit_0
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable10_9  ;; 0x40014800
   \   00000056   0x4284             CMP      R4,R0
   \   00000058   0xD010             BEQ.N    ??TIM_DeInit_0
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable10_10  ;; 0x40001800
   \   0000005E   0x4284             CMP      R4,R0
   \   00000060   0xD00C             BEQ.N    ??TIM_DeInit_0
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable10_11  ;; 0x40001c00
   \   00000066   0x4284             CMP      R4,R0
   \   00000068   0xD008             BEQ.N    ??TIM_DeInit_0
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable12  ;; 0x40002000
   \   0000006E   0x4284             CMP      R4,R0
   \   00000070   0xD004             BEQ.N    ??TIM_DeInit_0
   \   00000072   0x21C5             MOVS     R1,#+197
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable10_12
   \   00000078   0x.... 0x....      BL       assert_failed
    198           
    199            if (TIMx == TIM1)
   \                     ??TIM_DeInit_0: (+1)
   \   0000007C   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x40010000
   \   00000080   0x4284             CMP      R4,R0
   \   00000082   0xD108             BNE.N    ??TIM_DeInit_1
    200            {
    201              RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
   \   00000084   0x2101             MOVS     R1,#+1
   \   00000086   0x2001             MOVS     R0,#+1
   \   00000088   0x.... 0x....      BL       RCC_APB2PeriphResetCmd
    202              RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
   \   0000008C   0x2100             MOVS     R1,#+0
   \   0000008E   0x2001             MOVS     R0,#+1
   \   00000090   0x.... 0x....      BL       RCC_APB2PeriphResetCmd
   \   00000094   0xE0AE             B.N      ??TIM_DeInit_2
    203            } 
    204            else if (TIMx == TIM2) 
   \                     ??TIM_DeInit_1: (+1)
   \   00000096   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   0000009A   0xD108             BNE.N    ??TIM_DeInit_3
    205            {     
    206              RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
   \   0000009C   0x2101             MOVS     R1,#+1
   \   0000009E   0x2001             MOVS     R0,#+1
   \   000000A0   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
    207              RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
   \   000000A4   0x2100             MOVS     R1,#+0
   \   000000A6   0x2001             MOVS     R0,#+1
   \   000000A8   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
   \   000000AC   0xE0A2             B.N      ??TIM_DeInit_2
    208            }  
    209            else if (TIMx == TIM3)
   \                     ??TIM_DeInit_3: (+1)
   \   000000AE   0x.... 0x....      LDR.W    R0,??DataTable10_1  ;; 0x40000400
   \   000000B2   0x4284             CMP      R4,R0
   \   000000B4   0xD108             BNE.N    ??TIM_DeInit_4
    210            { 
    211              RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
   \   000000B6   0x2101             MOVS     R1,#+1
   \   000000B8   0x2002             MOVS     R0,#+2
   \   000000BA   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
    212              RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
   \   000000BE   0x2100             MOVS     R1,#+0
   \   000000C0   0x2002             MOVS     R0,#+2
   \   000000C2   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
   \   000000C6   0xE095             B.N      ??TIM_DeInit_2
    213            }  
    214            else if (TIMx == TIM4)
   \                     ??TIM_DeInit_4: (+1)
   \   000000C8   0x.... 0x....      LDR.W    R0,??DataTable10_2  ;; 0x40000800
   \   000000CC   0x4284             CMP      R4,R0
   \   000000CE   0xD108             BNE.N    ??TIM_DeInit_5
    215            { 
    216              RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
   \   000000D0   0x2101             MOVS     R1,#+1
   \   000000D2   0x2004             MOVS     R0,#+4
   \   000000D4   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
    217              RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
   \   000000D8   0x2100             MOVS     R1,#+0
   \   000000DA   0x2004             MOVS     R0,#+4
   \   000000DC   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
   \   000000E0   0xE088             B.N      ??TIM_DeInit_2
    218            }  
    219            else if (TIMx == TIM5)
   \                     ??TIM_DeInit_5: (+1)
   \   000000E2   0x.... 0x....      LDR.W    R0,??DataTable10_3  ;; 0x40000c00
   \   000000E6   0x4284             CMP      R4,R0
   \   000000E8   0xD108             BNE.N    ??TIM_DeInit_6
    220            {      
    221              RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
   \   000000EA   0x2101             MOVS     R1,#+1
   \   000000EC   0x2008             MOVS     R0,#+8
   \   000000EE   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
    222              RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
   \   000000F2   0x2100             MOVS     R1,#+0
   \   000000F4   0x2008             MOVS     R0,#+8
   \   000000F6   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
   \   000000FA   0xE07B             B.N      ??TIM_DeInit_2
    223            }  
    224            else if (TIMx == TIM6)  
   \                     ??TIM_DeInit_6: (+1)
   \   000000FC   0x.... 0x....      LDR.W    R0,??DataTable10_4  ;; 0x40001000
   \   00000100   0x4284             CMP      R4,R0
   \   00000102   0xD108             BNE.N    ??TIM_DeInit_7
    225            {    
    226              RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
   \   00000104   0x2101             MOVS     R1,#+1
   \   00000106   0x2010             MOVS     R0,#+16
   \   00000108   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
    227              RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
   \   0000010C   0x2100             MOVS     R1,#+0
   \   0000010E   0x2010             MOVS     R0,#+16
   \   00000110   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
   \   00000114   0xE06E             B.N      ??TIM_DeInit_2
    228            }  
    229            else if (TIMx == TIM7)
   \                     ??TIM_DeInit_7: (+1)
   \   00000116   0x.... 0x....      LDR.W    R0,??DataTable10_5  ;; 0x40001400
   \   0000011A   0x4284             CMP      R4,R0
   \   0000011C   0xD108             BNE.N    ??TIM_DeInit_8
    230            {      
    231              RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
   \   0000011E   0x2101             MOVS     R1,#+1
   \   00000120   0x2020             MOVS     R0,#+32
   \   00000122   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
    232              RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
   \   00000126   0x2100             MOVS     R1,#+0
   \   00000128   0x2020             MOVS     R0,#+32
   \   0000012A   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
   \   0000012E   0xE061             B.N      ??TIM_DeInit_2
    233            }  
    234            else if (TIMx == TIM8)
   \                     ??TIM_DeInit_8: (+1)
   \   00000130   0x.... 0x....      LDR.W    R0,??DataTable10_6  ;; 0x40010400
   \   00000134   0x4284             CMP      R4,R0
   \   00000136   0xD108             BNE.N    ??TIM_DeInit_9
    235            {      
    236              RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
   \   00000138   0x2101             MOVS     R1,#+1
   \   0000013A   0x2002             MOVS     R0,#+2
   \   0000013C   0x.... 0x....      BL       RCC_APB2PeriphResetCmd
    237              RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
   \   00000140   0x2100             MOVS     R1,#+0
   \   00000142   0x2002             MOVS     R0,#+2
   \   00000144   0x.... 0x....      BL       RCC_APB2PeriphResetCmd
   \   00000148   0xE054             B.N      ??TIM_DeInit_2
    238            }  
    239            else if (TIMx == TIM9)
   \                     ??TIM_DeInit_9: (+1)
   \   0000014A   0x.... 0x....      LDR.W    R0,??DataTable10_7  ;; 0x40014000
   \   0000014E   0x4284             CMP      R4,R0
   \   00000150   0xD10A             BNE.N    ??TIM_DeInit_10
    240            {      
    241              RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
   \   00000152   0x2101             MOVS     R1,#+1
   \   00000154   0xF45F 0x3080      MOVS     R0,#+65536
   \   00000158   0x.... 0x....      BL       RCC_APB2PeriphResetCmd
    242              RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   \   0000015C   0x2100             MOVS     R1,#+0
   \   0000015E   0xF45F 0x3080      MOVS     R0,#+65536
   \   00000162   0x.... 0x....      BL       RCC_APB2PeriphResetCmd
   \   00000166   0xE045             B.N      ??TIM_DeInit_2
    243             }  
    244            else if (TIMx == TIM10)
   \                     ??TIM_DeInit_10: (+1)
   \   00000168   0x.... 0x....      LDR.W    R0,??DataTable10_8  ;; 0x40014400
   \   0000016C   0x4284             CMP      R4,R0
   \   0000016E   0xD10A             BNE.N    ??TIM_DeInit_11
    245            {      
    246              RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
   \   00000170   0x2101             MOVS     R1,#+1
   \   00000172   0xF45F 0x3000      MOVS     R0,#+131072
   \   00000176   0x.... 0x....      BL       RCC_APB2PeriphResetCmd
    247              RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
   \   0000017A   0x2100             MOVS     R1,#+0
   \   0000017C   0xF45F 0x3000      MOVS     R0,#+131072
   \   00000180   0x.... 0x....      BL       RCC_APB2PeriphResetCmd
   \   00000184   0xE036             B.N      ??TIM_DeInit_2
    248            }  
    249            else if (TIMx == TIM11) 
   \                     ??TIM_DeInit_11: (+1)
   \   00000186   0x.... 0x....      LDR.W    R0,??DataTable10_9  ;; 0x40014800
   \   0000018A   0x4284             CMP      R4,R0
   \   0000018C   0xD10A             BNE.N    ??TIM_DeInit_12
    250            {     
    251              RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
   \   0000018E   0x2101             MOVS     R1,#+1
   \   00000190   0xF45F 0x2080      MOVS     R0,#+262144
   \   00000194   0x.... 0x....      BL       RCC_APB2PeriphResetCmd
    252              RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
   \   00000198   0x2100             MOVS     R1,#+0
   \   0000019A   0xF45F 0x2080      MOVS     R0,#+262144
   \   0000019E   0x.... 0x....      BL       RCC_APB2PeriphResetCmd
   \   000001A2   0xE027             B.N      ??TIM_DeInit_2
    253            }  
    254            else if (TIMx == TIM12)
   \                     ??TIM_DeInit_12: (+1)
   \   000001A4   0x.... 0x....      LDR.W    R0,??DataTable10_10  ;; 0x40001800
   \   000001A8   0x4284             CMP      R4,R0
   \   000001AA   0xD108             BNE.N    ??TIM_DeInit_13
    255            {      
    256              RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
   \   000001AC   0x2101             MOVS     R1,#+1
   \   000001AE   0x2040             MOVS     R0,#+64
   \   000001B0   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
    257              RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
   \   000001B4   0x2100             MOVS     R1,#+0
   \   000001B6   0x2040             MOVS     R0,#+64
   \   000001B8   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
   \   000001BC   0xE01A             B.N      ??TIM_DeInit_2
    258            }  
    259            else if (TIMx == TIM13) 
   \                     ??TIM_DeInit_13: (+1)
   \   000001BE   0x.... 0x....      LDR.W    R0,??DataTable10_11  ;; 0x40001c00
   \   000001C2   0x4284             CMP      R4,R0
   \   000001C4   0xD108             BNE.N    ??TIM_DeInit_14
    260            {       
    261              RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
   \   000001C6   0x2101             MOVS     R1,#+1
   \   000001C8   0x2080             MOVS     R0,#+128
   \   000001CA   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
    262              RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
   \   000001CE   0x2100             MOVS     R1,#+0
   \   000001D0   0x2080             MOVS     R0,#+128
   \   000001D2   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
   \   000001D6   0xE00D             B.N      ??TIM_DeInit_2
    263            }  
    264            else
    265            { 
    266              if (TIMx == TIM14) 
   \                     ??TIM_DeInit_14: (+1)
   \   000001D8   0x.... 0x....      LDR.W    R0,??DataTable12  ;; 0x40002000
   \   000001DC   0x4284             CMP      R4,R0
   \   000001DE   0xD109             BNE.N    ??TIM_DeInit_2
    267              {     
    268                RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
   \   000001E0   0x2101             MOVS     R1,#+1
   \   000001E2   0xF44F 0x7080      MOV      R0,#+256
   \   000001E6   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
    269                RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
   \   000001EA   0x2100             MOVS     R1,#+0
   \   000001EC   0xF44F 0x7080      MOV      R0,#+256
   \   000001F0   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
    270              }   
    271            }
    272          }
   \                     ??TIM_DeInit_2: (+1)
   \   000001F4   0xBD10             POP      {R4,PC}          ;; return
    273          
    274          /**
    275            * @brief  Initializes the TIMx Time Base Unit peripheral according to 
    276            *         the specified parameters in the TIM_TimeBaseInitStruct.
    277            * @param  TIMx: where x can be  1 to 14 to select the TIM peripheral.
    278            * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
    279            *         that contains the configuration information for the specified TIM peripheral.
    280            * @retval None
    281            */

   \                                 In section .text, align 2, keep-with-next
    282          void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
    283          {
   \                     TIM_TimeBaseInit: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    284            uint16_t tmpcr1 = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    285          
    286            /* Check the parameters */
    287            assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x40010000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD038             BEQ.N    ??TIM_TimeBaseInit_0
   \   00000010   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000014   0xD035             BEQ.N    ??TIM_TimeBaseInit_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable10_1  ;; 0x40000400
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD031             BEQ.N    ??TIM_TimeBaseInit_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable10_2  ;; 0x40000800
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD02D             BEQ.N    ??TIM_TimeBaseInit_0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable10_3  ;; 0x40000c00
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD029             BEQ.N    ??TIM_TimeBaseInit_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable10_4  ;; 0x40001000
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD025             BEQ.N    ??TIM_TimeBaseInit_0
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable10_5  ;; 0x40001400
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD021             BEQ.N    ??TIM_TimeBaseInit_0
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable10_6  ;; 0x40010400
   \   00000042   0x4284             CMP      R4,R0
   \   00000044   0xD01D             BEQ.N    ??TIM_TimeBaseInit_0
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable10_7  ;; 0x40014000
   \   0000004A   0x4284             CMP      R4,R0
   \   0000004C   0xD019             BEQ.N    ??TIM_TimeBaseInit_0
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable10_8  ;; 0x40014400
   \   00000052   0x4284             CMP      R4,R0
   \   00000054   0xD015             BEQ.N    ??TIM_TimeBaseInit_0
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable10_9  ;; 0x40014800
   \   0000005A   0x4284             CMP      R4,R0
   \   0000005C   0xD011             BEQ.N    ??TIM_TimeBaseInit_0
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable10_10  ;; 0x40001800
   \   00000062   0x4284             CMP      R4,R0
   \   00000064   0xD00D             BEQ.N    ??TIM_TimeBaseInit_0
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable10_11  ;; 0x40001c00
   \   0000006A   0x4284             CMP      R4,R0
   \   0000006C   0xD009             BEQ.N    ??TIM_TimeBaseInit_0
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable12  ;; 0x40002000
   \   00000072   0x4284             CMP      R4,R0
   \   00000074   0xD005             BEQ.N    ??TIM_TimeBaseInit_0
   \   00000076   0xF240 0x111F      MOVW     R1,#+287
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable10_12
   \   0000007E   0x.... 0x....      BL       assert_failed
    288            assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
   \                     ??TIM_TimeBaseInit_0: (+1)
   \   00000082   0x8868             LDRH     R0,[R5, #+2]
   \   00000084   0x2800             CMP      R0,#+0
   \   00000086   0xD011             BEQ.N    ??TIM_TimeBaseInit_1
   \   00000088   0x8868             LDRH     R0,[R5, #+2]
   \   0000008A   0x2810             CMP      R0,#+16
   \   0000008C   0xD00E             BEQ.N    ??TIM_TimeBaseInit_1
   \   0000008E   0x8868             LDRH     R0,[R5, #+2]
   \   00000090   0x2820             CMP      R0,#+32
   \   00000092   0xD00B             BEQ.N    ??TIM_TimeBaseInit_1
   \   00000094   0x8868             LDRH     R0,[R5, #+2]
   \   00000096   0x2840             CMP      R0,#+64
   \   00000098   0xD008             BEQ.N    ??TIM_TimeBaseInit_1
   \   0000009A   0x8868             LDRH     R0,[R5, #+2]
   \   0000009C   0x2860             CMP      R0,#+96
   \   0000009E   0xD005             BEQ.N    ??TIM_TimeBaseInit_1
   \   000000A0   0xF44F 0x7190      MOV      R1,#+288
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable10_12
   \   000000A8   0x.... 0x....      BL       assert_failed
    289            assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));
   \                     ??TIM_TimeBaseInit_1: (+1)
   \   000000AC   0x8928             LDRH     R0,[R5, #+8]
   \   000000AE   0x2800             CMP      R0,#+0
   \   000000B0   0xD00D             BEQ.N    ??TIM_TimeBaseInit_2
   \   000000B2   0x8928             LDRH     R0,[R5, #+8]
   \   000000B4   0xF5B0 0x7F80      CMP      R0,#+256
   \   000000B8   0xD009             BEQ.N    ??TIM_TimeBaseInit_2
   \   000000BA   0x8928             LDRH     R0,[R5, #+8]
   \   000000BC   0xF5B0 0x7F00      CMP      R0,#+512
   \   000000C0   0xD005             BEQ.N    ??TIM_TimeBaseInit_2
   \   000000C2   0xF240 0x1121      MOVW     R1,#+289
   \   000000C6   0x.... 0x....      LDR.W    R0,??DataTable10_12
   \   000000CA   0x.... 0x....      BL       assert_failed
    290          
    291            tmpcr1 = TIMx->CR1;  
   \                     ??TIM_TimeBaseInit_2: (+1)
   \   000000CE   0x8820             LDRH     R0,[R4, #+0]
   \   000000D0   0x0006             MOVS     R6,R0
    292          
    293            if((TIMx == TIM1) || (TIMx == TIM8)||
    294               (TIMx == TIM2) || (TIMx == TIM3)||
    295               (TIMx == TIM4) || (TIMx == TIM5)) 
   \   000000D2   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x40010000
   \   000000D6   0x4284             CMP      R4,R0
   \   000000D8   0xD012             BEQ.N    ??TIM_TimeBaseInit_3
   \   000000DA   0x.... 0x....      LDR.W    R0,??DataTable10_6  ;; 0x40010400
   \   000000DE   0x4284             CMP      R4,R0
   \   000000E0   0xD00E             BEQ.N    ??TIM_TimeBaseInit_3
   \   000000E2   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   000000E6   0xD00B             BEQ.N    ??TIM_TimeBaseInit_3
   \   000000E8   0x.... 0x....      LDR.W    R0,??DataTable10_1  ;; 0x40000400
   \   000000EC   0x4284             CMP      R4,R0
   \   000000EE   0xD007             BEQ.N    ??TIM_TimeBaseInit_3
   \   000000F0   0x.... 0x....      LDR.W    R0,??DataTable10_2  ;; 0x40000800
   \   000000F4   0x4284             CMP      R4,R0
   \   000000F6   0xD003             BEQ.N    ??TIM_TimeBaseInit_3
   \   000000F8   0x.... 0x....      LDR.W    R0,??DataTable10_3  ;; 0x40000c00
   \   000000FC   0x4284             CMP      R4,R0
   \   000000FE   0xD104             BNE.N    ??TIM_TimeBaseInit_4
    296            {
    297              /* Select the Counter Mode */
    298              tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
   \                     ??TIM_TimeBaseInit_3: (+1)
   \   00000100   0xF64F 0x708F      MOVW     R0,#+65423
   \   00000104   0x4006             ANDS     R6,R0,R6
    299              tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
   \   00000106   0x8868             LDRH     R0,[R5, #+2]
   \   00000108   0x4306             ORRS     R6,R0,R6
    300            }
    301           
    302            if((TIMx != TIM6) && (TIMx != TIM7))
   \                     ??TIM_TimeBaseInit_4: (+1)
   \   0000010A   0x.... 0x....      LDR.W    R0,??DataTable10_4  ;; 0x40001000
   \   0000010E   0x4284             CMP      R4,R0
   \   00000110   0xD008             BEQ.N    ??TIM_TimeBaseInit_5
   \   00000112   0x.... 0x....      LDR.W    R0,??DataTable10_5  ;; 0x40001400
   \   00000116   0x4284             CMP      R4,R0
   \   00000118   0xD004             BEQ.N    ??TIM_TimeBaseInit_5
    303            {
    304              /* Set the clock division */
    305              tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
   \   0000011A   0xF64F 0x40FF      MOVW     R0,#+64767
   \   0000011E   0x4006             ANDS     R6,R0,R6
    306              tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
   \   00000120   0x8928             LDRH     R0,[R5, #+8]
   \   00000122   0x4306             ORRS     R6,R0,R6
    307            }
    308          
    309            TIMx->CR1 = tmpcr1;
   \                     ??TIM_TimeBaseInit_5: (+1)
   \   00000124   0x8026             STRH     R6,[R4, #+0]
    310          
    311            /* Set the Autoreload value */
    312            TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
   \   00000126   0x6868             LDR      R0,[R5, #+4]
   \   00000128   0x62E0             STR      R0,[R4, #+44]
    313           
    314            /* Set the Prescaler value */
    315            TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
   \   0000012A   0x8828             LDRH     R0,[R5, #+0]
   \   0000012C   0x8520             STRH     R0,[R4, #+40]
    316              
    317            if ((TIMx == TIM1) || (TIMx == TIM8))  
   \   0000012E   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x40010000
   \   00000132   0x4284             CMP      R4,R0
   \   00000134   0xD003             BEQ.N    ??TIM_TimeBaseInit_6
   \   00000136   0x.... 0x....      LDR.W    R0,??DataTable10_6  ;; 0x40010400
   \   0000013A   0x4284             CMP      R4,R0
   \   0000013C   0xD101             BNE.N    ??TIM_TimeBaseInit_7
    318            {
    319              /* Set the Repetition Counter value */
    320              TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
   \                     ??TIM_TimeBaseInit_6: (+1)
   \   0000013E   0x7AA8             LDRB     R0,[R5, #+10]
   \   00000140   0x8620             STRH     R0,[R4, #+48]
    321            }
    322          
    323            /* Generate an update event to reload the Prescaler 
    324               and the repetition counter(only for TIM1 and TIM8) value immediatly */
    325            TIMx->EGR = TIM_PSCReloadMode_Immediate;          
   \                     ??TIM_TimeBaseInit_7: (+1)
   \   00000142   0x2001             MOVS     R0,#+1
   \   00000144   0x82A0             STRH     R0,[R4, #+20]
    326          }
   \   00000146   0xBD70             POP      {R4-R6,PC}       ;; return
    327          
    328          /**
    329            * @brief  Fills each TIM_TimeBaseInitStruct member with its default value.
    330            * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
    331            *         structure which will be initialized.
    332            * @retval None
    333            */

   \                                 In section .text, align 2, keep-with-next
    334          void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
    335          {
    336            /* Set the default configuration */
    337            TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
   \                     TIM_TimeBaseStructInit: (+1)
   \   00000000   0xF05F 0x31FF      MOVS     R1,#-1
   \   00000004   0x6041             STR      R1,[R0, #+4]
    338            TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x8001             STRH     R1,[R0, #+0]
    339            TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x8101             STRH     R1,[R0, #+8]
    340            TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x8041             STRH     R1,[R0, #+2]
    341            TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x7281             STRB     R1,[R0, #+10]
    342          }
   \   00000016   0x4770             BX       LR               ;; return
    343          
    344          /**
    345            * @brief  Configures the TIMx Prescaler.
    346            * @param  TIMx: where x can be  1 to 14 to select the TIM peripheral.
    347            * @param  Prescaler: specifies the Prescaler Register value
    348            * @param  TIM_PSCReloadMode: specifies the TIM Prescaler Reload mode
    349            *          This parameter can be one of the following values:
    350            *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
    351            *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
    352            * @retval None
    353            */

   \                                 In section .text, align 2, keep-with-next
    354          void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
    355          {
   \                     TIM_PrescalerConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    356            /* Check the parameters */
    357            assert_param(IS_TIM_ALL_PERIPH(TIMx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x40010000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD038             BEQ.N    ??TIM_PrescalerConfig_0
   \   00000010   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000014   0xD035             BEQ.N    ??TIM_PrescalerConfig_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable10_1  ;; 0x40000400
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD031             BEQ.N    ??TIM_PrescalerConfig_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable10_2  ;; 0x40000800
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD02D             BEQ.N    ??TIM_PrescalerConfig_0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable10_3  ;; 0x40000c00
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD029             BEQ.N    ??TIM_PrescalerConfig_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable10_4  ;; 0x40001000
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD025             BEQ.N    ??TIM_PrescalerConfig_0
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable10_5  ;; 0x40001400
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD021             BEQ.N    ??TIM_PrescalerConfig_0
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable10_6  ;; 0x40010400
   \   00000042   0x4284             CMP      R4,R0
   \   00000044   0xD01D             BEQ.N    ??TIM_PrescalerConfig_0
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable10_7  ;; 0x40014000
   \   0000004A   0x4284             CMP      R4,R0
   \   0000004C   0xD019             BEQ.N    ??TIM_PrescalerConfig_0
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable10_8  ;; 0x40014400
   \   00000052   0x4284             CMP      R4,R0
   \   00000054   0xD015             BEQ.N    ??TIM_PrescalerConfig_0
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable10_9  ;; 0x40014800
   \   0000005A   0x4284             CMP      R4,R0
   \   0000005C   0xD011             BEQ.N    ??TIM_PrescalerConfig_0
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable10_10  ;; 0x40001800
   \   00000062   0x4284             CMP      R4,R0
   \   00000064   0xD00D             BEQ.N    ??TIM_PrescalerConfig_0
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable10_11  ;; 0x40001c00
   \   0000006A   0x4284             CMP      R4,R0
   \   0000006C   0xD009             BEQ.N    ??TIM_PrescalerConfig_0
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable12  ;; 0x40002000
   \   00000072   0x4284             CMP      R4,R0
   \   00000074   0xD005             BEQ.N    ??TIM_PrescalerConfig_0
   \   00000076   0xF240 0x1165      MOVW     R1,#+357
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable10_12
   \   0000007E   0x.... 0x....      BL       assert_failed
    358            assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
   \                     ??TIM_PrescalerConfig_0: (+1)
   \   00000082   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000084   0x2E00             CMP      R6,#+0
   \   00000086   0xD008             BEQ.N    ??TIM_PrescalerConfig_1
   \   00000088   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000008A   0x2E01             CMP      R6,#+1
   \   0000008C   0xD005             BEQ.N    ??TIM_PrescalerConfig_1
   \   0000008E   0xF44F 0x71B3      MOV      R1,#+358
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable10_12
   \   00000096   0x.... 0x....      BL       assert_failed
    359            /* Set the Prescaler value */
    360            TIMx->PSC = Prescaler;
   \                     ??TIM_PrescalerConfig_1: (+1)
   \   0000009A   0x8525             STRH     R5,[R4, #+40]
    361            /* Set or reset the UG Bit */
    362            TIMx->EGR = TIM_PSCReloadMode;
   \   0000009C   0x82A6             STRH     R6,[R4, #+20]
    363          }
   \   0000009E   0xBD70             POP      {R4-R6,PC}       ;; return
    364          
    365          /**
    366            * @brief  Specifies the TIMx Counter Mode to be used.
    367            * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
    368            * @param  TIM_CounterMode: specifies the Counter Mode to be used
    369            *          This parameter can be one of the following values:
    370            *            @arg TIM_CounterMode_Up: TIM Up Counting Mode
    371            *            @arg TIM_CounterMode_Down: TIM Down Counting Mode
    372            *            @arg TIM_CounterMode_CenterAligned1: TIM Center Aligned Mode1
    373            *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
    374            *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
    375            * @retval None
    376            */

   \                                 In section .text, align 2, keep-with-next
    377          void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
    378          {
   \                     TIM_CounterModeConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    379            uint16_t tmpcr1 = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    380          
    381            /* Check the parameters */
    382            assert_param(IS_TIM_LIST3_PERIPH(TIMx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x40010000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD018             BEQ.N    ??TIM_CounterModeConfig_0
   \   00000010   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000014   0xD015             BEQ.N    ??TIM_CounterModeConfig_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable10_1  ;; 0x40000400
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD011             BEQ.N    ??TIM_CounterModeConfig_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable10_2  ;; 0x40000800
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD00D             BEQ.N    ??TIM_CounterModeConfig_0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable10_3  ;; 0x40000c00
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD009             BEQ.N    ??TIM_CounterModeConfig_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable10_6  ;; 0x40010400
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD005             BEQ.N    ??TIM_CounterModeConfig_0
   \   00000036   0xF44F 0x71BF      MOV      R1,#+382
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable10_12
   \   0000003E   0x.... 0x....      BL       assert_failed
    383            assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
   \                     ??TIM_CounterModeConfig_0: (+1)
   \   00000042   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000044   0x2D00             CMP      R5,#+0
   \   00000046   0xD011             BEQ.N    ??TIM_CounterModeConfig_1
   \   00000048   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004A   0x2D10             CMP      R5,#+16
   \   0000004C   0xD00E             BEQ.N    ??TIM_CounterModeConfig_1
   \   0000004E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000050   0x2D20             CMP      R5,#+32
   \   00000052   0xD00B             BEQ.N    ??TIM_CounterModeConfig_1
   \   00000054   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000056   0x2D40             CMP      R5,#+64
   \   00000058   0xD008             BEQ.N    ??TIM_CounterModeConfig_1
   \   0000005A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000005C   0x2D60             CMP      R5,#+96
   \   0000005E   0xD005             BEQ.N    ??TIM_CounterModeConfig_1
   \   00000060   0xF240 0x117F      MOVW     R1,#+383
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable10_12
   \   00000068   0x.... 0x....      BL       assert_failed
    384          
    385            tmpcr1 = TIMx->CR1;
   \                     ??TIM_CounterModeConfig_1: (+1)
   \   0000006C   0x8820             LDRH     R0,[R4, #+0]
   \   0000006E   0x0006             MOVS     R6,R0
    386          
    387            /* Reset the CMS and DIR Bits */
    388            tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
   \   00000070   0xF64F 0x708F      MOVW     R0,#+65423
   \   00000074   0x4006             ANDS     R6,R0,R6
    389          
    390            /* Set the Counter Mode */
    391            tmpcr1 |= TIM_CounterMode;
   \   00000076   0x432E             ORRS     R6,R5,R6
    392          
    393            /* Write to TIMx CR1 register */
    394            TIMx->CR1 = tmpcr1;
   \   00000078   0x8026             STRH     R6,[R4, #+0]
    395          }
   \   0000007A   0xBD70             POP      {R4-R6,PC}       ;; return
    396          
    397          /**
    398            * @brief  Sets the TIMx Counter Register value
    399            * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
    400            * @param  Counter: specifies the Counter register new value.
    401            * @retval None
    402            */

   \                                 In section .text, align 2, keep-with-next
    403          void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
    404          {
   \                     TIM_SetCounter: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    405            /* Check the parameters */
    406             assert_param(IS_TIM_ALL_PERIPH(TIMx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x40010000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD038             BEQ.N    ??TIM_SetCounter_0
   \   0000000E   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000012   0xD035             BEQ.N    ??TIM_SetCounter_0
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable10_1  ;; 0x40000400
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD031             BEQ.N    ??TIM_SetCounter_0
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable10_2  ;; 0x40000800
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD02D             BEQ.N    ??TIM_SetCounter_0
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable10_3  ;; 0x40000c00
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD029             BEQ.N    ??TIM_SetCounter_0
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable10_4  ;; 0x40001000
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD025             BEQ.N    ??TIM_SetCounter_0
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable10_5  ;; 0x40001400
   \   00000038   0x4284             CMP      R4,R0
   \   0000003A   0xD021             BEQ.N    ??TIM_SetCounter_0
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable10_6  ;; 0x40010400
   \   00000040   0x4284             CMP      R4,R0
   \   00000042   0xD01D             BEQ.N    ??TIM_SetCounter_0
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable10_7  ;; 0x40014000
   \   00000048   0x4284             CMP      R4,R0
   \   0000004A   0xD019             BEQ.N    ??TIM_SetCounter_0
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable10_8  ;; 0x40014400
   \   00000050   0x4284             CMP      R4,R0
   \   00000052   0xD015             BEQ.N    ??TIM_SetCounter_0
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable10_9  ;; 0x40014800
   \   00000058   0x4284             CMP      R4,R0
   \   0000005A   0xD011             BEQ.N    ??TIM_SetCounter_0
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable10_10  ;; 0x40001800
   \   00000060   0x4284             CMP      R4,R0
   \   00000062   0xD00D             BEQ.N    ??TIM_SetCounter_0
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable10_11  ;; 0x40001c00
   \   00000068   0x4284             CMP      R4,R0
   \   0000006A   0xD009             BEQ.N    ??TIM_SetCounter_0
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable12  ;; 0x40002000
   \   00000070   0x4284             CMP      R4,R0
   \   00000072   0xD005             BEQ.N    ??TIM_SetCounter_0
   \   00000074   0xF44F 0x71CB      MOV      R1,#+406
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable10_12
   \   0000007C   0x.... 0x....      BL       assert_failed
    407          
    408            /* Set the Counter Register value */
    409            TIMx->CNT = Counter;
   \                     ??TIM_SetCounter_0: (+1)
   \   00000080   0x6265             STR      R5,[R4, #+36]
    410          }
   \   00000082   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    411          
    412          /**
    413            * @brief  Sets the TIMx Autoreload Register value
    414            * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
    415            * @param  Autoreload: specifies the Autoreload register new value.
    416            * @retval None
    417            */

   \                                 In section .text, align 2, keep-with-next
    418          void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
    419          {
   \                     TIM_SetAutoreload: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    420            /* Check the parameters */
    421            assert_param(IS_TIM_ALL_PERIPH(TIMx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x40010000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD038             BEQ.N    ??TIM_SetAutoreload_0
   \   0000000E   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000012   0xD035             BEQ.N    ??TIM_SetAutoreload_0
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable10_1  ;; 0x40000400
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD031             BEQ.N    ??TIM_SetAutoreload_0
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable10_2  ;; 0x40000800
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD02D             BEQ.N    ??TIM_SetAutoreload_0
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable10_3  ;; 0x40000c00
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD029             BEQ.N    ??TIM_SetAutoreload_0
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable10_4  ;; 0x40001000
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD025             BEQ.N    ??TIM_SetAutoreload_0
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable10_5  ;; 0x40001400
   \   00000038   0x4284             CMP      R4,R0
   \   0000003A   0xD021             BEQ.N    ??TIM_SetAutoreload_0
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable10_6  ;; 0x40010400
   \   00000040   0x4284             CMP      R4,R0
   \   00000042   0xD01D             BEQ.N    ??TIM_SetAutoreload_0
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable10_7  ;; 0x40014000
   \   00000048   0x4284             CMP      R4,R0
   \   0000004A   0xD019             BEQ.N    ??TIM_SetAutoreload_0
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable10_8  ;; 0x40014400
   \   00000050   0x4284             CMP      R4,R0
   \   00000052   0xD015             BEQ.N    ??TIM_SetAutoreload_0
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable10_9  ;; 0x40014800
   \   00000058   0x4284             CMP      R4,R0
   \   0000005A   0xD011             BEQ.N    ??TIM_SetAutoreload_0
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable10_10  ;; 0x40001800
   \   00000060   0x4284             CMP      R4,R0
   \   00000062   0xD00D             BEQ.N    ??TIM_SetAutoreload_0
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable10_11  ;; 0x40001c00
   \   00000068   0x4284             CMP      R4,R0
   \   0000006A   0xD009             BEQ.N    ??TIM_SetAutoreload_0
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable12  ;; 0x40002000
   \   00000070   0x4284             CMP      R4,R0
   \   00000072   0xD005             BEQ.N    ??TIM_SetAutoreload_0
   \   00000074   0xF240 0x11A5      MOVW     R1,#+421
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable10_12
   \   0000007C   0x.... 0x....      BL       assert_failed
    422            
    423            /* Set the Autoreload Register value */
    424            TIMx->ARR = Autoreload;
   \                     ??TIM_SetAutoreload_0: (+1)
   \   00000080   0x62E5             STR      R5,[R4, #+44]
    425          }
   \   00000082   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    426          
    427          /**
    428            * @brief  Gets the TIMx Counter value.
    429            * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
    430            * @retval Counter Register value
    431            */

   \                                 In section .text, align 2, keep-with-next
    432          uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
    433          {
   \                     TIM_GetCounter: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    434            /* Check the parameters */
    435            assert_param(IS_TIM_ALL_PERIPH(TIMx));
   \   00000004   0x....             LDR.N    R0,??DataTable10  ;; 0x40010000
   \   00000006   0x4284             CMP      R4,R0
   \   00000008   0xD02C             BEQ.N    ??TIM_GetCounter_0
   \   0000000A   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   0000000E   0xD029             BEQ.N    ??TIM_GetCounter_0
   \   00000010   0x....             LDR.N    R0,??DataTable10_1  ;; 0x40000400
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD026             BEQ.N    ??TIM_GetCounter_0
   \   00000016   0x....             LDR.N    R0,??DataTable10_2  ;; 0x40000800
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD023             BEQ.N    ??TIM_GetCounter_0
   \   0000001C   0x....             LDR.N    R0,??DataTable10_3  ;; 0x40000c00
   \   0000001E   0x4284             CMP      R4,R0
   \   00000020   0xD020             BEQ.N    ??TIM_GetCounter_0
   \   00000022   0x....             LDR.N    R0,??DataTable10_4  ;; 0x40001000
   \   00000024   0x4284             CMP      R4,R0
   \   00000026   0xD01D             BEQ.N    ??TIM_GetCounter_0
   \   00000028   0x....             LDR.N    R0,??DataTable10_5  ;; 0x40001400
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD01A             BEQ.N    ??TIM_GetCounter_0
   \   0000002E   0x....             LDR.N    R0,??DataTable10_6  ;; 0x40010400
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD017             BEQ.N    ??TIM_GetCounter_0
   \   00000034   0x....             LDR.N    R0,??DataTable10_7  ;; 0x40014000
   \   00000036   0x4284             CMP      R4,R0
   \   00000038   0xD014             BEQ.N    ??TIM_GetCounter_0
   \   0000003A   0x....             LDR.N    R0,??DataTable10_8  ;; 0x40014400
   \   0000003C   0x4284             CMP      R4,R0
   \   0000003E   0xD011             BEQ.N    ??TIM_GetCounter_0
   \   00000040   0x....             LDR.N    R0,??DataTable10_9  ;; 0x40014800
   \   00000042   0x4284             CMP      R4,R0
   \   00000044   0xD00E             BEQ.N    ??TIM_GetCounter_0
   \   00000046   0x....             LDR.N    R0,??DataTable10_10  ;; 0x40001800
   \   00000048   0x4284             CMP      R4,R0
   \   0000004A   0xD00B             BEQ.N    ??TIM_GetCounter_0
   \   0000004C   0x....             LDR.N    R0,??DataTable10_11  ;; 0x40001c00
   \   0000004E   0x4284             CMP      R4,R0
   \   00000050   0xD008             BEQ.N    ??TIM_GetCounter_0
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable12  ;; 0x40002000
   \   00000056   0x4284             CMP      R4,R0
   \   00000058   0xD004             BEQ.N    ??TIM_GetCounter_0
   \   0000005A   0xF240 0x11B3      MOVW     R1,#+435
   \   0000005E   0x....             LDR.N    R0,??DataTable10_12
   \   00000060   0x.... 0x....      BL       assert_failed
    436          
    437            /* Get the Counter Register value */
    438            return TIMx->CNT;
   \                     ??TIM_GetCounter_0: (+1)
   \   00000064   0x6A60             LDR      R0,[R4, #+36]
   \   00000066   0xBD10             POP      {R4,PC}          ;; return
    439          }
    440          
    441          /**
    442            * @brief  Gets the TIMx Prescaler value.
    443            * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
    444            * @retval Prescaler Register value.
    445            */

   \                                 In section .text, align 2, keep-with-next
    446          uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
    447          {
   \                     TIM_GetPrescaler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    448            /* Check the parameters */
    449            assert_param(IS_TIM_ALL_PERIPH(TIMx));
   \   00000004   0x....             LDR.N    R0,??DataTable10  ;; 0x40010000
   \   00000006   0x4284             CMP      R4,R0
   \   00000008   0xD02C             BEQ.N    ??TIM_GetPrescaler_0
   \   0000000A   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   0000000E   0xD029             BEQ.N    ??TIM_GetPrescaler_0
   \   00000010   0x....             LDR.N    R0,??DataTable10_1  ;; 0x40000400
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD026             BEQ.N    ??TIM_GetPrescaler_0
   \   00000016   0x....             LDR.N    R0,??DataTable10_2  ;; 0x40000800
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD023             BEQ.N    ??TIM_GetPrescaler_0
   \   0000001C   0x....             LDR.N    R0,??DataTable10_3  ;; 0x40000c00
   \   0000001E   0x4284             CMP      R4,R0
   \   00000020   0xD020             BEQ.N    ??TIM_GetPrescaler_0
   \   00000022   0x....             LDR.N    R0,??DataTable10_4  ;; 0x40001000
   \   00000024   0x4284             CMP      R4,R0
   \   00000026   0xD01D             BEQ.N    ??TIM_GetPrescaler_0
   \   00000028   0x....             LDR.N    R0,??DataTable10_5  ;; 0x40001400
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD01A             BEQ.N    ??TIM_GetPrescaler_0
   \   0000002E   0x....             LDR.N    R0,??DataTable10_6  ;; 0x40010400
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD017             BEQ.N    ??TIM_GetPrescaler_0
   \   00000034   0x....             LDR.N    R0,??DataTable10_7  ;; 0x40014000
   \   00000036   0x4284             CMP      R4,R0
   \   00000038   0xD014             BEQ.N    ??TIM_GetPrescaler_0
   \   0000003A   0x....             LDR.N    R0,??DataTable10_8  ;; 0x40014400
   \   0000003C   0x4284             CMP      R4,R0
   \   0000003E   0xD011             BEQ.N    ??TIM_GetPrescaler_0
   \   00000040   0x....             LDR.N    R0,??DataTable10_9  ;; 0x40014800
   \   00000042   0x4284             CMP      R4,R0
   \   00000044   0xD00E             BEQ.N    ??TIM_GetPrescaler_0
   \   00000046   0x....             LDR.N    R0,??DataTable10_10  ;; 0x40001800
   \   00000048   0x4284             CMP      R4,R0
   \   0000004A   0xD00B             BEQ.N    ??TIM_GetPrescaler_0
   \   0000004C   0x....             LDR.N    R0,??DataTable10_11  ;; 0x40001c00
   \   0000004E   0x4284             CMP      R4,R0
   \   00000050   0xD008             BEQ.N    ??TIM_GetPrescaler_0
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable12  ;; 0x40002000
   \   00000056   0x4284             CMP      R4,R0
   \   00000058   0xD004             BEQ.N    ??TIM_GetPrescaler_0
   \   0000005A   0xF240 0x11C1      MOVW     R1,#+449
   \   0000005E   0x....             LDR.N    R0,??DataTable10_12
   \   00000060   0x.... 0x....      BL       assert_failed
    450          
    451            /* Get the Prescaler Register value */
    452            return TIMx->PSC;
   \                     ??TIM_GetPrescaler_0: (+1)
   \   00000064   0x8D20             LDRH     R0,[R4, #+40]
   \   00000066   0xBD10             POP      {R4,PC}          ;; return
    453          }
    454          
    455          /**
    456            * @brief  Enables or Disables the TIMx Update event.
    457            * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
    458            * @param  NewState: new state of the TIMx UDIS bit
    459            *          This parameter can be: ENABLE or DISABLE.
    460            * @retval None
    461            */

   \                                 In section .text, align 2, keep-with-next
    462          void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
    463          {
   \                     TIM_UpdateDisableConfig: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    464            /* Check the parameters */
    465            assert_param(IS_TIM_ALL_PERIPH(TIMx));
   \   00000006   0x....             LDR.N    R0,??DataTable10  ;; 0x40010000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD02B             BEQ.N    ??TIM_UpdateDisableConfig_0
   \   0000000C   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000010   0xD028             BEQ.N    ??TIM_UpdateDisableConfig_0
   \   00000012   0x....             LDR.N    R0,??DataTable10_1  ;; 0x40000400
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD025             BEQ.N    ??TIM_UpdateDisableConfig_0
   \   00000018   0x....             LDR.N    R0,??DataTable10_2  ;; 0x40000800
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD022             BEQ.N    ??TIM_UpdateDisableConfig_0
   \   0000001E   0x....             LDR.N    R0,??DataTable10_3  ;; 0x40000c00
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD01F             BEQ.N    ??TIM_UpdateDisableConfig_0
   \   00000024   0x....             LDR.N    R0,??DataTable10_4  ;; 0x40001000
   \   00000026   0x4284             CMP      R4,R0
   \   00000028   0xD01C             BEQ.N    ??TIM_UpdateDisableConfig_0
   \   0000002A   0x....             LDR.N    R0,??DataTable10_5  ;; 0x40001400
   \   0000002C   0x4284             CMP      R4,R0
   \   0000002E   0xD019             BEQ.N    ??TIM_UpdateDisableConfig_0
   \   00000030   0x....             LDR.N    R0,??DataTable10_6  ;; 0x40010400
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD016             BEQ.N    ??TIM_UpdateDisableConfig_0
   \   00000036   0x....             LDR.N    R0,??DataTable10_7  ;; 0x40014000
   \   00000038   0x4284             CMP      R4,R0
   \   0000003A   0xD013             BEQ.N    ??TIM_UpdateDisableConfig_0
   \   0000003C   0x....             LDR.N    R0,??DataTable10_8  ;; 0x40014400
   \   0000003E   0x4284             CMP      R4,R0
   \   00000040   0xD010             BEQ.N    ??TIM_UpdateDisableConfig_0
   \   00000042   0x....             LDR.N    R0,??DataTable10_9  ;; 0x40014800
   \   00000044   0x4284             CMP      R4,R0
   \   00000046   0xD00D             BEQ.N    ??TIM_UpdateDisableConfig_0
   \   00000048   0x....             LDR.N    R0,??DataTable10_10  ;; 0x40001800
   \   0000004A   0x4284             CMP      R4,R0
   \   0000004C   0xD00A             BEQ.N    ??TIM_UpdateDisableConfig_0
   \   0000004E   0x....             LDR.N    R0,??DataTable10_11  ;; 0x40001c00
   \   00000050   0x4284             CMP      R4,R0
   \   00000052   0xD007             BEQ.N    ??TIM_UpdateDisableConfig_0
   \   00000054   0x....             LDR.N    R0,??DataTable12  ;; 0x40002000
   \   00000056   0x4284             CMP      R4,R0
   \   00000058   0xD004             BEQ.N    ??TIM_UpdateDisableConfig_0
   \   0000005A   0xF240 0x11D1      MOVW     R1,#+465
   \   0000005E   0x....             LDR.N    R0,??DataTable10_12
   \   00000060   0x.... 0x....      BL       assert_failed
    466            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \                     ??TIM_UpdateDisableConfig_0: (+1)
   \   00000064   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000066   0x2D00             CMP      R5,#+0
   \   00000068   0xD007             BEQ.N    ??TIM_UpdateDisableConfig_1
   \   0000006A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000006C   0x2D01             CMP      R5,#+1
   \   0000006E   0xD004             BEQ.N    ??TIM_UpdateDisableConfig_1
   \   00000070   0xF44F 0x71E9      MOV      R1,#+466
   \   00000074   0x....             LDR.N    R0,??DataTable10_12
   \   00000076   0x.... 0x....      BL       assert_failed
    467          
    468            if (NewState != DISABLE)
   \                     ??TIM_UpdateDisableConfig_1: (+1)
   \   0000007A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000007C   0x2D00             CMP      R5,#+0
   \   0000007E   0xD004             BEQ.N    ??TIM_UpdateDisableConfig_2
    469            {
    470              /* Set the Update Disable Bit */
    471              TIMx->CR1 |= TIM_CR1_UDIS;
   \   00000080   0x8820             LDRH     R0,[R4, #+0]
   \   00000082   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000086   0x8020             STRH     R0,[R4, #+0]
   \   00000088   0xE004             B.N      ??TIM_UpdateDisableConfig_3
    472            }
    473            else
    474            {
    475              /* Reset the Update Disable Bit */
    476              TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
   \                     ??TIM_UpdateDisableConfig_2: (+1)
   \   0000008A   0x8820             LDRH     R0,[R4, #+0]
   \   0000008C   0xF64F 0x71FD      MOVW     R1,#+65533
   \   00000090   0x4008             ANDS     R0,R1,R0
   \   00000092   0x8020             STRH     R0,[R4, #+0]
    477            }
    478          }
   \                     ??TIM_UpdateDisableConfig_3: (+1)
   \   00000094   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    479          
    480          /**
    481            * @brief  Configures the TIMx Update Request Interrupt source.
    482            * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
    483            * @param  TIM_UpdateSource: specifies the Update source.
    484            *          This parameter can be one of the following values:
    485            *            @arg TIM_UpdateSource_Global: Source of update is the counter
    486            *                 overflow/underflow or the setting of UG bit, or an update
    487            *                 generation through the slave mode controller.
    488            *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
    489            * @retval None
    490            */

   \                                 In section .text, align 2, keep-with-next
    491          void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
    492          {
   \                     TIM_UpdateRequestConfig: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    493            /* Check the parameters */
    494            assert_param(IS_TIM_ALL_PERIPH(TIMx));
   \   00000006   0x....             LDR.N    R0,??DataTable10  ;; 0x40010000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD02B             BEQ.N    ??TIM_UpdateRequestConfig_0
   \   0000000C   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000010   0xD028             BEQ.N    ??TIM_UpdateRequestConfig_0
   \   00000012   0x....             LDR.N    R0,??DataTable10_1  ;; 0x40000400
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD025             BEQ.N    ??TIM_UpdateRequestConfig_0
   \   00000018   0x....             LDR.N    R0,??DataTable10_2  ;; 0x40000800
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD022             BEQ.N    ??TIM_UpdateRequestConfig_0
   \   0000001E   0x....             LDR.N    R0,??DataTable10_3  ;; 0x40000c00
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD01F             BEQ.N    ??TIM_UpdateRequestConfig_0
   \   00000024   0x....             LDR.N    R0,??DataTable10_4  ;; 0x40001000
   \   00000026   0x4284             CMP      R4,R0
   \   00000028   0xD01C             BEQ.N    ??TIM_UpdateRequestConfig_0
   \   0000002A   0x....             LDR.N    R0,??DataTable10_5  ;; 0x40001400
   \   0000002C   0x4284             CMP      R4,R0
   \   0000002E   0xD019             BEQ.N    ??TIM_UpdateRequestConfig_0
   \   00000030   0x....             LDR.N    R0,??DataTable10_6  ;; 0x40010400
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD016             BEQ.N    ??TIM_UpdateRequestConfig_0
   \   00000036   0x....             LDR.N    R0,??DataTable10_7  ;; 0x40014000
   \   00000038   0x4284             CMP      R4,R0
   \   0000003A   0xD013             BEQ.N    ??TIM_UpdateRequestConfig_0
   \   0000003C   0x....             LDR.N    R0,??DataTable10_8  ;; 0x40014400
   \   0000003E   0x4284             CMP      R4,R0
   \   00000040   0xD010             BEQ.N    ??TIM_UpdateRequestConfig_0
   \   00000042   0x....             LDR.N    R0,??DataTable10_9  ;; 0x40014800
   \   00000044   0x4284             CMP      R4,R0
   \   00000046   0xD00D             BEQ.N    ??TIM_UpdateRequestConfig_0
   \   00000048   0x....             LDR.N    R0,??DataTable10_10  ;; 0x40001800
   \   0000004A   0x4284             CMP      R4,R0
   \   0000004C   0xD00A             BEQ.N    ??TIM_UpdateRequestConfig_0
   \   0000004E   0x....             LDR.N    R0,??DataTable10_11  ;; 0x40001c00
   \   00000050   0x4284             CMP      R4,R0
   \   00000052   0xD007             BEQ.N    ??TIM_UpdateRequestConfig_0
   \   00000054   0x....             LDR.N    R0,??DataTable12  ;; 0x40002000
   \   00000056   0x4284             CMP      R4,R0
   \   00000058   0xD004             BEQ.N    ??TIM_UpdateRequestConfig_0
   \   0000005A   0xF44F 0x71F7      MOV      R1,#+494
   \   0000005E   0x....             LDR.N    R0,??DataTable10_12
   \   00000060   0x.... 0x....      BL       assert_failed
    495            assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
   \                     ??TIM_UpdateRequestConfig_0: (+1)
   \   00000064   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000066   0x2D00             CMP      R5,#+0
   \   00000068   0xD007             BEQ.N    ??TIM_UpdateRequestConfig_1
   \   0000006A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000006C   0x2D01             CMP      R5,#+1
   \   0000006E   0xD004             BEQ.N    ??TIM_UpdateRequestConfig_1
   \   00000070   0xF240 0x11EF      MOVW     R1,#+495
   \   00000074   0x....             LDR.N    R0,??DataTable10_12
   \   00000076   0x.... 0x....      BL       assert_failed
    496          
    497            if (TIM_UpdateSource != TIM_UpdateSource_Global)
   \                     ??TIM_UpdateRequestConfig_1: (+1)
   \   0000007A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000007C   0x2D00             CMP      R5,#+0
   \   0000007E   0xD004             BEQ.N    ??TIM_UpdateRequestConfig_2
    498            {
    499              /* Set the URS Bit */
    500              TIMx->CR1 |= TIM_CR1_URS;
   \   00000080   0x8820             LDRH     R0,[R4, #+0]
   \   00000082   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000086   0x8020             STRH     R0,[R4, #+0]
   \   00000088   0xE004             B.N      ??TIM_UpdateRequestConfig_3
    501            }
    502            else
    503            {
    504              /* Reset the URS Bit */
    505              TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
   \                     ??TIM_UpdateRequestConfig_2: (+1)
   \   0000008A   0x8820             LDRH     R0,[R4, #+0]
   \   0000008C   0xF64F 0x71FB      MOVW     R1,#+65531
   \   00000090   0x4008             ANDS     R0,R1,R0
   \   00000092   0x8020             STRH     R0,[R4, #+0]
    506            }
    507          }
   \                     ??TIM_UpdateRequestConfig_3: (+1)
   \   00000094   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    508          
    509          /**
    510            * @brief  Enables or disables TIMx peripheral Preload register on ARR.
    511            * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
    512            * @param  NewState: new state of the TIMx peripheral Preload register
    513            *          This parameter can be: ENABLE or DISABLE.
    514            * @retval None
    515            */

   \                                 In section .text, align 2, keep-with-next
    516          void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
    517          {
   \                     TIM_ARRPreloadConfig: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    518            /* Check the parameters */
    519            assert_param(IS_TIM_ALL_PERIPH(TIMx));
   \   00000006   0x....             LDR.N    R0,??DataTable10  ;; 0x40010000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD02B             BEQ.N    ??TIM_ARRPreloadConfig_0
   \   0000000C   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000010   0xD028             BEQ.N    ??TIM_ARRPreloadConfig_0
   \   00000012   0x....             LDR.N    R0,??DataTable10_1  ;; 0x40000400
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD025             BEQ.N    ??TIM_ARRPreloadConfig_0
   \   00000018   0x....             LDR.N    R0,??DataTable10_2  ;; 0x40000800
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD022             BEQ.N    ??TIM_ARRPreloadConfig_0
   \   0000001E   0x....             LDR.N    R0,??DataTable10_3  ;; 0x40000c00
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD01F             BEQ.N    ??TIM_ARRPreloadConfig_0
   \   00000024   0x....             LDR.N    R0,??DataTable10_4  ;; 0x40001000
   \   00000026   0x4284             CMP      R4,R0
   \   00000028   0xD01C             BEQ.N    ??TIM_ARRPreloadConfig_0
   \   0000002A   0x....             LDR.N    R0,??DataTable10_5  ;; 0x40001400
   \   0000002C   0x4284             CMP      R4,R0
   \   0000002E   0xD019             BEQ.N    ??TIM_ARRPreloadConfig_0
   \   00000030   0x....             LDR.N    R0,??DataTable10_6  ;; 0x40010400
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD016             BEQ.N    ??TIM_ARRPreloadConfig_0
   \   00000036   0x....             LDR.N    R0,??DataTable10_7  ;; 0x40014000
   \   00000038   0x4284             CMP      R4,R0
   \   0000003A   0xD013             BEQ.N    ??TIM_ARRPreloadConfig_0
   \   0000003C   0x....             LDR.N    R0,??DataTable10_8  ;; 0x40014400
   \   0000003E   0x4284             CMP      R4,R0
   \   00000040   0xD010             BEQ.N    ??TIM_ARRPreloadConfig_0
   \   00000042   0x....             LDR.N    R0,??DataTable10_9  ;; 0x40014800
   \   00000044   0x4284             CMP      R4,R0
   \   00000046   0xD00D             BEQ.N    ??TIM_ARRPreloadConfig_0
   \   00000048   0x....             LDR.N    R0,??DataTable10_10  ;; 0x40001800
   \   0000004A   0x4284             CMP      R4,R0
   \   0000004C   0xD00A             BEQ.N    ??TIM_ARRPreloadConfig_0
   \   0000004E   0x....             LDR.N    R0,??DataTable10_11  ;; 0x40001c00
   \   00000050   0x4284             CMP      R4,R0
   \   00000052   0xD007             BEQ.N    ??TIM_ARRPreloadConfig_0
   \   00000054   0x....             LDR.N    R0,??DataTable12  ;; 0x40002000
   \   00000056   0x4284             CMP      R4,R0
   \   00000058   0xD004             BEQ.N    ??TIM_ARRPreloadConfig_0
   \   0000005A   0xF240 0x2107      MOVW     R1,#+519
   \   0000005E   0x....             LDR.N    R0,??DataTable10_12
   \   00000060   0x.... 0x....      BL       assert_failed
    520            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \                     ??TIM_ARRPreloadConfig_0: (+1)
   \   00000064   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000066   0x2D00             CMP      R5,#+0
   \   00000068   0xD007             BEQ.N    ??TIM_ARRPreloadConfig_1
   \   0000006A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000006C   0x2D01             CMP      R5,#+1
   \   0000006E   0xD004             BEQ.N    ??TIM_ARRPreloadConfig_1
   \   00000070   0xF44F 0x7102      MOV      R1,#+520
   \   00000074   0x....             LDR.N    R0,??DataTable10_12
   \   00000076   0x.... 0x....      BL       assert_failed
    521          
    522            if (NewState != DISABLE)
   \                     ??TIM_ARRPreloadConfig_1: (+1)
   \   0000007A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000007C   0x2D00             CMP      R5,#+0
   \   0000007E   0xD004             BEQ.N    ??TIM_ARRPreloadConfig_2
    523            {
    524              /* Set the ARR Preload Bit */
    525              TIMx->CR1 |= TIM_CR1_ARPE;
   \   00000080   0x8820             LDRH     R0,[R4, #+0]
   \   00000082   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000086   0x8020             STRH     R0,[R4, #+0]
   \   00000088   0xE004             B.N      ??TIM_ARRPreloadConfig_3
    526            }
    527            else
    528            {
    529              /* Reset the ARR Preload Bit */
    530              TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
   \                     ??TIM_ARRPreloadConfig_2: (+1)
   \   0000008A   0x8820             LDRH     R0,[R4, #+0]
   \   0000008C   0xF64F 0x717F      MOVW     R1,#+65407
   \   00000090   0x4008             ANDS     R0,R1,R0
   \   00000092   0x8020             STRH     R0,[R4, #+0]
    531            }
    532          }
   \                     ??TIM_ARRPreloadConfig_3: (+1)
   \   00000094   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    533          
    534          /**
    535            * @brief  Selects the TIMx's One Pulse Mode.
    536            * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
    537            * @param  TIM_OPMode: specifies the OPM Mode to be used.
    538            *          This parameter can be one of the following values:
    539            *            @arg TIM_OPMode_Single
    540            *            @arg TIM_OPMode_Repetitive
    541            * @retval None
    542            */

   \                                 In section .text, align 2, keep-with-next
    543          void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
    544          {
   \                     TIM_SelectOnePulseMode: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    545            /* Check the parameters */
    546            assert_param(IS_TIM_ALL_PERIPH(TIMx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x40010000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD037             BEQ.N    ??TIM_SelectOnePulseMode_0
   \   0000000E   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000012   0xD034             BEQ.N    ??TIM_SelectOnePulseMode_0
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable19_1  ;; 0x40000400
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD030             BEQ.N    ??TIM_SelectOnePulseMode_0
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable19_2  ;; 0x40000800
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD02C             BEQ.N    ??TIM_SelectOnePulseMode_0
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable19_3  ;; 0x40000c00
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD028             BEQ.N    ??TIM_SelectOnePulseMode_0
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable20  ;; 0x40001000
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD024             BEQ.N    ??TIM_SelectOnePulseMode_0
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable20_1  ;; 0x40001400
   \   00000038   0x4284             CMP      R4,R0
   \   0000003A   0xD020             BEQ.N    ??TIM_SelectOnePulseMode_0
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable20_2  ;; 0x40010400
   \   00000040   0x4284             CMP      R4,R0
   \   00000042   0xD01C             BEQ.N    ??TIM_SelectOnePulseMode_0
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable20_3  ;; 0x40014000
   \   00000048   0x4284             CMP      R4,R0
   \   0000004A   0xD018             BEQ.N    ??TIM_SelectOnePulseMode_0
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable20_4  ;; 0x40014400
   \   00000050   0x4284             CMP      R4,R0
   \   00000052   0xD014             BEQ.N    ??TIM_SelectOnePulseMode_0
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable20_5  ;; 0x40014800
   \   00000058   0x4284             CMP      R4,R0
   \   0000005A   0xD010             BEQ.N    ??TIM_SelectOnePulseMode_0
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable20_6  ;; 0x40001800
   \   00000060   0x4284             CMP      R4,R0
   \   00000062   0xD00C             BEQ.N    ??TIM_SelectOnePulseMode_0
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable20_7  ;; 0x40001c00
   \   00000068   0x4284             CMP      R4,R0
   \   0000006A   0xD008             BEQ.N    ??TIM_SelectOnePulseMode_0
   \   0000006C   0x....             LDR.N    R0,??DataTable12  ;; 0x40002000
   \   0000006E   0x4284             CMP      R4,R0
   \   00000070   0xD005             BEQ.N    ??TIM_SelectOnePulseMode_0
   \   00000072   0xF240 0x2122      MOVW     R1,#+546
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable27
   \   0000007A   0x.... 0x....      BL       assert_failed
    547            assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
   \                     ??TIM_SelectOnePulseMode_0: (+1)
   \   0000007E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000080   0x2D08             CMP      R5,#+8
   \   00000082   0xD008             BEQ.N    ??TIM_SelectOnePulseMode_1
   \   00000084   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000086   0x2D00             CMP      R5,#+0
   \   00000088   0xD005             BEQ.N    ??TIM_SelectOnePulseMode_1
   \   0000008A   0xF240 0x2123      MOVW     R1,#+547
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000092   0x.... 0x....      BL       assert_failed
    548          
    549            /* Reset the OPM Bit */
    550            TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
   \                     ??TIM_SelectOnePulseMode_1: (+1)
   \   00000096   0x8820             LDRH     R0,[R4, #+0]
   \   00000098   0xF64F 0x71F7      MOVW     R1,#+65527
   \   0000009C   0x4008             ANDS     R0,R1,R0
   \   0000009E   0x8020             STRH     R0,[R4, #+0]
    551          
    552            /* Configure the OPM Mode */
    553            TIMx->CR1 |= TIM_OPMode;
   \   000000A0   0x8820             LDRH     R0,[R4, #+0]
   \   000000A2   0x4328             ORRS     R0,R5,R0
   \   000000A4   0x8020             STRH     R0,[R4, #+0]
    554          }
   \   000000A6   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    555          
    556          /**
    557            * @brief  Sets the TIMx Clock Division value.
    558            * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
    559            * @param  TIM_CKD: specifies the clock division value.
    560            *          This parameter can be one of the following value:
    561            *            @arg TIM_CKD_DIV1: TDTS = Tck_tim
    562            *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
    563            *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
    564            * @retval None
    565            */

   \                                 In section .text, align 2, keep-with-next
    566          void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
    567          {
   \                     TIM_SetClockDivision: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    568            /* Check the parameters */
    569            assert_param(IS_TIM_LIST1_PERIPH(TIMx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x40010000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD02F             BEQ.N    ??TIM_SetClockDivision_0
   \   0000000E   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000012   0xD02C             BEQ.N    ??TIM_SetClockDivision_0
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable19_1  ;; 0x40000400
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD028             BEQ.N    ??TIM_SetClockDivision_0
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable19_2  ;; 0x40000800
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD024             BEQ.N    ??TIM_SetClockDivision_0
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable19_3  ;; 0x40000c00
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD020             BEQ.N    ??TIM_SetClockDivision_0
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable20_2  ;; 0x40010400
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD01C             BEQ.N    ??TIM_SetClockDivision_0
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable20_3  ;; 0x40014000
   \   00000038   0x4284             CMP      R4,R0
   \   0000003A   0xD018             BEQ.N    ??TIM_SetClockDivision_0
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable20_4  ;; 0x40014400
   \   00000040   0x4284             CMP      R4,R0
   \   00000042   0xD014             BEQ.N    ??TIM_SetClockDivision_0
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable20_5  ;; 0x40014800
   \   00000048   0x4284             CMP      R4,R0
   \   0000004A   0xD010             BEQ.N    ??TIM_SetClockDivision_0
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable20_6  ;; 0x40001800
   \   00000050   0x4284             CMP      R4,R0
   \   00000052   0xD00C             BEQ.N    ??TIM_SetClockDivision_0
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable20_7  ;; 0x40001c00
   \   00000058   0x4284             CMP      R4,R0
   \   0000005A   0xD008             BEQ.N    ??TIM_SetClockDivision_0
   \   0000005C   0x....             LDR.N    R0,??DataTable12  ;; 0x40002000
   \   0000005E   0x4284             CMP      R4,R0
   \   00000060   0xD005             BEQ.N    ??TIM_SetClockDivision_0
   \   00000062   0xF240 0x2139      MOVW     R1,#+569
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable27
   \   0000006A   0x.... 0x....      BL       assert_failed
    570            assert_param(IS_TIM_CKD_DIV(TIM_CKD));
   \                     ??TIM_SetClockDivision_0: (+1)
   \   0000006E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000070   0x2D00             CMP      R5,#+0
   \   00000072   0xD00D             BEQ.N    ??TIM_SetClockDivision_1
   \   00000074   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000076   0xF5B5 0x7F80      CMP      R5,#+256
   \   0000007A   0xD009             BEQ.N    ??TIM_SetClockDivision_1
   \   0000007C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000007E   0xF5B5 0x7F00      CMP      R5,#+512
   \   00000082   0xD005             BEQ.N    ??TIM_SetClockDivision_1
   \   00000084   0xF240 0x213A      MOVW     R1,#+570
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable27
   \   0000008C   0x.... 0x....      BL       assert_failed
    571          
    572            /* Reset the CKD Bits */
    573            TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
   \                     ??TIM_SetClockDivision_1: (+1)
   \   00000090   0x8820             LDRH     R0,[R4, #+0]
   \   00000092   0xF64F 0x41FF      MOVW     R1,#+64767
   \   00000096   0x4008             ANDS     R0,R1,R0
   \   00000098   0x8020             STRH     R0,[R4, #+0]
    574          
    575            /* Set the CKD value */
    576            TIMx->CR1 |= TIM_CKD;
   \   0000009A   0x8820             LDRH     R0,[R4, #+0]
   \   0000009C   0x4328             ORRS     R0,R5,R0
   \   0000009E   0x8020             STRH     R0,[R4, #+0]
    577          }
   \   000000A0   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    578          
    579          /**
    580            * @brief  Enables or disables the specified TIM peripheral.
    581            * @param  TIMx: where x can be 1 to 14 to select the TIMx peripheral.
    582            * @param  NewState: new state of the TIMx peripheral.
    583            *          This parameter can be: ENABLE or DISABLE.
    584            * @retval None
    585            */

   \                                 In section .text, align 2, keep-with-next
    586          void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
    587          {
   \                     TIM_Cmd: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    588            /* Check the parameters */
    589            assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x40010000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD038             BEQ.N    ??TIM_Cmd_0
   \   0000000E   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000012   0xD035             BEQ.N    ??TIM_Cmd_0
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable19_1  ;; 0x40000400
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD031             BEQ.N    ??TIM_Cmd_0
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable19_2  ;; 0x40000800
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD02D             BEQ.N    ??TIM_Cmd_0
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable19_3  ;; 0x40000c00
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD029             BEQ.N    ??TIM_Cmd_0
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable20  ;; 0x40001000
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD025             BEQ.N    ??TIM_Cmd_0
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable20_1  ;; 0x40001400
   \   00000038   0x4284             CMP      R4,R0
   \   0000003A   0xD021             BEQ.N    ??TIM_Cmd_0
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable20_2  ;; 0x40010400
   \   00000040   0x4284             CMP      R4,R0
   \   00000042   0xD01D             BEQ.N    ??TIM_Cmd_0
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable20_3  ;; 0x40014000
   \   00000048   0x4284             CMP      R4,R0
   \   0000004A   0xD019             BEQ.N    ??TIM_Cmd_0
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable20_4  ;; 0x40014400
   \   00000050   0x4284             CMP      R4,R0
   \   00000052   0xD015             BEQ.N    ??TIM_Cmd_0
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable20_5  ;; 0x40014800
   \   00000058   0x4284             CMP      R4,R0
   \   0000005A   0xD011             BEQ.N    ??TIM_Cmd_0
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable20_6  ;; 0x40001800
   \   00000060   0x4284             CMP      R4,R0
   \   00000062   0xD00D             BEQ.N    ??TIM_Cmd_0
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable20_7  ;; 0x40001c00
   \   00000068   0x4284             CMP      R4,R0
   \   0000006A   0xD009             BEQ.N    ??TIM_Cmd_0
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable23  ;; 0x40002000
   \   00000070   0x4284             CMP      R4,R0
   \   00000072   0xD005             BEQ.N    ??TIM_Cmd_0
   \   00000074   0xF240 0x214D      MOVW     R1,#+589
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable27
   \   0000007C   0x.... 0x....      BL       assert_failed
    590            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \                     ??TIM_Cmd_0: (+1)
   \   00000080   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000082   0x2D00             CMP      R5,#+0
   \   00000084   0xD008             BEQ.N    ??TIM_Cmd_1
   \   00000086   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000088   0x2D01             CMP      R5,#+1
   \   0000008A   0xD005             BEQ.N    ??TIM_Cmd_1
   \   0000008C   0xF240 0x214E      MOVW     R1,#+590
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000094   0x.... 0x....      BL       assert_failed
    591            
    592            if (NewState != DISABLE)
   \                     ??TIM_Cmd_1: (+1)
   \   00000098   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000009A   0x2D00             CMP      R5,#+0
   \   0000009C   0xD004             BEQ.N    ??TIM_Cmd_2
    593            {
    594              /* Enable the TIM Counter */
    595              TIMx->CR1 |= TIM_CR1_CEN;
   \   0000009E   0x8820             LDRH     R0,[R4, #+0]
   \   000000A0   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000A4   0x8020             STRH     R0,[R4, #+0]
   \   000000A6   0xE004             B.N      ??TIM_Cmd_3
    596            }
    597            else
    598            {
    599              /* Disable the TIM Counter */
    600              TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
   \                     ??TIM_Cmd_2: (+1)
   \   000000A8   0x8820             LDRH     R0,[R4, #+0]
   \   000000AA   0xF64F 0x71FE      MOVW     R1,#+65534
   \   000000AE   0x4008             ANDS     R0,R1,R0
   \   000000B0   0x8020             STRH     R0,[R4, #+0]
    601            }
    602          }
   \                     ??TIM_Cmd_3: (+1)
   \   000000B2   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    603          /**
    604            * @}
    605            */
    606          
    607          /** @defgroup TIM_Group2 Output Compare management functions
    608           *  @brief    Output Compare management functions 
    609           *
    610          @verbatim   
    611           ===============================================================================
    612                                  Output Compare management functions
    613           ===============================================================================  
    614             
    615                 ===================================================================      
    616                        TIM Driver: how to use it in Output Compare Mode
    617                 =================================================================== 
    618                 To use the Timer in Output Compare mode, the following steps are mandatory:
    619                 
    620                 1. Enable TIM clock using RCC_APBxPeriphClockCmd(RCC_APBxPeriph_TIMx, ENABLE) function
    621                 
    622                 2. Configure the TIM pins by configuring the corresponding GPIO pins
    623                 
    624                 2. Configure the Time base unit as described in the first part of this driver, 
    625                    if needed, else the Timer will run with the default configuration:
    626                    - Autoreload value = 0xFFFF
    627                    - Prescaler value = 0x0000
    628                    - Counter mode = Up counting
    629                    - Clock Division = TIM_CKD_DIV1
    630                    
    631                 3. Fill the TIM_OCInitStruct with the desired parameters including:
    632                    - The TIM Output Compare mode: TIM_OCMode
    633                    - TIM Output State: TIM_OutputState
    634                    - TIM Pulse value: TIM_Pulse
    635                    - TIM Output Compare Polarity : TIM_OCPolarity
    636                 
    637                 4. Call TIM_OCxInit(TIMx, &TIM_OCInitStruct) to configure the desired channel with the 
    638                    corresponding configuration
    639                 
    640                 5. Call the TIM_Cmd(ENABLE) function to enable the TIM counter.
    641                 
    642                 Note1: All other functions can be used separately to modify, if needed,
    643                        a specific feature of the Timer. 
    644                    
    645                 Note2: In case of PWM mode, this function is mandatory:
    646                        TIM_OCxPreloadConfig(TIMx, TIM_OCPreload_ENABLE); 
    647                        
    648                 Note3: If the corresponding interrupt or DMA request are needed, the user should:
    649                          1. Enable the NVIC (or the DMA) to use the TIM interrupts (or DMA requests). 
    650                          2. Enable the corresponding interrupt (or DMA request) using the function 
    651                             TIM_ITConfig(TIMx, TIM_IT_CCx) (or TIM_DMA_Cmd(TIMx, TIM_DMA_CCx))   
    652          
    653          @endverbatim
    654            * @{
    655            */
    656          
    657          /**
    658            * @brief  Initializes the TIMx Channel1 according to the specified parameters in
    659            *         the TIM_OCInitStruct.
    660            * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
    661            * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
    662            *         the configuration information for the specified TIM peripheral.
    663            * @retval None
    664            */

   \                                 In section .text, align 2, keep-with-next
    665          void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
    666          {
   \                     TIM_OC1Init: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    667            uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
   \   00000008   0x2600             MOVS     R6,#+0
   \   0000000A   0x2700             MOVS     R7,#+0
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
    668             
    669            /* Check the parameters */
    670            assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x40010000
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD030             BEQ.N    ??TIM_OC1Init_0
   \   00000018   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   0000001C   0xD02D             BEQ.N    ??TIM_OC1Init_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable19_1  ;; 0x40000400
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD029             BEQ.N    ??TIM_OC1Init_0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable19_2  ;; 0x40000800
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD025             BEQ.N    ??TIM_OC1Init_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable19_3  ;; 0x40000c00
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD021             BEQ.N    ??TIM_OC1Init_0
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable20_2  ;; 0x40010400
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD01D             BEQ.N    ??TIM_OC1Init_0
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable20_3  ;; 0x40014000
   \   00000042   0x4284             CMP      R4,R0
   \   00000044   0xD019             BEQ.N    ??TIM_OC1Init_0
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable20_4  ;; 0x40014400
   \   0000004A   0x4284             CMP      R4,R0
   \   0000004C   0xD015             BEQ.N    ??TIM_OC1Init_0
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable20_5  ;; 0x40014800
   \   00000052   0x4284             CMP      R4,R0
   \   00000054   0xD011             BEQ.N    ??TIM_OC1Init_0
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable20_6  ;; 0x40001800
   \   0000005A   0x4284             CMP      R4,R0
   \   0000005C   0xD00D             BEQ.N    ??TIM_OC1Init_0
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable20_7  ;; 0x40001c00
   \   00000062   0x4284             CMP      R4,R0
   \   00000064   0xD009             BEQ.N    ??TIM_OC1Init_0
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable23  ;; 0x40002000
   \   0000006A   0x4284             CMP      R4,R0
   \   0000006C   0xD005             BEQ.N    ??TIM_OC1Init_0
   \   0000006E   0xF240 0x219E      MOVW     R1,#+670
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000076   0x.... 0x....      BL       assert_failed
    671            assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
   \                     ??TIM_OC1Init_0: (+1)
   \   0000007A   0x8828             LDRH     R0,[R5, #+0]
   \   0000007C   0x2800             CMP      R0,#+0
   \   0000007E   0xD014             BEQ.N    ??TIM_OC1Init_1
   \   00000080   0x8828             LDRH     R0,[R5, #+0]
   \   00000082   0x2810             CMP      R0,#+16
   \   00000084   0xD011             BEQ.N    ??TIM_OC1Init_1
   \   00000086   0x8828             LDRH     R0,[R5, #+0]
   \   00000088   0x2820             CMP      R0,#+32
   \   0000008A   0xD00E             BEQ.N    ??TIM_OC1Init_1
   \   0000008C   0x8828             LDRH     R0,[R5, #+0]
   \   0000008E   0x2830             CMP      R0,#+48
   \   00000090   0xD00B             BEQ.N    ??TIM_OC1Init_1
   \   00000092   0x8828             LDRH     R0,[R5, #+0]
   \   00000094   0x2860             CMP      R0,#+96
   \   00000096   0xD008             BEQ.N    ??TIM_OC1Init_1
   \   00000098   0x8828             LDRH     R0,[R5, #+0]
   \   0000009A   0x2870             CMP      R0,#+112
   \   0000009C   0xD005             BEQ.N    ??TIM_OC1Init_1
   \   0000009E   0xF240 0x219F      MOVW     R1,#+671
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable27
   \   000000A6   0x.... 0x....      BL       assert_failed
    672            assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
   \                     ??TIM_OC1Init_1: (+1)
   \   000000AA   0x8868             LDRH     R0,[R5, #+2]
   \   000000AC   0x2800             CMP      R0,#+0
   \   000000AE   0xD008             BEQ.N    ??TIM_OC1Init_2
   \   000000B0   0x8868             LDRH     R0,[R5, #+2]
   \   000000B2   0x2801             CMP      R0,#+1
   \   000000B4   0xD005             BEQ.N    ??TIM_OC1Init_2
   \   000000B6   0xF44F 0x7128      MOV      R1,#+672
   \   000000BA   0x.... 0x....      LDR.W    R0,??DataTable27
   \   000000BE   0x.... 0x....      BL       assert_failed
    673            assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   \                     ??TIM_OC1Init_2: (+1)
   \   000000C2   0x89A8             LDRH     R0,[R5, #+12]
   \   000000C4   0x2800             CMP      R0,#+0
   \   000000C6   0xD008             BEQ.N    ??TIM_OC1Init_3
   \   000000C8   0x89A8             LDRH     R0,[R5, #+12]
   \   000000CA   0x2802             CMP      R0,#+2
   \   000000CC   0xD005             BEQ.N    ??TIM_OC1Init_3
   \   000000CE   0xF240 0x21A1      MOVW     R1,#+673
   \   000000D2   0x.... 0x....      LDR.W    R0,??DataTable27
   \   000000D6   0x.... 0x....      BL       assert_failed
    674          
    675            /* Disable the Channel 1: Reset the CC1E Bit */
    676            TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
   \                     ??TIM_OC1Init_3: (+1)
   \   000000DA   0x8C20             LDRH     R0,[R4, #+32]
   \   000000DC   0xF64F 0x71FE      MOVW     R1,#+65534
   \   000000E0   0x4008             ANDS     R0,R1,R0
   \   000000E2   0x8420             STRH     R0,[R4, #+32]
    677            
    678            /* Get the TIMx CCER register value */
    679            tmpccer = TIMx->CCER;
   \   000000E4   0x8C20             LDRH     R0,[R4, #+32]
   \   000000E6   0x0007             MOVS     R7,R0
    680            /* Get the TIMx CR2 register value */
    681            tmpcr2 =  TIMx->CR2;
   \   000000E8   0x88A0             LDRH     R0,[R4, #+4]
   \   000000EA   0x4680             MOV      R8,R0
    682            
    683            /* Get the TIMx CCMR1 register value */
    684            tmpccmrx = TIMx->CCMR1;
   \   000000EC   0x8B20             LDRH     R0,[R4, #+24]
   \   000000EE   0x0006             MOVS     R6,R0
    685              
    686            /* Reset the Output Compare Mode Bits */
    687            tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
   \   000000F0   0xF64F 0x708F      MOVW     R0,#+65423
   \   000000F4   0x4006             ANDS     R6,R0,R6
    688            tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
   \   000000F6   0xF64F 0x70FC      MOVW     R0,#+65532
   \   000000FA   0x4006             ANDS     R6,R0,R6
    689            /* Select the Output Compare Mode */
    690            tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
   \   000000FC   0x8828             LDRH     R0,[R5, #+0]
   \   000000FE   0x4306             ORRS     R6,R0,R6
    691            
    692            /* Reset the Output Polarity level */
    693            tmpccer &= (uint16_t)~TIM_CCER_CC1P;
   \   00000100   0xF64F 0x70FD      MOVW     R0,#+65533
   \   00000104   0x4007             ANDS     R7,R0,R7
    694            /* Set the Output Compare Polarity */
    695            tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
   \   00000106   0x89A8             LDRH     R0,[R5, #+12]
   \   00000108   0x4307             ORRS     R7,R0,R7
    696            
    697            /* Set the Output State */
    698            tmpccer |= TIM_OCInitStruct->TIM_OutputState;
   \   0000010A   0x8868             LDRH     R0,[R5, #+2]
   \   0000010C   0x4307             ORRS     R7,R0,R7
    699              
    700            if((TIMx == TIM1) || (TIMx == TIM8))
   \   0000010E   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x40010000
   \   00000112   0x4284             CMP      R4,R0
   \   00000114   0xD003             BEQ.N    ??TIM_OC1Init_4
   \   00000116   0x.... 0x....      LDR.W    R0,??DataTable20_2  ;; 0x40010400
   \   0000011A   0x4284             CMP      R4,R0
   \   0000011C   0xD149             BNE.N    ??TIM_OC1Init_5
    701            {
    702              assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
   \                     ??TIM_OC1Init_4: (+1)
   \   0000011E   0x88A8             LDRH     R0,[R5, #+4]
   \   00000120   0x2800             CMP      R0,#+0
   \   00000122   0xD008             BEQ.N    ??TIM_OC1Init_6
   \   00000124   0x88A8             LDRH     R0,[R5, #+4]
   \   00000126   0x2804             CMP      R0,#+4
   \   00000128   0xD005             BEQ.N    ??TIM_OC1Init_6
   \   0000012A   0xF240 0x21BE      MOVW     R1,#+702
   \   0000012E   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000132   0x.... 0x....      BL       assert_failed
    703              assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
   \                     ??TIM_OC1Init_6: (+1)
   \   00000136   0x89E8             LDRH     R0,[R5, #+14]
   \   00000138   0x2800             CMP      R0,#+0
   \   0000013A   0xD008             BEQ.N    ??TIM_OC1Init_7
   \   0000013C   0x89E8             LDRH     R0,[R5, #+14]
   \   0000013E   0x2808             CMP      R0,#+8
   \   00000140   0xD005             BEQ.N    ??TIM_OC1Init_7
   \   00000142   0xF240 0x21BF      MOVW     R1,#+703
   \   00000146   0x.... 0x....      LDR.W    R0,??DataTable27
   \   0000014A   0x.... 0x....      BL       assert_failed
    704              assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
   \                     ??TIM_OC1Init_7: (+1)
   \   0000014E   0x8A68             LDRH     R0,[R5, #+18]
   \   00000150   0xF5B0 0x7F00      CMP      R0,#+512
   \   00000154   0xD008             BEQ.N    ??TIM_OC1Init_8
   \   00000156   0x8A68             LDRH     R0,[R5, #+18]
   \   00000158   0x2800             CMP      R0,#+0
   \   0000015A   0xD005             BEQ.N    ??TIM_OC1Init_8
   \   0000015C   0xF44F 0x7130      MOV      R1,#+704
   \   00000160   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000164   0x.... 0x....      BL       assert_failed
    705              assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
   \                     ??TIM_OC1Init_8: (+1)
   \   00000168   0x8A28             LDRH     R0,[R5, #+16]
   \   0000016A   0xF5B0 0x7F80      CMP      R0,#+256
   \   0000016E   0xD008             BEQ.N    ??TIM_OC1Init_9
   \   00000170   0x8A28             LDRH     R0,[R5, #+16]
   \   00000172   0x2800             CMP      R0,#+0
   \   00000174   0xD005             BEQ.N    ??TIM_OC1Init_9
   \   00000176   0xF240 0x21C1      MOVW     R1,#+705
   \   0000017A   0x.... 0x....      LDR.W    R0,??DataTable27
   \   0000017E   0x.... 0x....      BL       assert_failed
    706              
    707              /* Reset the Output N Polarity level */
    708              tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
   \                     ??TIM_OC1Init_9: (+1)
   \   00000182   0xF64F 0x70F7      MOVW     R0,#+65527
   \   00000186   0x4007             ANDS     R7,R0,R7
    709              /* Set the Output N Polarity */
    710              tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
   \   00000188   0x89E8             LDRH     R0,[R5, #+14]
   \   0000018A   0x4307             ORRS     R7,R0,R7
    711              /* Reset the Output N State */
    712              tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
   \   0000018C   0xF64F 0x70FB      MOVW     R0,#+65531
   \   00000190   0x4007             ANDS     R7,R0,R7
    713              
    714              /* Set the Output N State */
    715              tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
   \   00000192   0x88A8             LDRH     R0,[R5, #+4]
   \   00000194   0x4307             ORRS     R7,R0,R7
    716              /* Reset the Output Compare and Output Compare N IDLE State */
    717              tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
   \   00000196   0xF64F 0x60FF      MOVW     R0,#+65279
   \   0000019A   0xEA10 0x0808      ANDS     R8,R0,R8
    718              tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
   \   0000019E   0xF64F 0x50FF      MOVW     R0,#+65023
   \   000001A2   0xEA10 0x0808      ANDS     R8,R0,R8
    719              /* Set the Output Idle state */
    720              tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
   \   000001A6   0x8A28             LDRH     R0,[R5, #+16]
   \   000001A8   0xEA50 0x0808      ORRS     R8,R0,R8
    721              /* Set the Output N Idle state */
    722              tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
   \   000001AC   0x8A68             LDRH     R0,[R5, #+18]
   \   000001AE   0xEA50 0x0808      ORRS     R8,R0,R8
    723            }
    724            /* Write to TIMx CR2 */
    725            TIMx->CR2 = tmpcr2;
   \                     ??TIM_OC1Init_5: (+1)
   \   000001B2   0xF8A4 0x8004      STRH     R8,[R4, #+4]
    726            
    727            /* Write to TIMx CCMR1 */
    728            TIMx->CCMR1 = tmpccmrx;
   \   000001B6   0x8326             STRH     R6,[R4, #+24]
    729            
    730            /* Set the Capture Compare Register value */
    731            TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
   \   000001B8   0x68A8             LDR      R0,[R5, #+8]
   \   000001BA   0x6360             STR      R0,[R4, #+52]
    732            
    733            /* Write to TIMx CCER */
    734            TIMx->CCER = tmpccer;
   \   000001BC   0x8427             STRH     R7,[R4, #+32]
    735          }
   \   000001BE   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    736          
    737          /**
    738            * @brief  Initializes the TIMx Channel2 according to the specified parameters 
    739            *         in the TIM_OCInitStruct.
    740            * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
    741            *         peripheral.
    742            * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
    743            *         the configuration information for the specified TIM peripheral.
    744            * @retval None
    745            */

   \                                 In section .text, align 2, keep-with-next
    746          void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
    747          {
   \                     TIM_OC2Init: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    748            uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
   \   00000008   0x2600             MOVS     R6,#+0
   \   0000000A   0x2700             MOVS     R7,#+0
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
    749             
    750            /* Check the parameters */
    751            assert_param(IS_TIM_LIST2_PERIPH(TIMx)); 
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x40010000
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD020             BEQ.N    ??TIM_OC2Init_0
   \   00000018   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   0000001C   0xD01D             BEQ.N    ??TIM_OC2Init_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable19_1  ;; 0x40000400
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD019             BEQ.N    ??TIM_OC2Init_0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable19_2  ;; 0x40000800
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD015             BEQ.N    ??TIM_OC2Init_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable19_3  ;; 0x40000c00
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD011             BEQ.N    ??TIM_OC2Init_0
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable20_2  ;; 0x40010400
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD00D             BEQ.N    ??TIM_OC2Init_0
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable20_3  ;; 0x40014000
   \   00000042   0x4284             CMP      R4,R0
   \   00000044   0xD009             BEQ.N    ??TIM_OC2Init_0
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable20_6  ;; 0x40001800
   \   0000004A   0x4284             CMP      R4,R0
   \   0000004C   0xD005             BEQ.N    ??TIM_OC2Init_0
   \   0000004E   0xF240 0x21EF      MOVW     R1,#+751
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000056   0x.... 0x....      BL       assert_failed
    752            assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
   \                     ??TIM_OC2Init_0: (+1)
   \   0000005A   0x8828             LDRH     R0,[R5, #+0]
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD014             BEQ.N    ??TIM_OC2Init_1
   \   00000060   0x8828             LDRH     R0,[R5, #+0]
   \   00000062   0x2810             CMP      R0,#+16
   \   00000064   0xD011             BEQ.N    ??TIM_OC2Init_1
   \   00000066   0x8828             LDRH     R0,[R5, #+0]
   \   00000068   0x2820             CMP      R0,#+32
   \   0000006A   0xD00E             BEQ.N    ??TIM_OC2Init_1
   \   0000006C   0x8828             LDRH     R0,[R5, #+0]
   \   0000006E   0x2830             CMP      R0,#+48
   \   00000070   0xD00B             BEQ.N    ??TIM_OC2Init_1
   \   00000072   0x8828             LDRH     R0,[R5, #+0]
   \   00000074   0x2860             CMP      R0,#+96
   \   00000076   0xD008             BEQ.N    ??TIM_OC2Init_1
   \   00000078   0x8828             LDRH     R0,[R5, #+0]
   \   0000007A   0x2870             CMP      R0,#+112
   \   0000007C   0xD005             BEQ.N    ??TIM_OC2Init_1
   \   0000007E   0xF44F 0x713C      MOV      R1,#+752
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000086   0x.... 0x....      BL       assert_failed
    753            assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
   \                     ??TIM_OC2Init_1: (+1)
   \   0000008A   0x8868             LDRH     R0,[R5, #+2]
   \   0000008C   0x2800             CMP      R0,#+0
   \   0000008E   0xD008             BEQ.N    ??TIM_OC2Init_2
   \   00000090   0x8868             LDRH     R0,[R5, #+2]
   \   00000092   0x2801             CMP      R0,#+1
   \   00000094   0xD005             BEQ.N    ??TIM_OC2Init_2
   \   00000096   0xF240 0x21F1      MOVW     R1,#+753
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable27
   \   0000009E   0x.... 0x....      BL       assert_failed
    754            assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   \                     ??TIM_OC2Init_2: (+1)
   \   000000A2   0x89A8             LDRH     R0,[R5, #+12]
   \   000000A4   0x2800             CMP      R0,#+0
   \   000000A6   0xD008             BEQ.N    ??TIM_OC2Init_3
   \   000000A8   0x89A8             LDRH     R0,[R5, #+12]
   \   000000AA   0x2802             CMP      R0,#+2
   \   000000AC   0xD005             BEQ.N    ??TIM_OC2Init_3
   \   000000AE   0xF240 0x21F2      MOVW     R1,#+754
   \   000000B2   0x.... 0x....      LDR.W    R0,??DataTable27
   \   000000B6   0x.... 0x....      BL       assert_failed
    755          
    756            /* Disable the Channel 2: Reset the CC2E Bit */
    757            TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
   \                     ??TIM_OC2Init_3: (+1)
   \   000000BA   0x8C20             LDRH     R0,[R4, #+32]
   \   000000BC   0xF64F 0x71EF      MOVW     R1,#+65519
   \   000000C0   0x4008             ANDS     R0,R1,R0
   \   000000C2   0x8420             STRH     R0,[R4, #+32]
    758            
    759            /* Get the TIMx CCER register value */  
    760            tmpccer = TIMx->CCER;
   \   000000C4   0x8C20             LDRH     R0,[R4, #+32]
   \   000000C6   0x0007             MOVS     R7,R0
    761            /* Get the TIMx CR2 register value */
    762            tmpcr2 =  TIMx->CR2;
   \   000000C8   0x88A0             LDRH     R0,[R4, #+4]
   \   000000CA   0x4680             MOV      R8,R0
    763            
    764            /* Get the TIMx CCMR1 register value */
    765            tmpccmrx = TIMx->CCMR1;
   \   000000CC   0x8B20             LDRH     R0,[R4, #+24]
   \   000000CE   0x0006             MOVS     R6,R0
    766              
    767            /* Reset the Output Compare mode and Capture/Compare selection Bits */
    768            tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
   \   000000D0   0xF648 0x70FF      MOVW     R0,#+36863
   \   000000D4   0x4006             ANDS     R6,R0,R6
    769            tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
   \   000000D6   0xF64F 0x40FF      MOVW     R0,#+64767
   \   000000DA   0x4006             ANDS     R6,R0,R6
    770            
    771            /* Select the Output Compare Mode */
    772            tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
   \   000000DC   0x8828             LDRH     R0,[R5, #+0]
   \   000000DE   0xEA56 0x2600      ORRS     R6,R6,R0, LSL #+8
    773            
    774            /* Reset the Output Polarity level */
    775            tmpccer &= (uint16_t)~TIM_CCER_CC2P;
   \   000000E2   0xF64F 0x70DF      MOVW     R0,#+65503
   \   000000E6   0x4007             ANDS     R7,R0,R7
    776            /* Set the Output Compare Polarity */
    777            tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
   \   000000E8   0x89A8             LDRH     R0,[R5, #+12]
   \   000000EA   0xEA57 0x1700      ORRS     R7,R7,R0, LSL #+4
    778            
    779            /* Set the Output State */
    780            tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
   \   000000EE   0x8868             LDRH     R0,[R5, #+2]
   \   000000F0   0xEA57 0x1700      ORRS     R7,R7,R0, LSL #+4
    781              
    782            if((TIMx == TIM1) || (TIMx == TIM8))
   \   000000F4   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x40010000
   \   000000F8   0x4284             CMP      R4,R0
   \   000000FA   0xD003             BEQ.N    ??TIM_OC2Init_4
   \   000000FC   0x.... 0x....      LDR.W    R0,??DataTable20_2  ;; 0x40010400
   \   00000100   0x4284             CMP      R4,R0
   \   00000102   0xD14B             BNE.N    ??TIM_OC2Init_5
    783            {
    784              assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
   \                     ??TIM_OC2Init_4: (+1)
   \   00000104   0x88A8             LDRH     R0,[R5, #+4]
   \   00000106   0x2800             CMP      R0,#+0
   \   00000108   0xD008             BEQ.N    ??TIM_OC2Init_6
   \   0000010A   0x88A8             LDRH     R0,[R5, #+4]
   \   0000010C   0x2804             CMP      R0,#+4
   \   0000010E   0xD005             BEQ.N    ??TIM_OC2Init_6
   \   00000110   0xF44F 0x7144      MOV      R1,#+784
   \   00000114   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000118   0x.... 0x....      BL       assert_failed
    785              assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
   \                     ??TIM_OC2Init_6: (+1)
   \   0000011C   0x89E8             LDRH     R0,[R5, #+14]
   \   0000011E   0x2800             CMP      R0,#+0
   \   00000120   0xD008             BEQ.N    ??TIM_OC2Init_7
   \   00000122   0x89E8             LDRH     R0,[R5, #+14]
   \   00000124   0x2808             CMP      R0,#+8
   \   00000126   0xD005             BEQ.N    ??TIM_OC2Init_7
   \   00000128   0xF240 0x3111      MOVW     R1,#+785
   \   0000012C   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000130   0x.... 0x....      BL       assert_failed
    786              assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
   \                     ??TIM_OC2Init_7: (+1)
   \   00000134   0x8A68             LDRH     R0,[R5, #+18]
   \   00000136   0xF5B0 0x7F00      CMP      R0,#+512
   \   0000013A   0xD008             BEQ.N    ??TIM_OC2Init_8
   \   0000013C   0x8A68             LDRH     R0,[R5, #+18]
   \   0000013E   0x2800             CMP      R0,#+0
   \   00000140   0xD005             BEQ.N    ??TIM_OC2Init_8
   \   00000142   0xF240 0x3112      MOVW     R1,#+786
   \   00000146   0x.... 0x....      LDR.W    R0,??DataTable27
   \   0000014A   0x.... 0x....      BL       assert_failed
    787              assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
   \                     ??TIM_OC2Init_8: (+1)
   \   0000014E   0x8A28             LDRH     R0,[R5, #+16]
   \   00000150   0xF5B0 0x7F80      CMP      R0,#+256
   \   00000154   0xD008             BEQ.N    ??TIM_OC2Init_9
   \   00000156   0x8A28             LDRH     R0,[R5, #+16]
   \   00000158   0x2800             CMP      R0,#+0
   \   0000015A   0xD005             BEQ.N    ??TIM_OC2Init_9
   \   0000015C   0xF240 0x3113      MOVW     R1,#+787
   \   00000160   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000164   0x.... 0x....      BL       assert_failed
    788              
    789              /* Reset the Output N Polarity level */
    790              tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
   \                     ??TIM_OC2Init_9: (+1)
   \   00000168   0xF64F 0x707F      MOVW     R0,#+65407
   \   0000016C   0x4007             ANDS     R7,R0,R7
    791              /* Set the Output N Polarity */
    792              tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
   \   0000016E   0x89E8             LDRH     R0,[R5, #+14]
   \   00000170   0xEA57 0x1700      ORRS     R7,R7,R0, LSL #+4
    793              /* Reset the Output N State */
    794              tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
   \   00000174   0xF64F 0x70BF      MOVW     R0,#+65471
   \   00000178   0x4007             ANDS     R7,R0,R7
    795              
    796              /* Set the Output N State */
    797              tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
   \   0000017A   0x88A8             LDRH     R0,[R5, #+4]
   \   0000017C   0xEA57 0x1700      ORRS     R7,R7,R0, LSL #+4
    798              /* Reset the Output Compare and Output Compare N IDLE State */
    799              tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
   \   00000180   0xF64F 0x30FF      MOVW     R0,#+64511
   \   00000184   0xEA10 0x0808      ANDS     R8,R0,R8
    800              tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
   \   00000188   0xF24F 0x70FF      MOVW     R0,#+63487
   \   0000018C   0xEA10 0x0808      ANDS     R8,R0,R8
    801              /* Set the Output Idle state */
    802              tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
   \   00000190   0x8A28             LDRH     R0,[R5, #+16]
   \   00000192   0xEA58 0x0880      ORRS     R8,R8,R0, LSL #+2
    803              /* Set the Output N Idle state */
    804              tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
   \   00000196   0x8A68             LDRH     R0,[R5, #+18]
   \   00000198   0xEA58 0x0880      ORRS     R8,R8,R0, LSL #+2
    805            }
    806            /* Write to TIMx CR2 */
    807            TIMx->CR2 = tmpcr2;
   \                     ??TIM_OC2Init_5: (+1)
   \   0000019C   0xF8A4 0x8004      STRH     R8,[R4, #+4]
    808            
    809            /* Write to TIMx CCMR1 */
    810            TIMx->CCMR1 = tmpccmrx;
   \   000001A0   0x8326             STRH     R6,[R4, #+24]
    811            
    812            /* Set the Capture Compare Register value */
    813            TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
   \   000001A2   0x68A8             LDR      R0,[R5, #+8]
   \   000001A4   0x63A0             STR      R0,[R4, #+56]
    814            
    815            /* Write to TIMx CCER */
    816            TIMx->CCER = tmpccer;
   \   000001A6   0x8427             STRH     R7,[R4, #+32]
    817          }
   \   000001A8   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    818          
    819          /**
    820            * @brief  Initializes the TIMx Channel3 according to the specified parameters
    821            *         in the TIM_OCInitStruct.
    822            * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
    823            * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
    824            *         the configuration information for the specified TIM peripheral.
    825            * @retval None
    826            */

   \                                 In section .text, align 2, keep-with-next
    827          void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
    828          {
   \                     TIM_OC3Init: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    829            uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
   \   00000008   0x2600             MOVS     R6,#+0
   \   0000000A   0x2700             MOVS     R7,#+0
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
    830             
    831            /* Check the parameters */
    832            assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x40010000
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD018             BEQ.N    ??TIM_OC3Init_0
   \   00000018   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   0000001C   0xD015             BEQ.N    ??TIM_OC3Init_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable19_1  ;; 0x40000400
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD011             BEQ.N    ??TIM_OC3Init_0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable19_2  ;; 0x40000800
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD00D             BEQ.N    ??TIM_OC3Init_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable19_3  ;; 0x40000c00
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD009             BEQ.N    ??TIM_OC3Init_0
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable20_2  ;; 0x40010400
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD005             BEQ.N    ??TIM_OC3Init_0
   \   0000003E   0xF44F 0x7150      MOV      R1,#+832
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000046   0x.... 0x....      BL       assert_failed
    833            assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
   \                     ??TIM_OC3Init_0: (+1)
   \   0000004A   0x8828             LDRH     R0,[R5, #+0]
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD014             BEQ.N    ??TIM_OC3Init_1
   \   00000050   0x8828             LDRH     R0,[R5, #+0]
   \   00000052   0x2810             CMP      R0,#+16
   \   00000054   0xD011             BEQ.N    ??TIM_OC3Init_1
   \   00000056   0x8828             LDRH     R0,[R5, #+0]
   \   00000058   0x2820             CMP      R0,#+32
   \   0000005A   0xD00E             BEQ.N    ??TIM_OC3Init_1
   \   0000005C   0x8828             LDRH     R0,[R5, #+0]
   \   0000005E   0x2830             CMP      R0,#+48
   \   00000060   0xD00B             BEQ.N    ??TIM_OC3Init_1
   \   00000062   0x8828             LDRH     R0,[R5, #+0]
   \   00000064   0x2860             CMP      R0,#+96
   \   00000066   0xD008             BEQ.N    ??TIM_OC3Init_1
   \   00000068   0x8828             LDRH     R0,[R5, #+0]
   \   0000006A   0x2870             CMP      R0,#+112
   \   0000006C   0xD005             BEQ.N    ??TIM_OC3Init_1
   \   0000006E   0xF240 0x3141      MOVW     R1,#+833
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000076   0x.... 0x....      BL       assert_failed
    834            assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
   \                     ??TIM_OC3Init_1: (+1)
   \   0000007A   0x8868             LDRH     R0,[R5, #+2]
   \   0000007C   0x2800             CMP      R0,#+0
   \   0000007E   0xD008             BEQ.N    ??TIM_OC3Init_2
   \   00000080   0x8868             LDRH     R0,[R5, #+2]
   \   00000082   0x2801             CMP      R0,#+1
   \   00000084   0xD005             BEQ.N    ??TIM_OC3Init_2
   \   00000086   0xF240 0x3142      MOVW     R1,#+834
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable27
   \   0000008E   0x.... 0x....      BL       assert_failed
    835            assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   \                     ??TIM_OC3Init_2: (+1)
   \   00000092   0x89A8             LDRH     R0,[R5, #+12]
   \   00000094   0x2800             CMP      R0,#+0
   \   00000096   0xD008             BEQ.N    ??TIM_OC3Init_3
   \   00000098   0x89A8             LDRH     R0,[R5, #+12]
   \   0000009A   0x2802             CMP      R0,#+2
   \   0000009C   0xD005             BEQ.N    ??TIM_OC3Init_3
   \   0000009E   0xF240 0x3143      MOVW     R1,#+835
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable27
   \   000000A6   0x.... 0x....      BL       assert_failed
    836          
    837            /* Disable the Channel 3: Reset the CC2E Bit */
    838            TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
   \                     ??TIM_OC3Init_3: (+1)
   \   000000AA   0x8C20             LDRH     R0,[R4, #+32]
   \   000000AC   0xF64F 0x61FF      MOVW     R1,#+65279
   \   000000B0   0x4008             ANDS     R0,R1,R0
   \   000000B2   0x8420             STRH     R0,[R4, #+32]
    839            
    840            /* Get the TIMx CCER register value */
    841            tmpccer = TIMx->CCER;
   \   000000B4   0x8C20             LDRH     R0,[R4, #+32]
   \   000000B6   0x0007             MOVS     R7,R0
    842            /* Get the TIMx CR2 register value */
    843            tmpcr2 =  TIMx->CR2;
   \   000000B8   0x88A0             LDRH     R0,[R4, #+4]
   \   000000BA   0x4680             MOV      R8,R0
    844            
    845            /* Get the TIMx CCMR2 register value */
    846            tmpccmrx = TIMx->CCMR2;
   \   000000BC   0x8BA0             LDRH     R0,[R4, #+28]
   \   000000BE   0x0006             MOVS     R6,R0
    847              
    848            /* Reset the Output Compare mode and Capture/Compare selection Bits */
    849            tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
   \   000000C0   0xF64F 0x708F      MOVW     R0,#+65423
   \   000000C4   0x4006             ANDS     R6,R0,R6
    850            tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
   \   000000C6   0xF64F 0x70FC      MOVW     R0,#+65532
   \   000000CA   0x4006             ANDS     R6,R0,R6
    851            /* Select the Output Compare Mode */
    852            tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
   \   000000CC   0x8828             LDRH     R0,[R5, #+0]
   \   000000CE   0x4306             ORRS     R6,R0,R6
    853            
    854            /* Reset the Output Polarity level */
    855            tmpccer &= (uint16_t)~TIM_CCER_CC3P;
   \   000000D0   0xF64F 0x50FF      MOVW     R0,#+65023
   \   000000D4   0x4007             ANDS     R7,R0,R7
    856            /* Set the Output Compare Polarity */
    857            tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
   \   000000D6   0x89A8             LDRH     R0,[R5, #+12]
   \   000000D8   0xEA57 0x2700      ORRS     R7,R7,R0, LSL #+8
    858            
    859            /* Set the Output State */
    860            tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
   \   000000DC   0x8868             LDRH     R0,[R5, #+2]
   \   000000DE   0xEA57 0x2700      ORRS     R7,R7,R0, LSL #+8
    861              
    862            if((TIMx == TIM1) || (TIMx == TIM8))
   \   000000E2   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x40010000
   \   000000E6   0x4284             CMP      R4,R0
   \   000000E8   0xD003             BEQ.N    ??TIM_OC3Init_4
   \   000000EA   0x.... 0x....      LDR.W    R0,??DataTable20_2  ;; 0x40010400
   \   000000EE   0x4284             CMP      R4,R0
   \   000000F0   0xD14B             BNE.N    ??TIM_OC3Init_5
    863            {
    864              assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
   \                     ??TIM_OC3Init_4: (+1)
   \   000000F2   0x88A8             LDRH     R0,[R5, #+4]
   \   000000F4   0x2800             CMP      R0,#+0
   \   000000F6   0xD008             BEQ.N    ??TIM_OC3Init_6
   \   000000F8   0x88A8             LDRH     R0,[R5, #+4]
   \   000000FA   0x2804             CMP      R0,#+4
   \   000000FC   0xD005             BEQ.N    ??TIM_OC3Init_6
   \   000000FE   0xF44F 0x7158      MOV      R1,#+864
   \   00000102   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000106   0x.... 0x....      BL       assert_failed
    865              assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
   \                     ??TIM_OC3Init_6: (+1)
   \   0000010A   0x89E8             LDRH     R0,[R5, #+14]
   \   0000010C   0x2800             CMP      R0,#+0
   \   0000010E   0xD008             BEQ.N    ??TIM_OC3Init_7
   \   00000110   0x89E8             LDRH     R0,[R5, #+14]
   \   00000112   0x2808             CMP      R0,#+8
   \   00000114   0xD005             BEQ.N    ??TIM_OC3Init_7
   \   00000116   0xF240 0x3161      MOVW     R1,#+865
   \   0000011A   0x.... 0x....      LDR.W    R0,??DataTable27
   \   0000011E   0x.... 0x....      BL       assert_failed
    866              assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
   \                     ??TIM_OC3Init_7: (+1)
   \   00000122   0x8A68             LDRH     R0,[R5, #+18]
   \   00000124   0xF5B0 0x7F00      CMP      R0,#+512
   \   00000128   0xD008             BEQ.N    ??TIM_OC3Init_8
   \   0000012A   0x8A68             LDRH     R0,[R5, #+18]
   \   0000012C   0x2800             CMP      R0,#+0
   \   0000012E   0xD005             BEQ.N    ??TIM_OC3Init_8
   \   00000130   0xF240 0x3162      MOVW     R1,#+866
   \   00000134   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000138   0x.... 0x....      BL       assert_failed
    867              assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
   \                     ??TIM_OC3Init_8: (+1)
   \   0000013C   0x8A28             LDRH     R0,[R5, #+16]
   \   0000013E   0xF5B0 0x7F80      CMP      R0,#+256
   \   00000142   0xD008             BEQ.N    ??TIM_OC3Init_9
   \   00000144   0x8A28             LDRH     R0,[R5, #+16]
   \   00000146   0x2800             CMP      R0,#+0
   \   00000148   0xD005             BEQ.N    ??TIM_OC3Init_9
   \   0000014A   0xF240 0x3163      MOVW     R1,#+867
   \   0000014E   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000152   0x.... 0x....      BL       assert_failed
    868              
    869              /* Reset the Output N Polarity level */
    870              tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
   \                     ??TIM_OC3Init_9: (+1)
   \   00000156   0xF24F 0x70FF      MOVW     R0,#+63487
   \   0000015A   0x4007             ANDS     R7,R0,R7
    871              /* Set the Output N Polarity */
    872              tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
   \   0000015C   0x89E8             LDRH     R0,[R5, #+14]
   \   0000015E   0xEA57 0x2700      ORRS     R7,R7,R0, LSL #+8
    873              /* Reset the Output N State */
    874              tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
   \   00000162   0xF64F 0x30FF      MOVW     R0,#+64511
   \   00000166   0x4007             ANDS     R7,R0,R7
    875              
    876              /* Set the Output N State */
    877              tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
   \   00000168   0x88A8             LDRH     R0,[R5, #+4]
   \   0000016A   0xEA57 0x2700      ORRS     R7,R7,R0, LSL #+8
    878              /* Reset the Output Compare and Output Compare N IDLE State */
    879              tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
   \   0000016E   0xF64E 0x70FF      MOVW     R0,#+61439
   \   00000172   0xEA10 0x0808      ANDS     R8,R0,R8
    880              tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
   \   00000176   0xF64D 0x70FF      MOVW     R0,#+57343
   \   0000017A   0xEA10 0x0808      ANDS     R8,R0,R8
    881              /* Set the Output Idle state */
    882              tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
   \   0000017E   0x8A28             LDRH     R0,[R5, #+16]
   \   00000180   0xEA58 0x1800      ORRS     R8,R8,R0, LSL #+4
    883              /* Set the Output N Idle state */
    884              tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
   \   00000184   0x8A68             LDRH     R0,[R5, #+18]
   \   00000186   0xEA58 0x1800      ORRS     R8,R8,R0, LSL #+4
    885            }
    886            /* Write to TIMx CR2 */
    887            TIMx->CR2 = tmpcr2;
   \                     ??TIM_OC3Init_5: (+1)
   \   0000018A   0xF8A4 0x8004      STRH     R8,[R4, #+4]
    888            
    889            /* Write to TIMx CCMR2 */
    890            TIMx->CCMR2 = tmpccmrx;
   \   0000018E   0x83A6             STRH     R6,[R4, #+28]
    891            
    892            /* Set the Capture Compare Register value */
    893            TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
   \   00000190   0x68A8             LDR      R0,[R5, #+8]
   \   00000192   0x63E0             STR      R0,[R4, #+60]
    894            
    895            /* Write to TIMx CCER */
    896            TIMx->CCER = tmpccer;
   \   00000194   0x8427             STRH     R7,[R4, #+32]
    897          }
   \   00000196   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    898          
    899          /**
    900            * @brief  Initializes the TIMx Channel4 according to the specified parameters
    901            *         in the TIM_OCInitStruct.
    902            * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
    903            * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
    904            *         the configuration information for the specified TIM peripheral.
    905            * @retval None
    906            */

   \                                 In section .text, align 2, keep-with-next
    907          void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
    908          {
   \                     TIM_OC4Init: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    909            uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
   \   00000008   0x2600             MOVS     R6,#+0
   \   0000000A   0x2700             MOVS     R7,#+0
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
    910             
    911            /* Check the parameters */
    912            assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
   \   00000010   0x....             LDR.N    R0,??DataTable19  ;; 0x40010000
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD014             BEQ.N    ??TIM_OC4Init_0
   \   00000016   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   0000001A   0xD011             BEQ.N    ??TIM_OC4Init_0
   \   0000001C   0x....             LDR.N    R0,??DataTable19_1  ;; 0x40000400
   \   0000001E   0x4284             CMP      R4,R0
   \   00000020   0xD00E             BEQ.N    ??TIM_OC4Init_0
   \   00000022   0x....             LDR.N    R0,??DataTable19_2  ;; 0x40000800
   \   00000024   0x4284             CMP      R4,R0
   \   00000026   0xD00B             BEQ.N    ??TIM_OC4Init_0
   \   00000028   0x....             LDR.N    R0,??DataTable19_3  ;; 0x40000c00
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD008             BEQ.N    ??TIM_OC4Init_0
   \   0000002E   0x....             LDR.N    R0,??DataTable20_2  ;; 0x40010400
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD005             BEQ.N    ??TIM_OC4Init_0
   \   00000034   0xF44F 0x7164      MOV      R1,#+912
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable27
   \   0000003C   0x.... 0x....      BL       assert_failed
    913            assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
   \                     ??TIM_OC4Init_0: (+1)
   \   00000040   0x8828             LDRH     R0,[R5, #+0]
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD014             BEQ.N    ??TIM_OC4Init_1
   \   00000046   0x8828             LDRH     R0,[R5, #+0]
   \   00000048   0x2810             CMP      R0,#+16
   \   0000004A   0xD011             BEQ.N    ??TIM_OC4Init_1
   \   0000004C   0x8828             LDRH     R0,[R5, #+0]
   \   0000004E   0x2820             CMP      R0,#+32
   \   00000050   0xD00E             BEQ.N    ??TIM_OC4Init_1
   \   00000052   0x8828             LDRH     R0,[R5, #+0]
   \   00000054   0x2830             CMP      R0,#+48
   \   00000056   0xD00B             BEQ.N    ??TIM_OC4Init_1
   \   00000058   0x8828             LDRH     R0,[R5, #+0]
   \   0000005A   0x2860             CMP      R0,#+96
   \   0000005C   0xD008             BEQ.N    ??TIM_OC4Init_1
   \   0000005E   0x8828             LDRH     R0,[R5, #+0]
   \   00000060   0x2870             CMP      R0,#+112
   \   00000062   0xD005             BEQ.N    ??TIM_OC4Init_1
   \   00000064   0xF240 0x3191      MOVW     R1,#+913
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable27
   \   0000006C   0x.... 0x....      BL       assert_failed
    914            assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
   \                     ??TIM_OC4Init_1: (+1)
   \   00000070   0x8868             LDRH     R0,[R5, #+2]
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xD008             BEQ.N    ??TIM_OC4Init_2
   \   00000076   0x8868             LDRH     R0,[R5, #+2]
   \   00000078   0x2801             CMP      R0,#+1
   \   0000007A   0xD005             BEQ.N    ??TIM_OC4Init_2
   \   0000007C   0xF240 0x3192      MOVW     R1,#+914
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000084   0x.... 0x....      BL       assert_failed
    915            assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   \                     ??TIM_OC4Init_2: (+1)
   \   00000088   0x89A8             LDRH     R0,[R5, #+12]
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD008             BEQ.N    ??TIM_OC4Init_3
   \   0000008E   0x89A8             LDRH     R0,[R5, #+12]
   \   00000090   0x2802             CMP      R0,#+2
   \   00000092   0xD005             BEQ.N    ??TIM_OC4Init_3
   \   00000094   0xF240 0x3193      MOVW     R1,#+915
   \   00000098   0x.... 0x....      LDR.W    R0,??DataTable27
   \   0000009C   0x.... 0x....      BL       assert_failed
    916          
    917            /* Disable the Channel 4: Reset the CC4E Bit */
    918            TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
   \                     ??TIM_OC4Init_3: (+1)
   \   000000A0   0x8C20             LDRH     R0,[R4, #+32]
   \   000000A2   0xF64E 0x71FF      MOVW     R1,#+61439
   \   000000A6   0x4008             ANDS     R0,R1,R0
   \   000000A8   0x8420             STRH     R0,[R4, #+32]
    919            
    920            /* Get the TIMx CCER register value */
    921            tmpccer = TIMx->CCER;
   \   000000AA   0x8C20             LDRH     R0,[R4, #+32]
   \   000000AC   0x0007             MOVS     R7,R0
    922            /* Get the TIMx CR2 register value */
    923            tmpcr2 =  TIMx->CR2;
   \   000000AE   0x88A0             LDRH     R0,[R4, #+4]
   \   000000B0   0x4680             MOV      R8,R0
    924            
    925            /* Get the TIMx CCMR2 register value */
    926            tmpccmrx = TIMx->CCMR2;
   \   000000B2   0x8BA0             LDRH     R0,[R4, #+28]
   \   000000B4   0x0006             MOVS     R6,R0
    927              
    928            /* Reset the Output Compare mode and Capture/Compare selection Bits */
    929            tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
   \   000000B6   0xF648 0x70FF      MOVW     R0,#+36863
   \   000000BA   0x4006             ANDS     R6,R0,R6
    930            tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
   \   000000BC   0xF64F 0x40FF      MOVW     R0,#+64767
   \   000000C0   0x4006             ANDS     R6,R0,R6
    931            
    932            /* Select the Output Compare Mode */
    933            tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
   \   000000C2   0x8828             LDRH     R0,[R5, #+0]
   \   000000C4   0xEA56 0x2600      ORRS     R6,R6,R0, LSL #+8
    934            
    935            /* Reset the Output Polarity level */
    936            tmpccer &= (uint16_t)~TIM_CCER_CC4P;
   \   000000C8   0xF64D 0x70FF      MOVW     R0,#+57343
   \   000000CC   0x4007             ANDS     R7,R0,R7
    937            /* Set the Output Compare Polarity */
    938            tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
   \   000000CE   0x89A8             LDRH     R0,[R5, #+12]
   \   000000D0   0xEA57 0x3700      ORRS     R7,R7,R0, LSL #+12
    939            
    940            /* Set the Output State */
    941            tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
   \   000000D4   0x8868             LDRH     R0,[R5, #+2]
   \   000000D6   0xEA57 0x3700      ORRS     R7,R7,R0, LSL #+12
    942            
    943            if((TIMx == TIM1) || (TIMx == TIM8))
   \   000000DA   0x....             LDR.N    R0,??DataTable19  ;; 0x40010000
   \   000000DC   0x4284             CMP      R4,R0
   \   000000DE   0xD002             BEQ.N    ??TIM_OC4Init_4
   \   000000E0   0x....             LDR.N    R0,??DataTable20_2  ;; 0x40010400
   \   000000E2   0x4284             CMP      R4,R0
   \   000000E4   0xD113             BNE.N    ??TIM_OC4Init_5
    944            {
    945              assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
   \                     ??TIM_OC4Init_4: (+1)
   \   000000E6   0x8A28             LDRH     R0,[R5, #+16]
   \   000000E8   0xF5B0 0x7F80      CMP      R0,#+256
   \   000000EC   0xD008             BEQ.N    ??TIM_OC4Init_6
   \   000000EE   0x8A28             LDRH     R0,[R5, #+16]
   \   000000F0   0x2800             CMP      R0,#+0
   \   000000F2   0xD005             BEQ.N    ??TIM_OC4Init_6
   \   000000F4   0xF240 0x31B1      MOVW     R1,#+945
   \   000000F8   0x.... 0x....      LDR.W    R0,??DataTable27
   \   000000FC   0x.... 0x....      BL       assert_failed
    946              /* Reset the Output Compare IDLE State */
    947              tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
   \                     ??TIM_OC4Init_6: (+1)
   \   00000100   0xF64B 0x70FF      MOVW     R0,#+49151
   \   00000104   0xEA10 0x0808      ANDS     R8,R0,R8
    948              /* Set the Output Idle state */
    949              tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
   \   00000108   0x8A28             LDRH     R0,[R5, #+16]
   \   0000010A   0xEA58 0x1880      ORRS     R8,R8,R0, LSL #+6
    950            }
    951            /* Write to TIMx CR2 */
    952            TIMx->CR2 = tmpcr2;
   \                     ??TIM_OC4Init_5: (+1)
   \   0000010E   0xF8A4 0x8004      STRH     R8,[R4, #+4]
    953            
    954            /* Write to TIMx CCMR2 */  
    955            TIMx->CCMR2 = tmpccmrx;
   \   00000112   0x83A6             STRH     R6,[R4, #+28]
    956              
    957            /* Set the Capture Compare Register value */
    958            TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
   \   00000114   0x68A8             LDR      R0,[R5, #+8]
   \   00000116   0x6420             STR      R0,[R4, #+64]
    959            
    960            /* Write to TIMx CCER */
    961            TIMx->CCER = tmpccer;
   \   00000118   0x8427             STRH     R7,[R4, #+32]
    962          }
   \   0000011A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    963          
    964          /**
    965            * @brief  Fills each TIM_OCInitStruct member with its default value.
    966            * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
    967            *         be initialized.
    968            * @retval None
    969            */

   \                                 In section .text, align 2, keep-with-next
    970          void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
    971          {
    972            /* Set the default configuration */
    973            TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
   \                     TIM_OCStructInit: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x8001             STRH     R1,[R0, #+0]
    974            TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x8041             STRH     R1,[R0, #+2]
    975            TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x8081             STRH     R1,[R0, #+4]
    976            TIM_OCInitStruct->TIM_Pulse = 0x00000000;
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x6081             STR      R1,[R0, #+8]
    977            TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x8181             STRH     R1,[R0, #+12]
    978            TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x81C1             STRH     R1,[R0, #+14]
    979            TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x8201             STRH     R1,[R0, #+16]
    980            TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x8241             STRH     R1,[R0, #+18]
    981          }
   \   00000020   0x4770             BX       LR               ;; return
    982          
    983          /**
    984            * @brief  Selects the TIM Output Compare Mode.
    985            * @note   This function disables the selected channel before changing the Output
    986            *         Compare Mode. If needed, user has to enable this channel using
    987            *         TIM_CCxCmd() and TIM_CCxNCmd() functions.
    988            * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
    989            * @param  TIM_Channel: specifies the TIM Channel
    990            *          This parameter can be one of the following values:
    991            *            @arg TIM_Channel_1: TIM Channel 1
    992            *            @arg TIM_Channel_2: TIM Channel 2
    993            *            @arg TIM_Channel_3: TIM Channel 3
    994            *            @arg TIM_Channel_4: TIM Channel 4
    995            * @param  TIM_OCMode: specifies the TIM Output Compare Mode.
    996            *           This parameter can be one of the following values:
    997            *            @arg TIM_OCMode_Timing
    998            *            @arg TIM_OCMode_Active
    999            *            @arg TIM_OCMode_Toggle
   1000            *            @arg TIM_OCMode_PWM1
   1001            *            @arg TIM_OCMode_PWM2
   1002            *            @arg TIM_ForcedAction_Active
   1003            *            @arg TIM_ForcedAction_InActive
   1004            * @retval None
   1005            */

   \                                 In section .text, align 2, keep-with-next
   1006          void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
   1007          {
   \                     TIM_SelectOCxM: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   1008            uint32_t tmp = 0;
   \   0000000A   0x2700             MOVS     R7,#+0
   1009            uint16_t tmp1 = 0;
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
   1010          
   1011            /* Check the parameters */
   1012            assert_param(IS_TIM_LIST1_PERIPH(TIMx));
   \   00000010   0x....             LDR.N    R0,??DataTable19  ;; 0x40010000
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD026             BEQ.N    ??TIM_SelectOCxM_0
   \   00000016   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   0000001A   0xD023             BEQ.N    ??TIM_SelectOCxM_0
   \   0000001C   0x....             LDR.N    R0,??DataTable19_1  ;; 0x40000400
   \   0000001E   0x4284             CMP      R4,R0
   \   00000020   0xD020             BEQ.N    ??TIM_SelectOCxM_0
   \   00000022   0x....             LDR.N    R0,??DataTable19_2  ;; 0x40000800
   \   00000024   0x4284             CMP      R4,R0
   \   00000026   0xD01D             BEQ.N    ??TIM_SelectOCxM_0
   \   00000028   0x....             LDR.N    R0,??DataTable19_3  ;; 0x40000c00
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD01A             BEQ.N    ??TIM_SelectOCxM_0
   \   0000002E   0x....             LDR.N    R0,??DataTable20_2  ;; 0x40010400
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD017             BEQ.N    ??TIM_SelectOCxM_0
   \   00000034   0x....             LDR.N    R0,??DataTable20_3  ;; 0x40014000
   \   00000036   0x4284             CMP      R4,R0
   \   00000038   0xD014             BEQ.N    ??TIM_SelectOCxM_0
   \   0000003A   0x....             LDR.N    R0,??DataTable20_4  ;; 0x40014400
   \   0000003C   0x4284             CMP      R4,R0
   \   0000003E   0xD011             BEQ.N    ??TIM_SelectOCxM_0
   \   00000040   0x....             LDR.N    R0,??DataTable20_5  ;; 0x40014800
   \   00000042   0x4284             CMP      R4,R0
   \   00000044   0xD00E             BEQ.N    ??TIM_SelectOCxM_0
   \   00000046   0x....             LDR.N    R0,??DataTable20_6  ;; 0x40001800
   \   00000048   0x4284             CMP      R4,R0
   \   0000004A   0xD00B             BEQ.N    ??TIM_SelectOCxM_0
   \   0000004C   0x....             LDR.N    R0,??DataTable20_7  ;; 0x40001c00
   \   0000004E   0x4284             CMP      R4,R0
   \   00000050   0xD008             BEQ.N    ??TIM_SelectOCxM_0
   \   00000052   0x....             LDR.N    R0,??DataTable23  ;; 0x40002000
   \   00000054   0x4284             CMP      R4,R0
   \   00000056   0xD005             BEQ.N    ??TIM_SelectOCxM_0
   \   00000058   0xF44F 0x717D      MOV      R1,#+1012
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000060   0x.... 0x....      BL       assert_failed
   1013            assert_param(IS_TIM_CHANNEL(TIM_Channel));
   \                     ??TIM_SelectOCxM_0: (+1)
   \   00000064   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000066   0x2D00             CMP      R5,#+0
   \   00000068   0xD00E             BEQ.N    ??TIM_SelectOCxM_1
   \   0000006A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000006C   0x2D04             CMP      R5,#+4
   \   0000006E   0xD00B             BEQ.N    ??TIM_SelectOCxM_1
   \   00000070   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000072   0x2D08             CMP      R5,#+8
   \   00000074   0xD008             BEQ.N    ??TIM_SelectOCxM_1
   \   00000076   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000078   0x2D0C             CMP      R5,#+12
   \   0000007A   0xD005             BEQ.N    ??TIM_SelectOCxM_1
   \   0000007C   0xF240 0x31F5      MOVW     R1,#+1013
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000084   0x.... 0x....      BL       assert_failed
   1014            assert_param(IS_TIM_OCM(TIM_OCMode));
   \                     ??TIM_SelectOCxM_1: (+1)
   \   00000088   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000008A   0x2E00             CMP      R6,#+0
   \   0000008C   0xD01A             BEQ.N    ??TIM_SelectOCxM_2
   \   0000008E   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000090   0x2E10             CMP      R6,#+16
   \   00000092   0xD017             BEQ.N    ??TIM_SelectOCxM_2
   \   00000094   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000096   0x2E20             CMP      R6,#+32
   \   00000098   0xD014             BEQ.N    ??TIM_SelectOCxM_2
   \   0000009A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000009C   0x2E30             CMP      R6,#+48
   \   0000009E   0xD011             BEQ.N    ??TIM_SelectOCxM_2
   \   000000A0   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000A2   0x2E60             CMP      R6,#+96
   \   000000A4   0xD00E             BEQ.N    ??TIM_SelectOCxM_2
   \   000000A6   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000A8   0x2E70             CMP      R6,#+112
   \   000000AA   0xD00B             BEQ.N    ??TIM_SelectOCxM_2
   \   000000AC   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000AE   0x2E50             CMP      R6,#+80
   \   000000B0   0xD008             BEQ.N    ??TIM_SelectOCxM_2
   \   000000B2   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000B4   0x2E40             CMP      R6,#+64
   \   000000B6   0xD005             BEQ.N    ??TIM_SelectOCxM_2
   \   000000B8   0xF240 0x31F6      MOVW     R1,#+1014
   \   000000BC   0x.... 0x....      LDR.W    R0,??DataTable27
   \   000000C0   0x.... 0x....      BL       assert_failed
   1015          
   1016            tmp = (uint32_t) TIMx;
   \                     ??TIM_SelectOCxM_2: (+1)
   \   000000C4   0x0027             MOVS     R7,R4
   1017            tmp += CCMR_OFFSET;
   \   000000C6   0x3718             ADDS     R7,R7,#+24
   1018          
   1019            tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
   \   000000C8   0x2001             MOVS     R0,#+1
   \   000000CA   0x40A8             LSLS     R0,R0,R5
   \   000000CC   0x4680             MOV      R8,R0
   1020          
   1021            /* Disable the Channel: Reset the CCxE Bit */
   1022            TIMx->CCER &= (uint16_t) ~tmp1;
   \   000000CE   0x8C20             LDRH     R0,[R4, #+32]
   \   000000D0   0xEA30 0x0008      BICS     R0,R0,R8
   \   000000D4   0x8420             STRH     R0,[R4, #+32]
   1023          
   1024            if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
   \   000000D6   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000D8   0x2D00             CMP      R5,#+0
   \   000000DA   0xD002             BEQ.N    ??TIM_SelectOCxM_3
   \   000000DC   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000DE   0x2D08             CMP      R5,#+8
   \   000000E0   0xD10E             BNE.N    ??TIM_SelectOCxM_4
   1025            {
   1026              tmp += (TIM_Channel>>1);
   \                     ??TIM_SelectOCxM_3: (+1)
   \   000000E2   0x0028             MOVS     R0,R5
   \   000000E4   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000E6   0x0840             LSRS     R0,R0,#+1
   \   000000E8   0xFA17 0xF780      UXTAH    R7,R7,R0
   1027          
   1028              /* Reset the OCxM bits in the CCMRx register */
   1029              *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
   \   000000EC   0x6838             LDR      R0,[R7, #+0]
   \   000000EE   0xF64F 0x718F      MOVW     R1,#+65423
   \   000000F2   0x4008             ANDS     R0,R1,R0
   \   000000F4   0x6038             STR      R0,[R7, #+0]
   1030             
   1031              /* Configure the OCxM bits in the CCMRx register */
   1032              *(__IO uint32_t *) tmp |= TIM_OCMode;
   \   000000F6   0x6838             LDR      R0,[R7, #+0]
   \   000000F8   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000FA   0x4330             ORRS     R0,R6,R0
   \   000000FC   0x6038             STR      R0,[R7, #+0]
   \   000000FE   0xE00E             B.N      ??TIM_SelectOCxM_5
   1033            }
   1034            else
   1035            {
   1036              tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
   \                     ??TIM_SelectOCxM_4: (+1)
   \   00000100   0x1F28             SUBS     R0,R5,#+4
   \   00000102   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000104   0x0840             LSRS     R0,R0,#+1
   \   00000106   0xFA17 0xF780      UXTAH    R7,R7,R0
   1037          
   1038              /* Reset the OCxM bits in the CCMRx register */
   1039              *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
   \   0000010A   0x6838             LDR      R0,[R7, #+0]
   \   0000010C   0xF648 0x71FF      MOVW     R1,#+36863
   \   00000110   0x4008             ANDS     R0,R1,R0
   \   00000112   0x6038             STR      R0,[R7, #+0]
   1040              
   1041              /* Configure the OCxM bits in the CCMRx register */
   1042              *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
   \   00000114   0x6838             LDR      R0,[R7, #+0]
   \   00000116   0x0231             LSLS     R1,R6,#+8
   \   00000118   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000011A   0x4308             ORRS     R0,R1,R0
   \   0000011C   0x6038             STR      R0,[R7, #+0]
   1043            }
   1044          }
   \                     ??TIM_SelectOCxM_5: (+1)
   \   0000011E   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   1045          
   1046          /**
   1047            * @brief  Sets the TIMx Capture Compare1 Register value
   1048            * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
   1049            * @param  Compare1: specifies the Capture Compare1 register new value.
   1050            * @retval None
   1051            */

   \                                 In section .text, align 2, keep-with-next
   1052          void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
   1053          {
   \                     TIM_SetCompare1: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1054            /* Check the parameters */
   1055            assert_param(IS_TIM_LIST1_PERIPH(TIMx));
   \   00000006   0x....             LDR.N    R0,??DataTable19  ;; 0x40010000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD026             BEQ.N    ??TIM_SetCompare1_0
   \   0000000C   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000010   0xD023             BEQ.N    ??TIM_SetCompare1_0
   \   00000012   0x....             LDR.N    R0,??DataTable19_1  ;; 0x40000400
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD020             BEQ.N    ??TIM_SetCompare1_0
   \   00000018   0x....             LDR.N    R0,??DataTable19_2  ;; 0x40000800
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD01D             BEQ.N    ??TIM_SetCompare1_0
   \   0000001E   0x....             LDR.N    R0,??DataTable19_3  ;; 0x40000c00
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD01A             BEQ.N    ??TIM_SetCompare1_0
   \   00000024   0x....             LDR.N    R0,??DataTable20_2  ;; 0x40010400
   \   00000026   0x4284             CMP      R4,R0
   \   00000028   0xD017             BEQ.N    ??TIM_SetCompare1_0
   \   0000002A   0x....             LDR.N    R0,??DataTable20_3  ;; 0x40014000
   \   0000002C   0x4284             CMP      R4,R0
   \   0000002E   0xD014             BEQ.N    ??TIM_SetCompare1_0
   \   00000030   0x....             LDR.N    R0,??DataTable20_4  ;; 0x40014400
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD011             BEQ.N    ??TIM_SetCompare1_0
   \   00000036   0x....             LDR.N    R0,??DataTable20_5  ;; 0x40014800
   \   00000038   0x4284             CMP      R4,R0
   \   0000003A   0xD00E             BEQ.N    ??TIM_SetCompare1_0
   \   0000003C   0x....             LDR.N    R0,??DataTable20_6  ;; 0x40001800
   \   0000003E   0x4284             CMP      R4,R0
   \   00000040   0xD00B             BEQ.N    ??TIM_SetCompare1_0
   \   00000042   0x....             LDR.N    R0,??DataTable20_7  ;; 0x40001c00
   \   00000044   0x4284             CMP      R4,R0
   \   00000046   0xD008             BEQ.N    ??TIM_SetCompare1_0
   \   00000048   0x....             LDR.N    R0,??DataTable23  ;; 0x40002000
   \   0000004A   0x4284             CMP      R4,R0
   \   0000004C   0xD005             BEQ.N    ??TIM_SetCompare1_0
   \   0000004E   0xF240 0x411F      MOVW     R1,#+1055
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable27
   \   00000056   0x.... 0x....      BL       assert_failed
   1056          
   1057            /* Set the Capture Compare1 Register value */
   1058            TIMx->CCR1 = Compare1;
   \                     ??TIM_SetCompare1_0: (+1)
   \   0000005A   0x6365             STR      R5,[R4, #+52]
   1059          }
   \   0000005C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   1060          
   1061          /**
   1062            * @brief  Sets the TIMx Capture Compare2 Register value
   1063            * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
   1064            *         peripheral.
   1065            * @param  Compare2: specifies the Capture Compare2 register new value.
   1066            * @retval None
   1067            */

   \                                 In section .text, align 2, keep-with-next
   1068          void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
   1069          {
   \                     TIM_SetCompare2: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1070            /* Check the parameters */
   1071            assert_param(IS_TIM_LIST2_PERIPH(TIMx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable37  ;; 0x40010000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD01C             BEQ.N    ??TIM_SetCompare2_0
   \   0000000E   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000012   0xD019             BEQ.N    ??TIM_SetCompare2_0
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable38  ;; 0x40000400
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD015             BEQ.N    ??TIM_SetCompare2_0
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable38_1  ;; 0x40000800
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD011             BEQ.N    ??TIM_SetCompare2_0
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable38_2  ;; 0x40000c00
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD00D             BEQ.N    ??TIM_SetCompare2_0
   \   0000002C   0x....             LDR.N    R0,??DataTable20_2  ;; 0x40010400
   \   0000002E   0x4284             CMP      R4,R0
   \   00000030   0xD00A             BEQ.N    ??TIM_SetCompare2_0
   \   00000032   0x....             LDR.N    R0,??DataTable20_3  ;; 0x40014000
   \   00000034   0x4284             CMP      R4,R0
   \   00000036   0xD007             BEQ.N    ??TIM_SetCompare2_0
   \   00000038   0x....             LDR.N    R0,??DataTable20_6  ;; 0x40001800
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD004             BEQ.N    ??TIM_SetCompare2_0
   \   0000003E   0xF240 0x412F      MOVW     R1,#+1071
   \   00000042   0x....             LDR.N    R0,??DataTable27
   \   00000044   0x.... 0x....      BL       assert_failed
   1072          
   1073            /* Set the Capture Compare2 Register value */
   1074            TIMx->CCR2 = Compare2;
   \                     ??TIM_SetCompare2_0: (+1)
   \   00000048   0x63A5             STR      R5,[R4, #+56]
   1075          }
   \   0000004A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   1076          
   1077          /**
   1078            * @brief  Sets the TIMx Capture Compare3 Register value
   1079            * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
   1080            * @param  Compare3: specifies the Capture Compare3 register new value.
   1081            * @retval None
   1082            */

   \                                 In section .text, align 2, keep-with-next
   1083          void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
   1084          {
   \                     TIM_SetCompare3: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1085            /* Check the parameters */
   1086            assert_param(IS_TIM_LIST3_PERIPH(TIMx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable37  ;; 0x40010000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD017             BEQ.N    ??TIM_SetCompare3_0
   \   0000000E   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000012   0xD014             BEQ.N    ??TIM_SetCompare3_0
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable38  ;; 0x40000400
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD010             BEQ.N    ??TIM_SetCompare3_0
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable38_1  ;; 0x40000800
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD00C             BEQ.N    ??TIM_SetCompare3_0
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable38_2  ;; 0x40000c00
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD008             BEQ.N    ??TIM_SetCompare3_0
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable38_3  ;; 0x40010400
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD004             BEQ.N    ??TIM_SetCompare3_0
   \   00000034   0xF240 0x413E      MOVW     R1,#+1086
   \   00000038   0x....             LDR.N    R0,??DataTable27
   \   0000003A   0x.... 0x....      BL       assert_failed
   1087          
   1088            /* Set the Capture Compare3 Register value */
   1089            TIMx->CCR3 = Compare3;
   \                     ??TIM_SetCompare3_0: (+1)
   \   0000003E   0x63E5             STR      R5,[R4, #+60]
   1090          }
   \   00000040   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   1091          
   1092          /**
   1093            * @brief  Sets the TIMx Capture Compare4 Register value
   1094            * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
   1095            * @param  Compare4: specifies the Capture Compare4 register new value.
   1096            * @retval None
   1097            */

   \                                 In section .text, align 2, keep-with-next
   1098          void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
   1099          {
   \                     TIM_SetCompare4: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1100            /* Check the parameters */
   1101            assert_param(IS_TIM_LIST3_PERIPH(TIMx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable37  ;; 0x40010000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD017             BEQ.N    ??TIM_SetCompare4_0
   \   0000000E   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000012   0xD014             BEQ.N    ??TIM_SetCompare4_0
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable38  ;; 0x40000400
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD010             BEQ.N    ??TIM_SetCompare4_0
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable38_1  ;; 0x40000800
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD00C             BEQ.N    ??TIM_SetCompare4_0
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable38_2  ;; 0x40000c00
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD008             BEQ.N    ??TIM_SetCompare4_0
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable38_3  ;; 0x40010400
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD004             BEQ.N    ??TIM_SetCompare4_0
   \   00000034   0xF240 0x414D      MOVW     R1,#+1101
   \   00000038   0x....             LDR.N    R0,??DataTable27
   \   0000003A   0x.... 0x....      BL       assert_failed
   1102          
   1103            /* Set the Capture Compare4 Register value */
   1104            TIMx->CCR4 = Compare4;
   \                     ??TIM_SetCompare4_0: (+1)
   \   0000003E   0x6425             STR      R5,[R4, #+64]
   1105          }
   \   00000040   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   1106          
   1107          /**
   1108            * @brief  Forces the TIMx output 1 waveform to active or inactive level.
   1109            * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
   1110            * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
   1111            *          This parameter can be one of the following values:
   1112            *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
   1113            *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
   1114            * @retval None
   1115            */

   \                                 In section .text, align 2, keep-with-next
   1116          void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
   1117          {
   \                     TIM_ForcedOC1Config: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1118            uint16_t tmpccmr1 = 0;
   \   00000006   0x2600             MOVS     R6,#+0
   1119          
   1120            /* Check the parameters */
   1121            assert_param(IS_TIM_LIST1_PERIPH(TIMx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable37  ;; 0x40010000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD02E             BEQ.N    ??TIM_ForcedOC1Config_0
   \   00000010   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000014   0xD02B             BEQ.N    ??TIM_ForcedOC1Config_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable38  ;; 0x40000400
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD027             BEQ.N    ??TIM_ForcedOC1Config_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable38_1  ;; 0x40000800
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD023             BEQ.N    ??TIM_ForcedOC1Config_0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable38_2  ;; 0x40000c00
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD01F             BEQ.N    ??TIM_ForcedOC1Config_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable38_3  ;; 0x40010400
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD01B             BEQ.N    ??TIM_ForcedOC1Config_0
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable40  ;; 0x40014000
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD017             BEQ.N    ??TIM_ForcedOC1Config_0
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable40_1  ;; 0x40014400
   \   00000042   0x4284             CMP      R4,R0
   \   00000044   0xD013             BEQ.N    ??TIM_ForcedOC1Config_0
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable40_2  ;; 0x40014800
   \   0000004A   0x4284             CMP      R4,R0
   \   0000004C   0xD00F             BEQ.N    ??TIM_ForcedOC1Config_0
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable40_3  ;; 0x40001800
   \   00000052   0x4284             CMP      R4,R0
   \   00000054   0xD00B             BEQ.N    ??TIM_ForcedOC1Config_0
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable40_4  ;; 0x40001c00
   \   0000005A   0x4284             CMP      R4,R0
   \   0000005C   0xD007             BEQ.N    ??TIM_ForcedOC1Config_0
   \   0000005E   0x....             LDR.N    R0,??DataTable23  ;; 0x40002000
   \   00000060   0x4284             CMP      R4,R0
   \   00000062   0xD004             BEQ.N    ??TIM_ForcedOC1Config_0
   \   00000064   0xF240 0x4161      MOVW     R1,#+1121
   \   00000068   0x....             LDR.N    R0,??DataTable27
   \   0000006A   0x.... 0x....      BL       assert_failed
   1122            assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
   \                     ??TIM_ForcedOC1Config_0: (+1)
   \   0000006E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000070   0x2D50             CMP      R5,#+80
   \   00000072   0xD007             BEQ.N    ??TIM_ForcedOC1Config_1
   \   00000074   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000076   0x2D40             CMP      R5,#+64
   \   00000078   0xD004             BEQ.N    ??TIM_ForcedOC1Config_1
   \   0000007A   0xF240 0x4162      MOVW     R1,#+1122
   \   0000007E   0x....             LDR.N    R0,??DataTable27
   \   00000080   0x.... 0x....      BL       assert_failed
   1123            tmpccmr1 = TIMx->CCMR1;
   \                     ??TIM_ForcedOC1Config_1: (+1)
   \   00000084   0x8B20             LDRH     R0,[R4, #+24]
   \   00000086   0x0006             MOVS     R6,R0
   1124          
   1125            /* Reset the OC1M Bits */
   1126            tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
   \   00000088   0xF64F 0x708F      MOVW     R0,#+65423
   \   0000008C   0x4006             ANDS     R6,R0,R6
   1127          
   1128            /* Configure The Forced output Mode */
   1129            tmpccmr1 |= TIM_ForcedAction;
   \   0000008E   0x432E             ORRS     R6,R5,R6
   1130          
   1131            /* Write to TIMx CCMR1 register */
   1132            TIMx->CCMR1 = tmpccmr1;
   \   00000090   0x8326             STRH     R6,[R4, #+24]
   1133          }
   \   00000092   0xBD70             POP      {R4-R6,PC}       ;; return
   1134          
   1135          /**
   1136            * @brief  Forces the TIMx output 2 waveform to active or inactive level.
   1137            * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
   1138            *         peripheral.
   1139            * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
   1140            *          This parameter can be one of the following values:
   1141            *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
   1142            *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
   1143            * @retval None
   1144            */

   \                                 In section .text, align 2, keep-with-next
   1145          void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
   1146          {
   \                     TIM_ForcedOC2Config: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1147            uint16_t tmpccmr1 = 0;
   \   00000006   0x2600             MOVS     R6,#+0
   1148          
   1149            /* Check the parameters */
   1150            assert_param(IS_TIM_LIST2_PERIPH(TIMx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable37  ;; 0x40010000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD01F             BEQ.N    ??TIM_ForcedOC2Config_0
   \   00000010   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000014   0xD01C             BEQ.N    ??TIM_ForcedOC2Config_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable38  ;; 0x40000400
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD018             BEQ.N    ??TIM_ForcedOC2Config_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable38_1  ;; 0x40000800
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD014             BEQ.N    ??TIM_ForcedOC2Config_0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable38_2  ;; 0x40000c00
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD010             BEQ.N    ??TIM_ForcedOC2Config_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable38_3  ;; 0x40010400
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD00C             BEQ.N    ??TIM_ForcedOC2Config_0
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable40  ;; 0x40014000
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD008             BEQ.N    ??TIM_ForcedOC2Config_0
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable40_3  ;; 0x40001800
   \   00000042   0x4284             CMP      R4,R0
   \   00000044   0xD004             BEQ.N    ??TIM_ForcedOC2Config_0
   \   00000046   0xF240 0x417E      MOVW     R1,#+1150
   \   0000004A   0x....             LDR.N    R0,??DataTable27
   \   0000004C   0x.... 0x....      BL       assert_failed
   1151            assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
   \                     ??TIM_ForcedOC2Config_0: (+1)
   \   00000050   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000052   0x2D50             CMP      R5,#+80
   \   00000054   0xD007             BEQ.N    ??TIM_ForcedOC2Config_1
   \   00000056   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000058   0x2D40             CMP      R5,#+64
   \   0000005A   0xD004             BEQ.N    ??TIM_ForcedOC2Config_1
   \   0000005C   0xF240 0x417F      MOVW     R1,#+1151
   \   00000060   0x....             LDR.N    R0,??DataTable27
   \   00000062   0x.... 0x....      BL       assert_failed
   1152            tmpccmr1 = TIMx->CCMR1;
   \                     ??TIM_ForcedOC2Config_1: (+1)
   \   00000066   0x8B20             LDRH     R0,[R4, #+24]
   \   00000068   0x0006             MOVS     R6,R0
   1153          
   1154            /* Reset the OC2M Bits */
   1155            tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
   \   0000006A   0xF648 0x70FF      MOVW     R0,#+36863
   \   0000006E   0x4006             ANDS     R6,R0,R6
   1156          
   1157            /* Configure The Forced output Mode */
   1158            tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
   \   00000070   0xEA56 0x2605      ORRS     R6,R6,R5, LSL #+8
   1159          
   1160            /* Write to TIMx CCMR1 register */
   1161            TIMx->CCMR1 = tmpccmr1;
   \   00000074   0x8326             STRH     R6,[R4, #+24]
   1162          }
   \   00000076   0xBD70             POP      {R4-R6,PC}       ;; return
   1163          
   1164          /**
   1165            * @brief  Forces the TIMx output 3 waveform to active or inactive level.
   1166            * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
   1167            * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
   1168            *          This parameter can be one of the following values:
   1169            *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
   1170            *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
   1171            * @retval None
   1172            */

   \                                 In section .text, align 2, keep-with-next
   1173          void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
   1174          {
   \                     TIM_ForcedOC3Config: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1175            uint16_t tmpccmr2 = 0;
   \   00000006   0x2600             MOVS     R6,#+0
   1176          
   1177            /* Check the parameters */
   1178            assert_param(IS_TIM_LIST3_PERIPH(TIMx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable37  ;; 0x40010000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD017             BEQ.N    ??TIM_ForcedOC3Config_0
   \   00000010   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000014   0xD014             BEQ.N    ??TIM_ForcedOC3Config_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable38  ;; 0x40000400
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD010             BEQ.N    ??TIM_ForcedOC3Config_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable38_1  ;; 0x40000800
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD00C             BEQ.N    ??TIM_ForcedOC3Config_0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable38_2  ;; 0x40000c00
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD008             BEQ.N    ??TIM_ForcedOC3Config_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable38_3  ;; 0x40010400
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD004             BEQ.N    ??TIM_ForcedOC3Config_0
   \   00000036   0xF240 0x419A      MOVW     R1,#+1178
   \   0000003A   0x....             LDR.N    R0,??DataTable27
   \   0000003C   0x.... 0x....      BL       assert_failed
   1179            assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
   \                     ??TIM_ForcedOC3Config_0: (+1)
   \   00000040   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000042   0x2D50             CMP      R5,#+80
   \   00000044   0xD007             BEQ.N    ??TIM_ForcedOC3Config_1
   \   00000046   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000048   0x2D40             CMP      R5,#+64
   \   0000004A   0xD004             BEQ.N    ??TIM_ForcedOC3Config_1
   \   0000004C   0xF240 0x419B      MOVW     R1,#+1179
   \   00000050   0x....             LDR.N    R0,??DataTable27
   \   00000052   0x.... 0x....      BL       assert_failed
   1180          
   1181            tmpccmr2 = TIMx->CCMR2;
   \                     ??TIM_ForcedOC3Config_1: (+1)
   \   00000056   0x8BA0             LDRH     R0,[R4, #+28]
   \   00000058   0x0006             MOVS     R6,R0
   1182          
   1183            /* Reset the OC1M Bits */
   1184            tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
   \   0000005A   0xF64F 0x708F      MOVW     R0,#+65423
   \   0000005E   0x4006             ANDS     R6,R0,R6
   1185          
   1186            /* Configure The Forced output Mode */
   1187            tmpccmr2 |= TIM_ForcedAction;
   \   00000060   0x432E             ORRS     R6,R5,R6
   1188          
   1189            /* Write to TIMx CCMR2 register */
   1190            TIMx->CCMR2 = tmpccmr2;
   \   00000062   0x83A6             STRH     R6,[R4, #+28]
   1191          }
   \   00000064   0xBD70             POP      {R4-R6,PC}       ;; return
   1192          
   1193          /**
   1194            * @brief  Forces the TIMx output 4 waveform to active or inactive level.
   1195            * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
   1196            * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
   1197            *          This parameter can be one of the following values:
   1198            *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
   1199            *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
   1200            * @retval None
   1201            */

   \                                 In section .text, align 2, keep-with-next
   1202          void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
   1203          {
   \                     TIM_ForcedOC4Config: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1204            uint16_t tmpccmr2 = 0;
   \   00000006   0x2600             MOVS     R6,#+0
   1205          
   1206            /* Check the parameters */
   1207            assert_param(IS_TIM_LIST3_PERIPH(TIMx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable37  ;; 0x40010000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD017             BEQ.N    ??TIM_ForcedOC4Config_0
   \   00000010   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000014   0xD014             BEQ.N    ??TIM_ForcedOC4Config_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable38  ;; 0x40000400
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD010             BEQ.N    ??TIM_ForcedOC4Config_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable38_1  ;; 0x40000800
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD00C             BEQ.N    ??TIM_ForcedOC4Config_0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable38_2  ;; 0x40000c00
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD008             BEQ.N    ??TIM_ForcedOC4Config_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable38_3  ;; 0x40010400
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD004             BEQ.N    ??TIM_ForcedOC4Config_0
   \   00000036   0xF240 0x41B7      MOVW     R1,#+1207
   \   0000003A   0x....             LDR.N    R0,??DataTable27
   \   0000003C   0x.... 0x....      BL       assert_failed
   1208            assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
   \                     ??TIM_ForcedOC4Config_0: (+1)
   \   00000040   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000042   0x2D50             CMP      R5,#+80
   \   00000044   0xD007             BEQ.N    ??TIM_ForcedOC4Config_1
   \   00000046   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000048   0x2D40             CMP      R5,#+64
   \   0000004A   0xD004             BEQ.N    ??TIM_ForcedOC4Config_1
   \   0000004C   0xF44F 0x6197      MOV      R1,#+1208
   \   00000050   0x....             LDR.N    R0,??DataTable27
   \   00000052   0x.... 0x....      BL       assert_failed
   1209            tmpccmr2 = TIMx->CCMR2;
   \                     ??TIM_ForcedOC4Config_1: (+1)
   \   00000056   0x8BA0             LDRH     R0,[R4, #+28]
   \   00000058   0x0006             MOVS     R6,R0
   1210          
   1211            /* Reset the OC2M Bits */
   1212            tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
   \   0000005A   0xF648 0x70FF      MOVW     R0,#+36863
   \   0000005E   0x4006             ANDS     R6,R0,R6
   1213          
   1214            /* Configure The Forced output Mode */
   1215            tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
   \   00000060   0xEA56 0x2605      ORRS     R6,R6,R5, LSL #+8
   1216          
   1217            /* Write to TIMx CCMR2 register */
   1218            TIMx->CCMR2 = tmpccmr2;
   \   00000064   0x83A6             STRH     R6,[R4, #+28]
   1219          }
   \   00000066   0xBD70             POP      {R4-R6,PC}       ;; return
   1220          
   1221          /**
   1222            * @brief  Enables or disables the TIMx peripheral Preload register on CCR1.
   1223            * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
   1224            * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
   1225            *          This parameter can be one of the following values:
   1226            *            @arg TIM_OCPreload_Enable
   1227            *            @arg TIM_OCPreload_Disable
   1228            * @retval None
   1229            */

   \                                 In section .text, align 2, keep-with-next
   1230          void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
   1231          {
   \                     TIM_OC1PreloadConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1232            uint16_t tmpccmr1 = 0;
   \   00000006   0x2600             MOVS     R6,#+0
   1233          
   1234            /* Check the parameters */
   1235            assert_param(IS_TIM_LIST1_PERIPH(TIMx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable37  ;; 0x40010000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD02F             BEQ.N    ??TIM_OC1PreloadConfig_0
   \   00000010   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000014   0xD02C             BEQ.N    ??TIM_OC1PreloadConfig_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable38  ;; 0x40000400
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD028             BEQ.N    ??TIM_OC1PreloadConfig_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable38_1  ;; 0x40000800
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD024             BEQ.N    ??TIM_OC1PreloadConfig_0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable38_2  ;; 0x40000c00
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD020             BEQ.N    ??TIM_OC1PreloadConfig_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable38_3  ;; 0x40010400
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD01C             BEQ.N    ??TIM_OC1PreloadConfig_0
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable40  ;; 0x40014000
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD018             BEQ.N    ??TIM_OC1PreloadConfig_0
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable40_1  ;; 0x40014400
   \   00000042   0x4284             CMP      R4,R0
   \   00000044   0xD014             BEQ.N    ??TIM_OC1PreloadConfig_0
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable40_2  ;; 0x40014800
   \   0000004A   0x4284             CMP      R4,R0
   \   0000004C   0xD010             BEQ.N    ??TIM_OC1PreloadConfig_0
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable40_3  ;; 0x40001800
   \   00000052   0x4284             CMP      R4,R0
   \   00000054   0xD00C             BEQ.N    ??TIM_OC1PreloadConfig_0
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable40_4  ;; 0x40001c00
   \   0000005A   0x4284             CMP      R4,R0
   \   0000005C   0xD008             BEQ.N    ??TIM_OC1PreloadConfig_0
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable45  ;; 0x40002000
   \   00000062   0x4284             CMP      R4,R0
   \   00000064   0xD004             BEQ.N    ??TIM_OC1PreloadConfig_0
   \   00000066   0xF240 0x41D3      MOVW     R1,#+1235
   \   0000006A   0x....             LDR.N    R0,??DataTable27
   \   0000006C   0x.... 0x....      BL       assert_failed
   1236            assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
   \                     ??TIM_OC1PreloadConfig_0: (+1)
   \   00000070   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000072   0x2D08             CMP      R5,#+8
   \   00000074   0xD007             BEQ.N    ??TIM_OC1PreloadConfig_1
   \   00000076   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000078   0x2D00             CMP      R5,#+0
   \   0000007A   0xD004             BEQ.N    ??TIM_OC1PreloadConfig_1
   \   0000007C   0xF240 0x41D4      MOVW     R1,#+1236
   \   00000080   0x....             LDR.N    R0,??DataTable27
   \   00000082   0x.... 0x....      BL       assert_failed
   1237          
   1238            tmpccmr1 = TIMx->CCMR1;
   \                     ??TIM_OC1PreloadConfig_1: (+1)
   \   00000086   0x8B20             LDRH     R0,[R4, #+24]
   \   00000088   0x0006             MOVS     R6,R0
   1239          
   1240            /* Reset the OC1PE Bit */
   1241            tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
   \   0000008A   0xF64F 0x70F7      MOVW     R0,#+65527
   \   0000008E   0x4006             ANDS     R6,R0,R6
   1242          
   1243            /* Enable or Disable the Output Compare Preload feature */
   1244            tmpccmr1 |= TIM_OCPreload;
   \   00000090   0x432E             ORRS     R6,R5,R6
   1245          
   1246            /* Write to TIMx CCMR1 register */
   1247            TIMx->CCMR1 = tmpccmr1;
   \   00000092   0x8326             STRH     R6,[R4, #+24]
   1248          }
   \   00000094   0xBD70             POP      {R4-R6,PC}       ;; return
   1249          
   1250          /**
   1251            * @brief  Enables or disables the TIMx peripheral Preload register on CCR2.
   1252            * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
   1253            *         peripheral.
   1254            * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
   1255            *          This parameter can be one of the following values:
   1256            *            @arg TIM_OCPreload_Enable
   1257            *            @arg TIM_OCPreload_Disable
   1258            * @retval None
   1259            */

   \                                 In section .text, align 2, keep-with-next
   1260          void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
   1261          {
   \                     TIM_OC2PreloadConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1262            uint16_t tmpccmr1 = 0;
   \   00000006   0x2600             MOVS     R6,#+0
   1263          
   1264            /* Check the parameters */
   1265            assert_param(IS_TIM_LIST2_PERIPH(TIMx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable37  ;; 0x40010000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD020             BEQ.N    ??TIM_OC2PreloadConfig_0
   \   00000010   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000014   0xD01D             BEQ.N    ??TIM_OC2PreloadConfig_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable38  ;; 0x40000400
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD019             BEQ.N    ??TIM_OC2PreloadConfig_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable38_1  ;; 0x40000800
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD015             BEQ.N    ??TIM_OC2PreloadConfig_0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable38_2  ;; 0x40000c00
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD011             BEQ.N    ??TIM_OC2PreloadConfig_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable38_3  ;; 0x40010400
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD00D             BEQ.N    ??TIM_OC2PreloadConfig_0
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable40  ;; 0x40014000
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD009             BEQ.N    ??TIM_OC2PreloadConfig_0
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable40_3  ;; 0x40001800
   \   00000042   0x4284             CMP      R4,R0
   \   00000044   0xD005             BEQ.N    ??TIM_OC2PreloadConfig_0
   \   00000046   0xF240 0x41F1      MOVW     R1,#+1265
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable51
   \   0000004E   0x.... 0x....      BL       assert_failed
   1266            assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
   \                     ??TIM_OC2PreloadConfig_0: (+1)
   \   00000052   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000054   0x2D08             CMP      R5,#+8
   \   00000056   0xD008             BEQ.N    ??TIM_OC2PreloadConfig_1
   \   00000058   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000005A   0x2D00             CMP      R5,#+0
   \   0000005C   0xD005             BEQ.N    ??TIM_OC2PreloadConfig_1
   \   0000005E   0xF240 0x41F2      MOVW     R1,#+1266
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable51
   \   00000066   0x.... 0x....      BL       assert_failed
   1267          
   1268            tmpccmr1 = TIMx->CCMR1;
   \                     ??TIM_OC2PreloadConfig_1: (+1)
   \   0000006A   0x8B20             LDRH     R0,[R4, #+24]
   \   0000006C   0x0006             MOVS     R6,R0
   1269          
   1270            /* Reset the OC2PE Bit */
   1271            tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
   \   0000006E   0xF24F 0x70FF      MOVW     R0,#+63487
   \   00000072   0x4006             ANDS     R6,R0,R6
   1272          
   1273            /* Enable or Disable the Output Compare Preload feature */
   1274            tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
   \   00000074   0xEA56 0x2605      ORRS     R6,R6,R5, LSL #+8
   1275          
   1276            /* Write to TIMx CCMR1 register */
   1277            TIMx->CCMR1 = tmpccmr1;
   \   00000078   0x8326             STRH     R6,[R4, #+24]
   1278          }
   \   0000007A   0xBD70             POP      {R4-R6,PC}       ;; return
   1279          
   1280          /**
   1281            * @brief  Enables or disables the TIMx peripheral Preload register on CCR3.
   1282            * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
   1283            * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
   1284            *          This parameter can be one of the following values:
   1285            *            @arg TIM_OCPreload_Enable
   1286            *            @arg TIM_OCPreload_Disable
   1287            * @retval None
   1288            */

   \                                 In section .text, align 2, keep-with-next
   1289          void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
   1290          {
   \                     TIM_OC3PreloadConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1291            uint16_t tmpccmr2 = 0;
   \   00000006   0x2600             MOVS     R6,#+0
   1292          
   1293            /* Check the parameters */
   1294            assert_param(IS_TIM_LIST3_PERIPH(TIMx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable37  ;; 0x40010000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD018             BEQ.N    ??TIM_OC3PreloadConfig_0
   \   00000010   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000014   0xD015             BEQ.N    ??TIM_OC3PreloadConfig_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable38  ;; 0x40000400
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD011             BEQ.N    ??TIM_OC3PreloadConfig_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable38_1  ;; 0x40000800
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD00D             BEQ.N    ??TIM_OC3PreloadConfig_0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable38_2  ;; 0x40000c00
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD009             BEQ.N    ??TIM_OC3PreloadConfig_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable38_3  ;; 0x40010400
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD005             BEQ.N    ??TIM_OC3PreloadConfig_0
   \   00000036   0xF240 0x510E      MOVW     R1,#+1294
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable51
   \   0000003E   0x.... 0x....      BL       assert_failed
   1295            assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
   \                     ??TIM_OC3PreloadConfig_0: (+1)
   \   00000042   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000044   0x2D08             CMP      R5,#+8
   \   00000046   0xD008             BEQ.N    ??TIM_OC3PreloadConfig_1
   \   00000048   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004A   0x2D00             CMP      R5,#+0
   \   0000004C   0xD005             BEQ.N    ??TIM_OC3PreloadConfig_1
   \   0000004E   0xF240 0x510F      MOVW     R1,#+1295
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable51
   \   00000056   0x.... 0x....      BL       assert_failed
   1296          
   1297            tmpccmr2 = TIMx->CCMR2;
   \                     ??TIM_OC3PreloadConfig_1: (+1)
   \   0000005A   0x8BA0             LDRH     R0,[R4, #+28]
   \   0000005C   0x0006             MOVS     R6,R0
   1298          
   1299            /* Reset the OC3PE Bit */
   1300            tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
   \   0000005E   0xF64F 0x70F7      MOVW     R0,#+65527
   \   00000062   0x4006             ANDS     R6,R0,R6
   1301          
   1302            /* Enable or Disable the Output Compare Preload feature */
   1303            tmpccmr2 |= TIM_OCPreload;
   \   00000064   0x432E             ORRS     R6,R5,R6
   1304          
   1305            /* Write to TIMx CCMR2 register */
   1306            TIMx->CCMR2 = tmpccmr2;
   \   00000066   0x83A6             STRH     R6,[R4, #+28]
   1307          }
   \   00000068   0xBD70             POP      {R4-R6,PC}       ;; return
   1308          
   1309          /**
   1310            * @brief  Enables or disables the TIMx peripheral Preload register on CCR4.
   1311            * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
   1312            * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
   1313            *          This parameter can be one of the following values:
   1314            *            @arg TIM_OCPreload_Enable
   1315            *            @arg TIM_OCPreload_Disable
   1316            * @retval None
   1317            */

   \                                 In section .text, align 2, keep-with-next
   1318          void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
   1319          {
   \                     TIM_OC4PreloadConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1320            uint16_t tmpccmr2 = 0;
   \   00000006   0x2600             MOVS     R6,#+0
   1321          
   1322            /* Check the parameters */
   1323            assert_param(IS_TIM_LIST3_PERIPH(TIMx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable37  ;; 0x40010000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD018             BEQ.N    ??TIM_OC4PreloadConfig_0
   \   00000010   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000014   0xD015             BEQ.N    ??TIM_OC4PreloadConfig_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable38  ;; 0x40000400
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD011             BEQ.N    ??TIM_OC4PreloadConfig_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable38_1  ;; 0x40000800
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD00D             BEQ.N    ??TIM_OC4PreloadConfig_0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable38_2  ;; 0x40000c00
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD009             BEQ.N    ??TIM_OC4PreloadConfig_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable38_3  ;; 0x40010400
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD005             BEQ.N    ??TIM_OC4PreloadConfig_0
   \   00000036   0xF240 0x512B      MOVW     R1,#+1323
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable51
   \   0000003E   0x.... 0x....      BL       assert_failed
   1324            assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
   \                     ??TIM_OC4PreloadConfig_0: (+1)
   \   00000042   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000044   0x2D08             CMP      R5,#+8
   \   00000046   0xD008             BEQ.N    ??TIM_OC4PreloadConfig_1
   \   00000048   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004A   0x2D00             CMP      R5,#+0
   \   0000004C   0xD005             BEQ.N    ??TIM_OC4PreloadConfig_1
   \   0000004E   0xF240 0x512C      MOVW     R1,#+1324
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable51
   \   00000056   0x.... 0x....      BL       assert_failed
   1325          
   1326            tmpccmr2 = TIMx->CCMR2;
   \                     ??TIM_OC4PreloadConfig_1: (+1)
   \   0000005A   0x8BA0             LDRH     R0,[R4, #+28]
   \   0000005C   0x0006             MOVS     R6,R0
   1327          
   1328            /* Reset the OC4PE Bit */
   1329            tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
   \   0000005E   0xF24F 0x70FF      MOVW     R0,#+63487
   \   00000062   0x4006             ANDS     R6,R0,R6
   1330          
   1331            /* Enable or Disable the Output Compare Preload feature */
   1332            tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
   \   00000064   0xEA56 0x2605      ORRS     R6,R6,R5, LSL #+8
   1333          
   1334            /* Write to TIMx CCMR2 register */
   1335            TIMx->CCMR2 = tmpccmr2;
   \   00000068   0x83A6             STRH     R6,[R4, #+28]
   1336          }
   \   0000006A   0xBD70             POP      {R4-R6,PC}       ;; return
   1337          
   1338          /**
   1339            * @brief  Configures the TIMx Output Compare 1 Fast feature.
   1340            * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
   1341            * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
   1342            *          This parameter can be one of the following values:
   1343            *            @arg TIM_OCFast_Enable: TIM output compare fast enable
   1344            *            @arg TIM_OCFast_Disable: TIM output compare fast disable
   1345            * @retval None
   1346            */

   \                                 In section .text, align 2, keep-with-next
   1347          void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
   1348          {
   \                     TIM_OC1FastConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1349            uint16_t tmpccmr1 = 0;
   \   00000006   0x2600             MOVS     R6,#+0
   1350          
   1351            /* Check the parameters */
   1352            assert_param(IS_TIM_LIST1_PERIPH(TIMx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable37  ;; 0x40010000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD030             BEQ.N    ??TIM_OC1FastConfig_0
   \   00000010   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000014   0xD02D             BEQ.N    ??TIM_OC1FastConfig_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable38  ;; 0x40000400
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD029             BEQ.N    ??TIM_OC1FastConfig_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable38_1  ;; 0x40000800
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD025             BEQ.N    ??TIM_OC1FastConfig_0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable38_2  ;; 0x40000c00
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD021             BEQ.N    ??TIM_OC1FastConfig_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable38_3  ;; 0x40010400
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD01D             BEQ.N    ??TIM_OC1FastConfig_0
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable40  ;; 0x40014000
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD019             BEQ.N    ??TIM_OC1FastConfig_0
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable40_1  ;; 0x40014400
   \   00000042   0x4284             CMP      R4,R0
   \   00000044   0xD015             BEQ.N    ??TIM_OC1FastConfig_0
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable40_2  ;; 0x40014800
   \   0000004A   0x4284             CMP      R4,R0
   \   0000004C   0xD011             BEQ.N    ??TIM_OC1FastConfig_0
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable40_3  ;; 0x40001800
   \   00000052   0x4284             CMP      R4,R0
   \   00000054   0xD00D             BEQ.N    ??TIM_OC1FastConfig_0
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable40_4  ;; 0x40001c00
   \   0000005A   0x4284             CMP      R4,R0
   \   0000005C   0xD009             BEQ.N    ??TIM_OC1FastConfig_0
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable45  ;; 0x40002000
   \   00000062   0x4284             CMP      R4,R0
   \   00000064   0xD005             BEQ.N    ??TIM_OC1FastConfig_0
   \   00000066   0xF44F 0x61A9      MOV      R1,#+1352
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable51
   \   0000006E   0x.... 0x....      BL       assert_failed
   1353            assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
   \                     ??TIM_OC1FastConfig_0: (+1)
   \   00000072   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000074   0x2D04             CMP      R5,#+4
   \   00000076   0xD008             BEQ.N    ??TIM_OC1FastConfig_1
   \   00000078   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000007A   0x2D00             CMP      R5,#+0
   \   0000007C   0xD005             BEQ.N    ??TIM_OC1FastConfig_1
   \   0000007E   0xF240 0x5149      MOVW     R1,#+1353
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable51
   \   00000086   0x.... 0x....      BL       assert_failed
   1354          
   1355            /* Get the TIMx CCMR1 register value */
   1356            tmpccmr1 = TIMx->CCMR1;
   \                     ??TIM_OC1FastConfig_1: (+1)
   \   0000008A   0x8B20             LDRH     R0,[R4, #+24]
   \   0000008C   0x0006             MOVS     R6,R0
   1357          
   1358            /* Reset the OC1FE Bit */
   1359            tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
   \   0000008E   0xF64F 0x70FB      MOVW     R0,#+65531
   \   00000092   0x4006             ANDS     R6,R0,R6
   1360          
   1361            /* Enable or Disable the Output Compare Fast Bit */
   1362            tmpccmr1 |= TIM_OCFast;
   \   00000094   0x432E             ORRS     R6,R5,R6
   1363          
   1364            /* Write to TIMx CCMR1 */
   1365            TIMx->CCMR1 = tmpccmr1;
   \   00000096   0x8326             STRH     R6,[R4, #+24]
   1366          }
   \   00000098   0xBD70             POP      {R4-R6,PC}       ;; return
   1367          
   1368          /**
   1369            * @brief  Configures the TIMx Output Compare 2 Fast feature.
   1370            * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
   1371            *         peripheral.
   1372            * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
   1373            *          This parameter can be one of the following values:
   1374            *            @arg TIM_OCFast_Enable: TIM output compare fast enable
   1375            *            @arg TIM_OCFast_Disable: TIM output compare fast disable
   1376            * @retval None
   1377            */

   \                                 In section .text, align 2, keep-with-next
   1378          void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
   1379          {
   \                     TIM_OC2FastConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1380            uint16_t tmpccmr1 = 0;
   \   00000006   0x2600             MOVS     R6,#+0
   1381          
   1382            /* Check the parameters */
   1383            assert_param(IS_TIM_LIST2_PERIPH(TIMx));
   \   00000008   0x....             LDR.N    R0,??DataTable37  ;; 0x40010000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD01C             BEQ.N    ??TIM_OC2FastConfig_0
   \   0000000E   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000012   0xD019             BEQ.N    ??TIM_OC2FastConfig_0
   \   00000014   0x....             LDR.N    R0,??DataTable38  ;; 0x40000400
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xD016             BEQ.N    ??TIM_OC2FastConfig_0
   \   0000001A   0x....             LDR.N    R0,??DataTable38_1  ;; 0x40000800
   \   0000001C   0x4284             CMP      R4,R0
   \   0000001E   0xD013             BEQ.N    ??TIM_OC2FastConfig_0
   \   00000020   0x....             LDR.N    R0,??DataTable38_2  ;; 0x40000c00
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD010             BEQ.N    ??TIM_OC2FastConfig_0
   \   00000026   0x....             LDR.N    R0,??DataTable38_3  ;; 0x40010400
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD00D             BEQ.N    ??TIM_OC2FastConfig_0
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable40  ;; 0x40014000
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD009             BEQ.N    ??TIM_OC2FastConfig_0
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable40_3  ;; 0x40001800
   \   00000038   0x4284             CMP      R4,R0
   \   0000003A   0xD005             BEQ.N    ??TIM_OC2FastConfig_0
   \   0000003C   0xF240 0x5167      MOVW     R1,#+1383
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable51
   \   00000044   0x.... 0x....      BL       assert_failed
   1384            assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
   \                     ??TIM_OC2FastConfig_0: (+1)
   \   00000048   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004A   0x2D04             CMP      R5,#+4
   \   0000004C   0xD008             BEQ.N    ??TIM_OC2FastConfig_1
   \   0000004E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000050   0x2D00             CMP      R5,#+0
   \   00000052   0xD005             BEQ.N    ??TIM_OC2FastConfig_1
   \   00000054   0xF44F 0x61AD      MOV      R1,#+1384
   \   00000058   0x.... 0x....      LDR.W    R0,??DataTable51
   \   0000005C   0x.... 0x....      BL       assert_failed
   1385          
   1386            /* Get the TIMx CCMR1 register value */
   1387            tmpccmr1 = TIMx->CCMR1;
   \                     ??TIM_OC2FastConfig_1: (+1)
   \   00000060   0x8B20             LDRH     R0,[R4, #+24]
   \   00000062   0x0006             MOVS     R6,R0
   1388          
   1389            /* Reset the OC2FE Bit */
   1390            tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
   \   00000064   0xF64F 0x30FF      MOVW     R0,#+64511
   \   00000068   0x4006             ANDS     R6,R0,R6
   1391          
   1392            /* Enable or Disable the Output Compare Fast Bit */
   1393            tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
   \   0000006A   0xEA56 0x2605      ORRS     R6,R6,R5, LSL #+8
   1394          
   1395            /* Write to TIMx CCMR1 */
   1396            TIMx->CCMR1 = tmpccmr1;
   \   0000006E   0x8326             STRH     R6,[R4, #+24]
   1397          }
   \   00000070   0xBD70             POP      {R4-R6,PC}       ;; return
   1398          
   1399          /**
   1400            * @brief  Configures the TIMx Output Compare 3 Fast feature.
   1401            * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
   1402            * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
   1403            *          This parameter can be one of the following values:
   1404            *            @arg TIM_OCFast_Enable: TIM output compare fast enable
   1405            *            @arg TIM_OCFast_Disable: TIM output compare fast disable
   1406            * @retval None
   1407            */

   \                                 In section .text, align 2, keep-with-next
   1408          void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
   1409          {
   \                     TIM_OC3FastConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1410            uint16_t tmpccmr2 = 0;
   \   00000006   0x2600             MOVS     R6,#+0
   1411            
   1412            /* Check the parameters */
   1413            assert_param(IS_TIM_LIST3_PERIPH(TIMx));
   \   00000008   0x....             LDR.N    R0,??DataTable37  ;; 0x40010000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD014             BEQ.N    ??TIM_OC3FastConfig_0
   \   0000000E   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000012   0xD011             BEQ.N    ??TIM_OC3FastConfig_0
   \   00000014   0x....             LDR.N    R0,??DataTable38  ;; 0x40000400
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xD00E             BEQ.N    ??TIM_OC3FastConfig_0
   \   0000001A   0x....             LDR.N    R0,??DataTable38_1  ;; 0x40000800
   \   0000001C   0x4284             CMP      R4,R0
   \   0000001E   0xD00B             BEQ.N    ??TIM_OC3FastConfig_0
   \   00000020   0x....             LDR.N    R0,??DataTable38_2  ;; 0x40000c00
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD008             BEQ.N    ??TIM_OC3FastConfig_0
   \   00000026   0x....             LDR.N    R0,??DataTable38_3  ;; 0x40010400
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD005             BEQ.N    ??TIM_OC3FastConfig_0
   \   0000002C   0xF240 0x5185      MOVW     R1,#+1413
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable51
   \   00000034   0x.... 0x....      BL       assert_failed
   1414            assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
   \                     ??TIM_OC3FastConfig_0: (+1)
   \   00000038   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000003A   0x2D04             CMP      R5,#+4
   \   0000003C   0xD008             BEQ.N    ??TIM_OC3FastConfig_1
   \   0000003E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000040   0x2D00             CMP      R5,#+0
   \   00000042   0xD005             BEQ.N    ??TIM_OC3FastConfig_1
   \   00000044   0xF240 0x5186      MOVW     R1,#+1414
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable51
   \   0000004C   0x.... 0x....      BL       assert_failed
   1415          
   1416            /* Get the TIMx CCMR2 register value */
   1417            tmpccmr2 = TIMx->CCMR2;
   \                     ??TIM_OC3FastConfig_1: (+1)
   \   00000050   0x8BA0             LDRH     R0,[R4, #+28]
   \   00000052   0x0006             MOVS     R6,R0
   1418          
   1419            /* Reset the OC3FE Bit */
   1420            tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
   \   00000054   0xF64F 0x70FB      MOVW     R0,#+65531
   \   00000058   0x4006             ANDS     R6,R0,R6
   1421          
   1422            /* Enable or Disable the Output Compare Fast Bit */
   1423            tmpccmr2 |= TIM_OCFast;
   \   0000005A   0x432E             ORRS     R6,R5,R6
   1424          
   1425            /* Write to TIMx CCMR2 */
   1426            TIMx->CCMR2 = tmpccmr2;
   \   0000005C   0x83A6             STRH     R6,[R4, #+28]
   1427          }
   \   0000005E   0xBD70             POP      {R4-R6,PC}       ;; return
   1428          
   1429          /**
   1430            * @brief  Configures the TIMx Output Compare 4 Fast feature.
   1431            * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
   1432            * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
   1433            *          This parameter can be one of the following values:
   1434            *            @arg TIM_OCFast_Enable: TIM output compare fast enable
   1435            *            @arg TIM_OCFast_Disable: TIM output compare fast disable
   1436            * @retval None
   1437            */

   \                                 In section .text, align 2, keep-with-next
   1438          void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
   1439          {
   \                     TIM_OC4FastConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1440            uint16_t tmpccmr2 = 0;
   \   00000006   0x2600             MOVS     R6,#+0
   1441          
   1442            /* Check the parameters */
   1443            assert_param(IS_TIM_LIST3_PERIPH(TIMx));
   \   00000008   0x....             LDR.N    R0,??DataTable37  ;; 0x40010000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD014             BEQ.N    ??TIM_OC4FastConfig_0
   \   0000000E   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000012   0xD011             BEQ.N    ??TIM_OC4FastConfig_0
   \   00000014   0x....             LDR.N    R0,??DataTable38  ;; 0x40000400
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xD00E             BEQ.N    ??TIM_OC4FastConfig_0
   \   0000001A   0x....             LDR.N    R0,??DataTable38_1  ;; 0x40000800
   \   0000001C   0x4284             CMP      R4,R0
   \   0000001E   0xD00B             BEQ.N    ??TIM_OC4FastConfig_0
   \   00000020   0x....             LDR.N    R0,??DataTable38_2  ;; 0x40000c00
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD008             BEQ.N    ??TIM_OC4FastConfig_0
   \   00000026   0x....             LDR.N    R0,??DataTable38_3  ;; 0x40010400
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD005             BEQ.N    ??TIM_OC4FastConfig_0
   \   0000002C   0xF240 0x51A3      MOVW     R1,#+1443
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable51
   \   00000034   0x.... 0x....      BL       assert_failed
   1444            assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
   \                     ??TIM_OC4FastConfig_0: (+1)
   \   00000038   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000003A   0x2D04             CMP      R5,#+4
   \   0000003C   0xD008             BEQ.N    ??TIM_OC4FastConfig_1
   \   0000003E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000040   0x2D00             CMP      R5,#+0
   \   00000042   0xD005             BEQ.N    ??TIM_OC4FastConfig_1
   \   00000044   0xF240 0x51A4      MOVW     R1,#+1444
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable51
   \   0000004C   0x.... 0x....      BL       assert_failed
   1445          
   1446            /* Get the TIMx CCMR2 register value */
   1447            tmpccmr2 = TIMx->CCMR2;
   \                     ??TIM_OC4FastConfig_1: (+1)
   \   00000050   0x8BA0             LDRH     R0,[R4, #+28]
   \   00000052   0x0006             MOVS     R6,R0
   1448          
   1449            /* Reset the OC4FE Bit */
   1450            tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
   \   00000054   0xF64F 0x30FF      MOVW     R0,#+64511
   \   00000058   0x4006             ANDS     R6,R0,R6
   1451          
   1452            /* Enable or Disable the Output Compare Fast Bit */
   1453            tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
   \   0000005A   0xEA56 0x2605      ORRS     R6,R6,R5, LSL #+8
   1454          
   1455            /* Write to TIMx CCMR2 */
   1456            TIMx->CCMR2 = tmpccmr2;
   \   0000005E   0x83A6             STRH     R6,[R4, #+28]
   1457          }
   \   00000060   0xBD70             POP      {R4-R6,PC}       ;; return
   1458          
   1459          /**
   1460            * @brief  Clears or safeguards the OCREF1 signal on an external event
   1461            * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
   1462            * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
   1463            *          This parameter can be one of the following values:
   1464            *            @arg TIM_OCClear_Enable: TIM Output clear enable
   1465            *            @arg TIM_OCClear_Disable: TIM Output clear disable
   1466            * @retval None
   1467            */

   \                                 In section .text, align 2, keep-with-next
   1468          void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
   1469          {
   \                     TIM_ClearOC1Ref: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1470            uint16_t tmpccmr1 = 0;
   \   00000006   0x2600             MOVS     R6,#+0
   1471          
   1472            /* Check the parameters */
   1473            assert_param(IS_TIM_LIST1_PERIPH(TIMx));
   \   00000008   0x....             LDR.N    R0,??DataTable37  ;; 0x40010000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD027             BEQ.N    ??TIM_ClearOC1Ref_0
   \   0000000E   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000012   0xD024             BEQ.N    ??TIM_ClearOC1Ref_0
   \   00000014   0x....             LDR.N    R0,??DataTable38  ;; 0x40000400
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xD021             BEQ.N    ??TIM_ClearOC1Ref_0
   \   0000001A   0x....             LDR.N    R0,??DataTable38_1  ;; 0x40000800
   \   0000001C   0x4284             CMP      R4,R0
   \   0000001E   0xD01E             BEQ.N    ??TIM_ClearOC1Ref_0
   \   00000020   0x....             LDR.N    R0,??DataTable38_2  ;; 0x40000c00
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD01B             BEQ.N    ??TIM_ClearOC1Ref_0
   \   00000026   0x....             LDR.N    R0,??DataTable38_3  ;; 0x40010400
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD018             BEQ.N    ??TIM_ClearOC1Ref_0
   \   0000002C   0x....             LDR.N    R0,??DataTable40  ;; 0x40014000
   \   0000002E   0x4284             CMP      R4,R0
   \   00000030   0xD015             BEQ.N    ??TIM_ClearOC1Ref_0
   \   00000032   0x....             LDR.N    R0,??DataTable40_1  ;; 0x40014400
   \   00000034   0x4284             CMP      R4,R0
   \   00000036   0xD012             BEQ.N    ??TIM_ClearOC1Ref_0
   \   00000038   0x....             LDR.N    R0,??DataTable40_2  ;; 0x40014800
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD00F             BEQ.N    ??TIM_ClearOC1Ref_0
   \   0000003E   0x....             LDR.N    R0,??DataTable40_3  ;; 0x40001800
   \   00000040   0x4284             CMP      R4,R0
   \   00000042   0xD00C             BEQ.N    ??TIM_ClearOC1Ref_0
   \   00000044   0x....             LDR.N    R0,??DataTable40_4  ;; 0x40001c00
   \   00000046   0x4284             CMP      R4,R0
   \   00000048   0xD009             BEQ.N    ??TIM_ClearOC1Ref_0
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable45  ;; 0x40002000
   \   0000004E   0x4284             CMP      R4,R0
   \   00000050   0xD005             BEQ.N    ??TIM_ClearOC1Ref_0
   \   00000052   0xF240 0x51C1      MOVW     R1,#+1473
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable51
   \   0000005A   0x.... 0x....      BL       assert_failed
   1474            assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
   \                     ??TIM_ClearOC1Ref_0: (+1)
   \   0000005E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000060   0x2D80             CMP      R5,#+128
   \   00000062   0xD008             BEQ.N    ??TIM_ClearOC1Ref_1
   \   00000064   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000066   0x2D00             CMP      R5,#+0
   \   00000068   0xD005             BEQ.N    ??TIM_ClearOC1Ref_1
   \   0000006A   0xF240 0x51C2      MOVW     R1,#+1474
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable51
   \   00000072   0x.... 0x....      BL       assert_failed
   1475          
   1476            tmpccmr1 = TIMx->CCMR1;
   \                     ??TIM_ClearOC1Ref_1: (+1)
   \   00000076   0x8B20             LDRH     R0,[R4, #+24]
   \   00000078   0x0006             MOVS     R6,R0
   1477          
   1478            /* Reset the OC1CE Bit */
   1479            tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
   \   0000007A   0xF64F 0x707F      MOVW     R0,#+65407
   \   0000007E   0x4006             ANDS     R6,R0,R6
   1480          
   1481            /* Enable or Disable the Output Compare Clear Bit */
   1482            tmpccmr1 |= TIM_OCClear;
   \   00000080   0x432E             ORRS     R6,R5,R6
   1483          
   1484            /* Write to TIMx CCMR1 register */
   1485            TIMx->CCMR1 = tmpccmr1;
   \   00000082   0x8326             STRH     R6,[R4, #+24]
   1486          }
   \   00000084   0xBD70             POP      {R4-R6,PC}       ;; return
   1487          
   1488          /**
   1489            * @brief  Clears or safeguards the OCREF2 signal on an external event
   1490            * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
   1491            *         peripheral.
   1492            * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
   1493            *          This parameter can be one of the following values:
   1494            *            @arg TIM_OCClear_Enable: TIM Output clear enable
   1495            *            @arg TIM_OCClear_Disable: TIM Output clear disable
   1496            * @retval None
   1497            */

   \                                 In section .text, align 2, keep-with-next
   1498          void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
   1499          {
   \                     TIM_ClearOC2Ref: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1500            uint16_t tmpccmr1 = 0;
   \   00000006   0x2600             MOVS     R6,#+0
   1501          
   1502            /* Check the parameters */
   1503            assert_param(IS_TIM_LIST2_PERIPH(TIMx));
   \   00000008   0x....             LDR.N    R0,??DataTable37  ;; 0x40010000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD01A             BEQ.N    ??TIM_ClearOC2Ref_0
   \   0000000E   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000012   0xD017             BEQ.N    ??TIM_ClearOC2Ref_0
   \   00000014   0x....             LDR.N    R0,??DataTable38  ;; 0x40000400
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xD014             BEQ.N    ??TIM_ClearOC2Ref_0
   \   0000001A   0x....             LDR.N    R0,??DataTable38_1  ;; 0x40000800
   \   0000001C   0x4284             CMP      R4,R0
   \   0000001E   0xD011             BEQ.N    ??TIM_ClearOC2Ref_0
   \   00000020   0x....             LDR.N    R0,??DataTable38_2  ;; 0x40000c00
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD00E             BEQ.N    ??TIM_ClearOC2Ref_0
   \   00000026   0x....             LDR.N    R0,??DataTable38_3  ;; 0x40010400
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD00B             BEQ.N    ??TIM_ClearOC2Ref_0
   \   0000002C   0x....             LDR.N    R0,??DataTable40  ;; 0x40014000
   \   0000002E   0x4284             CMP      R4,R0
   \   00000030   0xD008             BEQ.N    ??TIM_ClearOC2Ref_0
   \   00000032   0x....             LDR.N    R0,??DataTable40_3  ;; 0x40001800
   \   00000034   0x4284             CMP      R4,R0
   \   00000036   0xD005             BEQ.N    ??TIM_ClearOC2Ref_0
   \   00000038   0xF240 0x51DF      MOVW     R1,#+1503
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable51
   \   00000040   0x.... 0x....      BL       assert_failed
   1504            assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
   \                     ??TIM_ClearOC2Ref_0: (+1)
   \   00000044   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000046   0x2D80             CMP      R5,#+128
   \   00000048   0xD008             BEQ.N    ??TIM_ClearOC2Ref_1
   \   0000004A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004C   0x2D00             CMP      R5,#+0
   \   0000004E   0xD005             BEQ.N    ??TIM_ClearOC2Ref_1
   \   00000050   0xF44F 0x61BC      MOV      R1,#+1504
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable51
   \   00000058   0x.... 0x....      BL       assert_failed
   1505          
   1506            tmpccmr1 = TIMx->CCMR1;
   \                     ??TIM_ClearOC2Ref_1: (+1)
   \   0000005C   0x8B20             LDRH     R0,[R4, #+24]
   \   0000005E   0x0006             MOVS     R6,R0
   1507          
   1508            /* Reset the OC2CE Bit */
   1509            tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
   \   00000060   0x0476             LSLS     R6,R6,#+17       ;; ZeroExtS R6,R6,#+17,#+17
   \   00000062   0x0C76             LSRS     R6,R6,#+17
   1510          
   1511            /* Enable or Disable the Output Compare Clear Bit */
   1512            tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
   \   00000064   0xEA56 0x2605      ORRS     R6,R6,R5, LSL #+8
   1513          
   1514            /* Write to TIMx CCMR1 register */
   1515            TIMx->CCMR1 = tmpccmr1;
   \   00000068   0x8326             STRH     R6,[R4, #+24]
   1516          }
   \   0000006A   0xBD70             POP      {R4-R6,PC}       ;; return
   1517          
   1518          /**
   1519            * @brief  Clears or safeguards the OCREF3 signal on an external event
   1520            * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
   1521            * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
   1522            *          This parameter can be one of the following values:
   1523            *            @arg TIM_OCClear_Enable: TIM Output clear enable
   1524            *            @arg TIM_OCClear_Disable: TIM Output clear disable
   1525            * @retval None
   1526            */

   \                                 In section .text, align 2, keep-with-next
   1527          void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
   1528          {
   \                     TIM_ClearOC3Ref: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1529            uint16_t tmpccmr2 = 0;
   \   00000006   0x2600             MOVS     R6,#+0
   1530          
   1531            /* Check the parameters */
   1532            assert_param(IS_TIM_LIST3_PERIPH(TIMx));
   \   00000008   0x....             LDR.N    R0,??DataTable37  ;; 0x40010000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD014             BEQ.N    ??TIM_ClearOC3Ref_0
   \   0000000E   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000012   0xD011             BEQ.N    ??TIM_ClearOC3Ref_0
   \   00000014   0x....             LDR.N    R0,??DataTable38  ;; 0x40000400
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xD00E             BEQ.N    ??TIM_ClearOC3Ref_0
   \   0000001A   0x....             LDR.N    R0,??DataTable38_1  ;; 0x40000800
   \   0000001C   0x4284             CMP      R4,R0
   \   0000001E   0xD00B             BEQ.N    ??TIM_ClearOC3Ref_0
   \   00000020   0x....             LDR.N    R0,??DataTable38_2  ;; 0x40000c00
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD008             BEQ.N    ??TIM_ClearOC3Ref_0
   \   00000026   0x....             LDR.N    R0,??DataTable38_3  ;; 0x40010400
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD005             BEQ.N    ??TIM_ClearOC3Ref_0
   \   0000002C   0xF240 0x51FC      MOVW     R1,#+1532
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable51
   \   00000034   0x.... 0x....      BL       assert_failed
   1533            assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
   \                     ??TIM_ClearOC3Ref_0: (+1)
   \   00000038   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000003A   0x2D80             CMP      R5,#+128
   \   0000003C   0xD008             BEQ.N    ??TIM_ClearOC3Ref_1
   \   0000003E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000040   0x2D00             CMP      R5,#+0
   \   00000042   0xD005             BEQ.N    ??TIM_ClearOC3Ref_1
   \   00000044   0xF240 0x51FD      MOVW     R1,#+1533
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable51
   \   0000004C   0x.... 0x....      BL       assert_failed
   1534          
   1535            tmpccmr2 = TIMx->CCMR2;
   \                     ??TIM_ClearOC3Ref_1: (+1)
   \   00000050   0x8BA0             LDRH     R0,[R4, #+28]
   \   00000052   0x0006             MOVS     R6,R0
   1536          
   1537            /* Reset the OC3CE Bit */
   1538            tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
   \   00000054   0xF64F 0x707F      MOVW     R0,#+65407
   \   00000058   0x4006             ANDS     R6,R0,R6
   1539          
   1540            /* Enable or Disable the Output Compare Clear Bit */
   1541            tmpccmr2 |= TIM_OCClear;
   \   0000005A   0x432E             ORRS     R6,R5,R6
   1542          
   1543            /* Write to TIMx CCMR2 register */
   1544            TIMx->CCMR2 = tmpccmr2;
   \   0000005C   0x83A6             STRH     R6,[R4, #+28]
   1545          }
   \   0000005E   0xBD70             POP      {R4-R6,PC}       ;; return
   1546          
   1547          /**
   1548            * @brief  Clears or safeguards the OCREF4 signal on an external event
   1549            * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
   1550            * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
   1551            *          This parameter can be one of the following values:
   1552            *            @arg TIM_OCClear_Enable: TIM Output clear enable
   1553            *            @arg TIM_OCClear_Disable: TIM Output clear disable
   1554            * @retval None
   1555            */

   \                                 In section .text, align 2, keep-with-next
   1556          void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
   1557          {
   \                     TIM_ClearOC4Ref: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1558            uint16_t tmpccmr2 = 0;
   \   00000006   0x2600             MOVS     R6,#+0
   1559          
   1560            /* Check the parameters */
   1561            assert_param(IS_TIM_LIST3_PERIPH(TIMx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable54  ;; 0x40010000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD014             BEQ.N    ??TIM_ClearOC4Ref_0
   \   00000010   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000014   0xD011             BEQ.N    ??TIM_ClearOC4Ref_0
   \   00000016   0x....             LDR.N    R0,??DataTable38  ;; 0x40000400
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD00E             BEQ.N    ??TIM_ClearOC4Ref_0
   \   0000001C   0x....             LDR.N    R0,??DataTable38_1  ;; 0x40000800
   \   0000001E   0x4284             CMP      R4,R0
   \   00000020   0xD00B             BEQ.N    ??TIM_ClearOC4Ref_0
   \   00000022   0x....             LDR.N    R0,??DataTable38_2  ;; 0x40000c00
   \   00000024   0x4284             CMP      R4,R0
   \   00000026   0xD008             BEQ.N    ??TIM_ClearOC4Ref_0
   \   00000028   0x....             LDR.N    R0,??DataTable38_3  ;; 0x40010400
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD005             BEQ.N    ??TIM_ClearOC4Ref_0
   \   0000002E   0xF240 0x6119      MOVW     R1,#+1561
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable51
   \   00000036   0x.... 0x....      BL       assert_failed
   1562            assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
   \                     ??TIM_ClearOC4Ref_0: (+1)
   \   0000003A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000003C   0x2D80             CMP      R5,#+128
   \   0000003E   0xD008             BEQ.N    ??TIM_ClearOC4Ref_1
   \   00000040   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000042   0x2D00             CMP      R5,#+0
   \   00000044   0xD005             BEQ.N    ??TIM_ClearOC4Ref_1
   \   00000046   0xF240 0x611A      MOVW     R1,#+1562
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable51
   \   0000004E   0x.... 0x....      BL       assert_failed
   1563          
   1564            tmpccmr2 = TIMx->CCMR2;
   \                     ??TIM_ClearOC4Ref_1: (+1)
   \   00000052   0x8BA0             LDRH     R0,[R4, #+28]
   \   00000054   0x0006             MOVS     R6,R0
   1565          
   1566            /* Reset the OC4CE Bit */
   1567            tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
   \   00000056   0x0476             LSLS     R6,R6,#+17       ;; ZeroExtS R6,R6,#+17,#+17
   \   00000058   0x0C76             LSRS     R6,R6,#+17
   1568          
   1569            /* Enable or Disable the Output Compare Clear Bit */
   1570            tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
   \   0000005A   0xEA56 0x2605      ORRS     R6,R6,R5, LSL #+8
   1571          
   1572            /* Write to TIMx CCMR2 register */
   1573            TIMx->CCMR2 = tmpccmr2;
   \   0000005E   0x83A6             STRH     R6,[R4, #+28]
   1574          }
   \   00000060   0xBD70             POP      {R4-R6,PC}       ;; return
   1575          
   1576          /**
   1577            * @brief  Configures the TIMx channel 1 polarity.
   1578            * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
   1579            * @param  TIM_OCPolarity: specifies the OC1 Polarity
   1580            *          This parameter can be one of the following values:
   1581            *            @arg TIM_OCPolarity_High: Output Compare active high
   1582            *            @arg TIM_OCPolarity_Low: Output Compare active low
   1583            * @retval None
   1584            */

   \                                 In section .text, align 2, keep-with-next
   1585          void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
   1586          {
   \                     TIM_OC1PolarityConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1587            uint16_t tmpccer = 0;
   \   00000006   0x2600             MOVS     R6,#+0
   1588          
   1589            /* Check the parameters */
   1590            assert_param(IS_TIM_LIST1_PERIPH(TIMx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable54  ;; 0x40010000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD02A             BEQ.N    ??TIM_OC1PolarityConfig_0
   \   00000010   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000014   0xD027             BEQ.N    ??TIM_OC1PolarityConfig_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable55  ;; 0x40000400
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD023             BEQ.N    ??TIM_OC1PolarityConfig_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable55_1  ;; 0x40000800
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD01F             BEQ.N    ??TIM_OC1PolarityConfig_0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable55_2  ;; 0x40000c00
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD01B             BEQ.N    ??TIM_OC1PolarityConfig_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable55_3  ;; 0x40010400
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD017             BEQ.N    ??TIM_OC1PolarityConfig_0
   \   00000036   0x....             LDR.N    R0,??DataTable40  ;; 0x40014000
   \   00000038   0x4284             CMP      R4,R0
   \   0000003A   0xD014             BEQ.N    ??TIM_OC1PolarityConfig_0
   \   0000003C   0x....             LDR.N    R0,??DataTable40_1  ;; 0x40014400
   \   0000003E   0x4284             CMP      R4,R0
   \   00000040   0xD011             BEQ.N    ??TIM_OC1PolarityConfig_0
   \   00000042   0x....             LDR.N    R0,??DataTable40_2  ;; 0x40014800
   \   00000044   0x4284             CMP      R4,R0
   \   00000046   0xD00E             BEQ.N    ??TIM_OC1PolarityConfig_0
   \   00000048   0x....             LDR.N    R0,??DataTable40_3  ;; 0x40001800
   \   0000004A   0x4284             CMP      R4,R0
   \   0000004C   0xD00B             BEQ.N    ??TIM_OC1PolarityConfig_0
   \   0000004E   0x....             LDR.N    R0,??DataTable40_4  ;; 0x40001c00
   \   00000050   0x4284             CMP      R4,R0
   \   00000052   0xD008             BEQ.N    ??TIM_OC1PolarityConfig_0
   \   00000054   0x....             LDR.N    R0,??DataTable45  ;; 0x40002000
   \   00000056   0x4284             CMP      R4,R0
   \   00000058   0xD005             BEQ.N    ??TIM_OC1PolarityConfig_0
   \   0000005A   0xF240 0x6136      MOVW     R1,#+1590
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable51
   \   00000062   0x.... 0x....      BL       assert_failed
   1591            assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
   \                     ??TIM_OC1PolarityConfig_0: (+1)
   \   00000066   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000068   0x2D00             CMP      R5,#+0
   \   0000006A   0xD008             BEQ.N    ??TIM_OC1PolarityConfig_1
   \   0000006C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000006E   0x2D02             CMP      R5,#+2
   \   00000070   0xD005             BEQ.N    ??TIM_OC1PolarityConfig_1
   \   00000072   0xF240 0x6137      MOVW     R1,#+1591
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable51
   \   0000007A   0x.... 0x....      BL       assert_failed
   1592          
   1593            tmpccer = TIMx->CCER;
   \                     ??TIM_OC1PolarityConfig_1: (+1)
   \   0000007E   0x8C20             LDRH     R0,[R4, #+32]
   \   00000080   0x0006             MOVS     R6,R0
   1594          
   1595            /* Set or Reset the CC1P Bit */
   1596            tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
   \   00000082   0xF64F 0x70FD      MOVW     R0,#+65533
   \   00000086   0x4006             ANDS     R6,R0,R6
   1597            tmpccer |= TIM_OCPolarity;
   \   00000088   0x432E             ORRS     R6,R5,R6
   1598          
   1599            /* Write to TIMx CCER register */
   1600            TIMx->CCER = tmpccer;
   \   0000008A   0x8426             STRH     R6,[R4, #+32]
   1601          }
   \   0000008C   0xBD70             POP      {R4-R6,PC}       ;; return
   1602          
   1603          /**
   1604            * @brief  Configures the TIMx Channel 1N polarity.
   1605            * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
   1606            * @param  TIM_OCNPolarity: specifies the OC1N Polarity
   1607            *          This parameter can be one of the following values:
   1608            *            @arg TIM_OCNPolarity_High: Output Compare active high
   1609            *            @arg TIM_OCNPolarity_Low: Output Compare active low
   1610            * @retval None
   1611            */

   \                                 In section .text, align 2, keep-with-next
   1612          void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
   1613          {
   \                     TIM_OC1NPolarityConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1614            uint16_t tmpccer = 0;
   \   00000006   0x2600             MOVS     R6,#+0
   1615            /* Check the parameters */
   1616            assert_param(IS_TIM_LIST4_PERIPH(TIMx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable54  ;; 0x40010000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD009             BEQ.N    ??TIM_OC1NPolarityConfig_0
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable55_3  ;; 0x40010400
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD005             BEQ.N    ??TIM_OC1NPolarityConfig_0
   \   00000018   0xF44F 0x61CA      MOV      R1,#+1616
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable51
   \   00000020   0x.... 0x....      BL       assert_failed
   1617            assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   \                     ??TIM_OC1NPolarityConfig_0: (+1)
   \   00000024   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000026   0x2D00             CMP      R5,#+0
   \   00000028   0xD008             BEQ.N    ??TIM_OC1NPolarityConfig_1
   \   0000002A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000002C   0x2D08             CMP      R5,#+8
   \   0000002E   0xD005             BEQ.N    ??TIM_OC1NPolarityConfig_1
   \   00000030   0xF240 0x6151      MOVW     R1,#+1617
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable51
   \   00000038   0x.... 0x....      BL       assert_failed
   1618             
   1619            tmpccer = TIMx->CCER;
   \                     ??TIM_OC1NPolarityConfig_1: (+1)
   \   0000003C   0x8C20             LDRH     R0,[R4, #+32]
   \   0000003E   0x0006             MOVS     R6,R0
   1620          
   1621            /* Set or Reset the CC1NP Bit */
   1622            tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
   \   00000040   0xF64F 0x70F7      MOVW     R0,#+65527
   \   00000044   0x4006             ANDS     R6,R0,R6
   1623            tmpccer |= TIM_OCNPolarity;
   \   00000046   0x432E             ORRS     R6,R5,R6
   1624          
   1625            /* Write to TIMx CCER register */
   1626            TIMx->CCER = tmpccer;
   \   00000048   0x8426             STRH     R6,[R4, #+32]
   1627          }
   \   0000004A   0xBD70             POP      {R4-R6,PC}       ;; return
   1628          
   1629          /**
   1630            * @brief  Configures the TIMx channel 2 polarity.
   1631            * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
   1632            *         peripheral.
   1633            * @param  TIM_OCPolarity: specifies the OC2 Polarity
   1634            *          This parameter can be one of the following values:
   1635            *            @arg TIM_OCPolarity_High: Output Compare active high
   1636            *            @arg TIM_OCPolarity_Low: Output Compare active low
   1637            * @retval None
   1638            */

   \                                 In section .text, align 2, keep-with-next
   1639          void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
   1640          {
   \                     TIM_OC2PolarityConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1641            uint16_t tmpccer = 0;
   \   00000006   0x2600             MOVS     R6,#+0
   1642          
   1643            /* Check the parameters */
   1644            assert_param(IS_TIM_LIST2_PERIPH(TIMx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable54  ;; 0x40010000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD020             BEQ.N    ??TIM_OC2PolarityConfig_0
   \   00000010   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000014   0xD01D             BEQ.N    ??TIM_OC2PolarityConfig_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable55  ;; 0x40000400
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD019             BEQ.N    ??TIM_OC2PolarityConfig_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable55_1  ;; 0x40000800
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD015             BEQ.N    ??TIM_OC2PolarityConfig_0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable55_2  ;; 0x40000c00
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD011             BEQ.N    ??TIM_OC2PolarityConfig_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable55_3  ;; 0x40010400
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD00D             BEQ.N    ??TIM_OC2PolarityConfig_0
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable57  ;; 0x40014000
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD009             BEQ.N    ??TIM_OC2PolarityConfig_0
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable57_1  ;; 0x40001800
   \   00000042   0x4284             CMP      R4,R0
   \   00000044   0xD005             BEQ.N    ??TIM_OC2PolarityConfig_0
   \   00000046   0xF240 0x616C      MOVW     R1,#+1644
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable51
   \   0000004E   0x.... 0x....      BL       assert_failed
   1645            assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
   \                     ??TIM_OC2PolarityConfig_0: (+1)
   \   00000052   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000054   0x2D00             CMP      R5,#+0
   \   00000056   0xD008             BEQ.N    ??TIM_OC2PolarityConfig_1
   \   00000058   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000005A   0x2D02             CMP      R5,#+2
   \   0000005C   0xD005             BEQ.N    ??TIM_OC2PolarityConfig_1
   \   0000005E   0xF240 0x616D      MOVW     R1,#+1645
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable51
   \   00000066   0x.... 0x....      BL       assert_failed
   1646          
   1647            tmpccer = TIMx->CCER;
   \                     ??TIM_OC2PolarityConfig_1: (+1)
   \   0000006A   0x8C20             LDRH     R0,[R4, #+32]
   \   0000006C   0x0006             MOVS     R6,R0
   1648          
   1649            /* Set or Reset the CC2P Bit */
   1650            tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
   \   0000006E   0xF64F 0x70DF      MOVW     R0,#+65503
   \   00000072   0x4006             ANDS     R6,R0,R6
   1651            tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
   \   00000074   0xEA56 0x1605      ORRS     R6,R6,R5, LSL #+4
   1652          
   1653            /* Write to TIMx CCER register */
   1654            TIMx->CCER = tmpccer;
   \   00000078   0x8426             STRH     R6,[R4, #+32]
   1655          }
   \   0000007A   0xBD70             POP      {R4-R6,PC}       ;; return
   1656          
   1657          /**
   1658            * @brief  Configures the TIMx Channel 2N polarity.
   1659            * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
   1660            * @param  TIM_OCNPolarity: specifies the OC2N Polarity
   1661            *          This parameter can be one of the following values:
   1662            *            @arg TIM_OCNPolarity_High: Output Compare active high
   1663            *            @arg TIM_OCNPolarity_Low: Output Compare active low
   1664            * @retval None
   1665            */

   \                                 In section .text, align 2, keep-with-next
   1666          void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
   1667          {
   \                     TIM_OC2NPolarityConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1668            uint16_t tmpccer = 0;
   \   00000006   0x2600             MOVS     R6,#+0
   1669          
   1670            /* Check the parameters */
   1671            assert_param(IS_TIM_LIST4_PERIPH(TIMx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable54  ;; 0x40010000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD009             BEQ.N    ??TIM_OC2NPolarityConfig_0
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable55_3  ;; 0x40010400
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD005             BEQ.N    ??TIM_OC2NPolarityConfig_0
   \   00000018   0xF240 0x6187      MOVW     R1,#+1671
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable51
   \   00000020   0x.... 0x....      BL       assert_failed
   1672            assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   \                     ??TIM_OC2NPolarityConfig_0: (+1)
   \   00000024   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000026   0x2D00             CMP      R5,#+0
   \   00000028   0xD008             BEQ.N    ??TIM_OC2NPolarityConfig_1
   \   0000002A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000002C   0x2D08             CMP      R5,#+8
   \   0000002E   0xD005             BEQ.N    ??TIM_OC2NPolarityConfig_1
   \   00000030   0xF44F 0x61D1      MOV      R1,#+1672
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable51
   \   00000038   0x.... 0x....      BL       assert_failed
   1673            
   1674            tmpccer = TIMx->CCER;
   \                     ??TIM_OC2NPolarityConfig_1: (+1)
   \   0000003C   0x8C20             LDRH     R0,[R4, #+32]
   \   0000003E   0x0006             MOVS     R6,R0
   1675          
   1676            /* Set or Reset the CC2NP Bit */
   1677            tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
   \   00000040   0xF64F 0x707F      MOVW     R0,#+65407
   \   00000044   0x4006             ANDS     R6,R0,R6
   1678            tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
   \   00000046   0xEA56 0x1605      ORRS     R6,R6,R5, LSL #+4
   1679          
   1680            /* Write to TIMx CCER register */
   1681            TIMx->CCER = tmpccer;
   \   0000004A   0x8426             STRH     R6,[R4, #+32]
   1682          }
   \   0000004C   0xBD70             POP      {R4-R6,PC}       ;; return
   1683          
   1684          /**
   1685            * @brief  Configures the TIMx channel 3 polarity.
   1686            * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
   1687            * @param  TIM_OCPolarity: specifies the OC3 Polarity
   1688            *          This parameter can be one of the following values:
   1689            *            @arg TIM_OCPolarity_High: Output Compare active high
   1690            *            @arg TIM_OCPolarity_Low: Output Compare active low
   1691            * @retval None
   1692            */

   \                                 In section .text, align 2, keep-with-next
   1693          void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
   1694          {
   \                     TIM_OC3PolarityConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1695            uint16_t tmpccer = 0;
   \   00000006   0x2600             MOVS     R6,#+0
   1696          
   1697            /* Check the parameters */
   1698            assert_param(IS_TIM_LIST3_PERIPH(TIMx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable54  ;; 0x40010000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD018             BEQ.N    ??TIM_OC3PolarityConfig_0
   \   00000010   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000014   0xD015             BEQ.N    ??TIM_OC3PolarityConfig_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable55  ;; 0x40000400
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD011             BEQ.N    ??TIM_OC3PolarityConfig_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable55_1  ;; 0x40000800
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD00D             BEQ.N    ??TIM_OC3PolarityConfig_0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable55_2  ;; 0x40000c00
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD009             BEQ.N    ??TIM_OC3PolarityConfig_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable55_3  ;; 0x40010400
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD005             BEQ.N    ??TIM_OC3PolarityConfig_0
   \   00000036   0xF240 0x61A2      MOVW     R1,#+1698
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable51
   \   0000003E   0x.... 0x....      BL       assert_failed
   1699            assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
   \                     ??TIM_OC3PolarityConfig_0: (+1)
   \   00000042   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000044   0x2D00             CMP      R5,#+0
   \   00000046   0xD008             BEQ.N    ??TIM_OC3PolarityConfig_1
   \   00000048   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004A   0x2D02             CMP      R5,#+2
   \   0000004C   0xD005             BEQ.N    ??TIM_OC3PolarityConfig_1
   \   0000004E   0xF240 0x61A3      MOVW     R1,#+1699
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable51
   \   00000056   0x.... 0x....      BL       assert_failed
   1700          
   1701            tmpccer = TIMx->CCER;
   \                     ??TIM_OC3PolarityConfig_1: (+1)
   \   0000005A   0x8C20             LDRH     R0,[R4, #+32]
   \   0000005C   0x0006             MOVS     R6,R0
   1702          
   1703            /* Set or Reset the CC3P Bit */
   1704            tmpccer &= (uint16_t)~TIM_CCER_CC3P;
   \   0000005E   0xF64F 0x50FF      MOVW     R0,#+65023
   \   00000062   0x4006             ANDS     R6,R0,R6
   1705            tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
   \   00000064   0xEA56 0x2605      ORRS     R6,R6,R5, LSL #+8
   1706          
   1707            /* Write to TIMx CCER register */
   1708            TIMx->CCER = tmpccer;
   \   00000068   0x8426             STRH     R6,[R4, #+32]
   1709          }
   \   0000006A   0xBD70             POP      {R4-R6,PC}       ;; return
   1710          
   1711          /**
   1712            * @brief  Configures the TIMx Channel 3N polarity.
   1713            * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
   1714            * @param  TIM_OCNPolarity: specifies the OC3N Polarity
   1715            *          This parameter can be one of the following values:
   1716            *            @arg TIM_OCNPolarity_High: Output Compare active high
   1717            *            @arg TIM_OCNPolarity_Low: Output Compare active low
   1718            * @retval None
   1719            */

   \                                 In section .text, align 2, keep-with-next
   1720          void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
   1721          {
   \                     TIM_OC3NPolarityConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1722            uint16_t tmpccer = 0;
   \   00000006   0x2600             MOVS     R6,#+0
   1723           
   1724            /* Check the parameters */
   1725            assert_param(IS_TIM_LIST4_PERIPH(TIMx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable54  ;; 0x40010000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD009             BEQ.N    ??TIM_OC3NPolarityConfig_0
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable55_3  ;; 0x40010400
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD005             BEQ.N    ??TIM_OC3NPolarityConfig_0
   \   00000018   0xF240 0x61BD      MOVW     R1,#+1725
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable51
   \   00000020   0x.... 0x....      BL       assert_failed
   1726            assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   \                     ??TIM_OC3NPolarityConfig_0: (+1)
   \   00000024   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000026   0x2D00             CMP      R5,#+0
   \   00000028   0xD008             BEQ.N    ??TIM_OC3NPolarityConfig_1
   \   0000002A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000002C   0x2D08             CMP      R5,#+8
   \   0000002E   0xD005             BEQ.N    ??TIM_OC3NPolarityConfig_1
   \   00000030   0xF240 0x61BE      MOVW     R1,#+1726
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable51
   \   00000038   0x.... 0x....      BL       assert_failed
   1727              
   1728            tmpccer = TIMx->CCER;
   \                     ??TIM_OC3NPolarityConfig_1: (+1)
   \   0000003C   0x8C20             LDRH     R0,[R4, #+32]
   \   0000003E   0x0006             MOVS     R6,R0
   1729          
   1730            /* Set or Reset the CC3NP Bit */
   1731            tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
   \   00000040   0xF24F 0x70FF      MOVW     R0,#+63487
   \   00000044   0x4006             ANDS     R6,R0,R6
   1732            tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
   \   00000046   0xEA56 0x2605      ORRS     R6,R6,R5, LSL #+8
   1733          
   1734            /* Write to TIMx CCER register */
   1735            TIMx->CCER = tmpccer;
   \   0000004A   0x8426             STRH     R6,[R4, #+32]
   1736          }
   \   0000004C   0xBD70             POP      {R4-R6,PC}       ;; return
   1737          
   1738          /**
   1739            * @brief  Configures the TIMx channel 4 polarity.
   1740            * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
   1741            * @param  TIM_OCPolarity: specifies the OC4 Polarity
   1742            *          This parameter can be one of the following values:
   1743            *            @arg TIM_OCPolarity_High: Output Compare active high
   1744            *            @arg TIM_OCPolarity_Low: Output Compare active low
   1745            * @retval None
   1746            */

   \                                 In section .text, align 2, keep-with-next
   1747          void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
   1748          {
   \                     TIM_OC4PolarityConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1749            uint16_t tmpccer = 0;
   \   00000006   0x2600             MOVS     R6,#+0
   1750          
   1751            /* Check the parameters */
   1752            assert_param(IS_TIM_LIST3_PERIPH(TIMx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable54  ;; 0x40010000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD018             BEQ.N    ??TIM_OC4PolarityConfig_0
   \   00000010   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000014   0xD015             BEQ.N    ??TIM_OC4PolarityConfig_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable55  ;; 0x40000400
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD011             BEQ.N    ??TIM_OC4PolarityConfig_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable55_1  ;; 0x40000800
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD00D             BEQ.N    ??TIM_OC4PolarityConfig_0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable55_2  ;; 0x40000c00
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD009             BEQ.N    ??TIM_OC4PolarityConfig_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable55_3  ;; 0x40010400
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD005             BEQ.N    ??TIM_OC4PolarityConfig_0
   \   00000036   0xF44F 0x61DB      MOV      R1,#+1752
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable51
   \   0000003E   0x.... 0x....      BL       assert_failed
   1753            assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
   \                     ??TIM_OC4PolarityConfig_0: (+1)
   \   00000042   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000044   0x2D00             CMP      R5,#+0
   \   00000046   0xD008             BEQ.N    ??TIM_OC4PolarityConfig_1
   \   00000048   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004A   0x2D02             CMP      R5,#+2
   \   0000004C   0xD005             BEQ.N    ??TIM_OC4PolarityConfig_1
   \   0000004E   0xF240 0x61D9      MOVW     R1,#+1753
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable51
   \   00000056   0x.... 0x....      BL       assert_failed
   1754          
   1755            tmpccer = TIMx->CCER;
   \                     ??TIM_OC4PolarityConfig_1: (+1)
   \   0000005A   0x8C20             LDRH     R0,[R4, #+32]
   \   0000005C   0x0006             MOVS     R6,R0
   1756          
   1757            /* Set or Reset the CC4P Bit */
   1758            tmpccer &= (uint16_t)~TIM_CCER_CC4P;
   \   0000005E   0xF64D 0x70FF      MOVW     R0,#+57343
   \   00000062   0x4006             ANDS     R6,R0,R6
   1759            tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
   \   00000064   0xEA56 0x3605      ORRS     R6,R6,R5, LSL #+12
   1760          
   1761            /* Write to TIMx CCER register */
   1762            TIMx->CCER = tmpccer;
   \   00000068   0x8426             STRH     R6,[R4, #+32]
   1763          }
   \   0000006A   0xBD70             POP      {R4-R6,PC}       ;; return
   1764          
   1765          /**
   1766            * @brief  Enables or disables the TIM Capture Compare Channel x.
   1767            * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
   1768            * @param  TIM_Channel: specifies the TIM Channel
   1769            *          This parameter can be one of the following values:
   1770            *            @arg TIM_Channel_1: TIM Channel 1
   1771            *            @arg TIM_Channel_2: TIM Channel 2
   1772            *            @arg TIM_Channel_3: TIM Channel 3
   1773            *            @arg TIM_Channel_4: TIM Channel 4
   1774            * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
   1775            *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
   1776            * @retval None
   1777            */

   \                                 In section .text, align 2, keep-with-next
   1778          void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
   1779          {
   \                     TIM_CCxCmd: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   1780            uint16_t tmp = 0;
   \   00000008   0x2700             MOVS     R7,#+0
   1781          
   1782            /* Check the parameters */
   1783            assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable54  ;; 0x40010000
   \   0000000E   0x4284             CMP      R4,R0
   \   00000010   0xD030             BEQ.N    ??TIM_CCxCmd_0
   \   00000012   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000016   0xD02D             BEQ.N    ??TIM_CCxCmd_0
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable55  ;; 0x40000400
   \   0000001C   0x4284             CMP      R4,R0
   \   0000001E   0xD029             BEQ.N    ??TIM_CCxCmd_0
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable55_1  ;; 0x40000800
   \   00000024   0x4284             CMP      R4,R0
   \   00000026   0xD025             BEQ.N    ??TIM_CCxCmd_0
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable55_2  ;; 0x40000c00
   \   0000002C   0x4284             CMP      R4,R0
   \   0000002E   0xD021             BEQ.N    ??TIM_CCxCmd_0
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable55_3  ;; 0x40010400
   \   00000034   0x4284             CMP      R4,R0
   \   00000036   0xD01D             BEQ.N    ??TIM_CCxCmd_0
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable57  ;; 0x40014000
   \   0000003C   0x4284             CMP      R4,R0
   \   0000003E   0xD019             BEQ.N    ??TIM_CCxCmd_0
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable61  ;; 0x40014400
   \   00000044   0x4284             CMP      R4,R0
   \   00000046   0xD015             BEQ.N    ??TIM_CCxCmd_0
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable61_1  ;; 0x40014800
   \   0000004C   0x4284             CMP      R4,R0
   \   0000004E   0xD011             BEQ.N    ??TIM_CCxCmd_0
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable57_1  ;; 0x40001800
   \   00000054   0x4284             CMP      R4,R0
   \   00000056   0xD00D             BEQ.N    ??TIM_CCxCmd_0
   \   00000058   0x.... 0x....      LDR.W    R0,??DataTable62  ;; 0x40001c00
   \   0000005C   0x4284             CMP      R4,R0
   \   0000005E   0xD009             BEQ.N    ??TIM_CCxCmd_0
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable62_1  ;; 0x40002000
   \   00000064   0x4284             CMP      R4,R0
   \   00000066   0xD005             BEQ.N    ??TIM_CCxCmd_0
   \   00000068   0xF240 0x61F7      MOVW     R1,#+1783
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable51
   \   00000070   0x.... 0x....      BL       assert_failed
   1784            assert_param(IS_TIM_CHANNEL(TIM_Channel));
   \                     ??TIM_CCxCmd_0: (+1)
   \   00000074   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000076   0x2D00             CMP      R5,#+0
   \   00000078   0xD00E             BEQ.N    ??TIM_CCxCmd_1
   \   0000007A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000007C   0x2D04             CMP      R5,#+4
   \   0000007E   0xD00B             BEQ.N    ??TIM_CCxCmd_1
   \   00000080   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000082   0x2D08             CMP      R5,#+8
   \   00000084   0xD008             BEQ.N    ??TIM_CCxCmd_1
   \   00000086   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000088   0x2D0C             CMP      R5,#+12
   \   0000008A   0xD005             BEQ.N    ??TIM_CCxCmd_1
   \   0000008C   0xF44F 0x61DF      MOV      R1,#+1784
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable51
   \   00000094   0x.... 0x....      BL       assert_failed
   1785            assert_param(IS_TIM_CCX(TIM_CCx));
   \                     ??TIM_CCxCmd_1: (+1)
   \   00000098   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000009A   0x2E01             CMP      R6,#+1
   \   0000009C   0xD008             BEQ.N    ??TIM_CCxCmd_2
   \   0000009E   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000A0   0x2E00             CMP      R6,#+0
   \   000000A2   0xD005             BEQ.N    ??TIM_CCxCmd_2
   \   000000A4   0xF240 0x61F9      MOVW     R1,#+1785
   \   000000A8   0x.... 0x....      LDR.W    R0,??DataTable51
   \   000000AC   0x.... 0x....      BL       assert_failed
   1786          
   1787            tmp = CCER_CCE_SET << TIM_Channel;
   \                     ??TIM_CCxCmd_2: (+1)
   \   000000B0   0x2001             MOVS     R0,#+1
   \   000000B2   0x40A8             LSLS     R0,R0,R5
   \   000000B4   0x0007             MOVS     R7,R0
   1788          
   1789            /* Reset the CCxE Bit */
   1790            TIMx->CCER &= (uint16_t)~ tmp;
   \   000000B6   0x8C20             LDRH     R0,[R4, #+32]
   \   000000B8   0x43B8             BICS     R0,R0,R7
   \   000000BA   0x8420             STRH     R0,[R4, #+32]
   1791          
   1792            /* Set or reset the CCxE Bit */ 
   1793            TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
   \   000000BC   0x8C20             LDRH     R0,[R4, #+32]
   \   000000BE   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000C0   0xFA16 0xF105      LSLS     R1,R6,R5
   \   000000C4   0x4308             ORRS     R0,R1,R0
   \   000000C6   0x8420             STRH     R0,[R4, #+32]
   1794          }
   \   000000C8   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
   1795          
   1796          /**
   1797            * @brief  Enables or disables the TIM Capture Compare Channel xN.
   1798            * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
   1799            * @param  TIM_Channel: specifies the TIM Channel
   1800            *          This parameter can be one of the following values:
   1801            *            @arg TIM_Channel_1: TIM Channel 1
   1802            *            @arg TIM_Channel_2: TIM Channel 2
   1803            *            @arg TIM_Channel_3: TIM Channel 3
   1804            * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
   1805            *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
   1806            * @retval None
   1807            */

   \                                 In section .text, align 2, keep-with-next
   1808          void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
   1809          {
   \                     TIM_CCxNCmd: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   1810            uint16_t tmp = 0;
   \   00000008   0x2700             MOVS     R7,#+0
   1811          
   1812            /* Check the parameters */
   1813            assert_param(IS_TIM_LIST4_PERIPH(TIMx));
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable54  ;; 0x40010000
   \   0000000E   0x4284             CMP      R4,R0
   \   00000010   0xD009             BEQ.N    ??TIM_CCxNCmd_0
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable55_3  ;; 0x40010400
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xD005             BEQ.N    ??TIM_CCxNCmd_0
   \   0000001A   0xF240 0x7115      MOVW     R1,#+1813
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable51
   \   00000022   0x.... 0x....      BL       assert_failed
   1814            assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
   \                     ??TIM_CCxNCmd_0: (+1)
   \   00000026   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000028   0x2D00             CMP      R5,#+0
   \   0000002A   0xD00B             BEQ.N    ??TIM_CCxNCmd_1
   \   0000002C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000002E   0x2D04             CMP      R5,#+4
   \   00000030   0xD008             BEQ.N    ??TIM_CCxNCmd_1
   \   00000032   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000034   0x2D08             CMP      R5,#+8
   \   00000036   0xD005             BEQ.N    ??TIM_CCxNCmd_1
   \   00000038   0xF240 0x7116      MOVW     R1,#+1814
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable51
   \   00000040   0x.... 0x....      BL       assert_failed
   1815            assert_param(IS_TIM_CCXN(TIM_CCxN));
   \                     ??TIM_CCxNCmd_1: (+1)
   \   00000044   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000046   0x2E04             CMP      R6,#+4
   \   00000048   0xD008             BEQ.N    ??TIM_CCxNCmd_2
   \   0000004A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000004C   0x2E00             CMP      R6,#+0
   \   0000004E   0xD005             BEQ.N    ??TIM_CCxNCmd_2
   \   00000050   0xF240 0x7117      MOVW     R1,#+1815
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable51
   \   00000058   0x.... 0x....      BL       assert_failed
   1816          
   1817            tmp = CCER_CCNE_SET << TIM_Channel;
   \                     ??TIM_CCxNCmd_2: (+1)
   \   0000005C   0x2004             MOVS     R0,#+4
   \   0000005E   0x40A8             LSLS     R0,R0,R5
   \   00000060   0x0007             MOVS     R7,R0
   1818          
   1819            /* Reset the CCxNE Bit */
   1820            TIMx->CCER &= (uint16_t) ~tmp;
   \   00000062   0x8C20             LDRH     R0,[R4, #+32]
   \   00000064   0x43B8             BICS     R0,R0,R7
   \   00000066   0x8420             STRH     R0,[R4, #+32]
   1821          
   1822            /* Set or reset the CCxNE Bit */ 
   1823            TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
   \   00000068   0x8C20             LDRH     R0,[R4, #+32]
   \   0000006A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000006C   0xFA16 0xF105      LSLS     R1,R6,R5
   \   00000070   0x4308             ORRS     R0,R1,R0
   \   00000072   0x8420             STRH     R0,[R4, #+32]
   1824          }
   \   00000074   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
   1825          /**
   1826            * @}
   1827            */
   1828          
   1829          /** @defgroup TIM_Group3 Input Capture management functions
   1830           *  @brief    Input Capture management functions 
   1831           *
   1832          @verbatim   
   1833           ===============================================================================
   1834                                Input Capture management functions
   1835           ===============================================================================  
   1836             
   1837                 ===================================================================      
   1838                        TIM Driver: how to use it in Input Capture Mode
   1839                 =================================================================== 
   1840                 To use the Timer in Input Capture mode, the following steps are mandatory:
   1841                 
   1842                 1. Enable TIM clock using RCC_APBxPeriphClockCmd(RCC_APBxPeriph_TIMx, ENABLE) function
   1843                 
   1844                 2. Configure the TIM pins by configuring the corresponding GPIO pins
   1845                 
   1846                 2. Configure the Time base unit as described in the first part of this driver,
   1847                    if needed, else the Timer will run with the default configuration:
   1848                    - Autoreload value = 0xFFFF
   1849                    - Prescaler value = 0x0000
   1850                    - Counter mode = Up counting
   1851                    - Clock Division = TIM_CKD_DIV1
   1852                    
   1853                 3. Fill the TIM_ICInitStruct with the desired parameters including:
   1854                    - TIM Channel: TIM_Channel
   1855                    - TIM Input Capture polarity: TIM_ICPolarity
   1856                    - TIM Input Capture selection: TIM_ICSelection
   1857                    - TIM Input Capture Prescaler: TIM_ICPrescaler
   1858                    - TIM Input CApture filter value: TIM_ICFilter
   1859                 
   1860                 4. Call TIM_ICInit(TIMx, &TIM_ICInitStruct) to configure the desired channel with the 
   1861                    corresponding configuration and to measure only frequency or duty cycle of the input signal,
   1862                    or,
   1863                    Call TIM_PWMIConfig(TIMx, &TIM_ICInitStruct) to configure the desired channels with the 
   1864                    corresponding configuration and to measure the frequency and the duty cycle of the input signal
   1865                    
   1866                 5. Enable the NVIC or the DMA to read the measured frequency. 
   1867                    
   1868                 6. Enable the corresponding interrupt (or DMA request) to read the Captured value,
   1869                    using the function TIM_ITConfig(TIMx, TIM_IT_CCx) (or TIM_DMA_Cmd(TIMx, TIM_DMA_CCx)) 
   1870                 
   1871                 7. Call the TIM_Cmd(ENABLE) function to enable the TIM counter.
   1872                 
   1873                 8. Use TIM_GetCapturex(TIMx); to read the captured value.
   1874                 
   1875                 Note1: All other functions can be used separately to modify, if needed,
   1876                        a specific feature of the Timer. 
   1877          
   1878          @endverbatim
   1879            * @{
   1880            */
   1881          
   1882          /**
   1883            * @brief  Initializes the TIM peripheral according to the specified parameters
   1884            *         in the TIM_ICInitStruct.
   1885            * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
   1886            * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
   1887            *         the configuration information for the specified TIM peripheral.
   1888            * @retval None
   1889            */

   \                                 In section .text, align 2, keep-with-next
   1890          void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
   1891          {
   \                     TIM_ICInit: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1892            /* Check the parameters */
   1893            assert_param(IS_TIM_LIST1_PERIPH(TIMx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable54  ;; 0x40010000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD02F             BEQ.N    ??TIM_ICInit_0
   \   0000000E   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000012   0xD02C             BEQ.N    ??TIM_ICInit_0
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable55  ;; 0x40000400
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD028             BEQ.N    ??TIM_ICInit_0
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable55_1  ;; 0x40000800
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD024             BEQ.N    ??TIM_ICInit_0
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable55_2  ;; 0x40000c00
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD020             BEQ.N    ??TIM_ICInit_0
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable55_3  ;; 0x40010400
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD01C             BEQ.N    ??TIM_ICInit_0
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable57  ;; 0x40014000
   \   00000038   0x4284             CMP      R4,R0
   \   0000003A   0xD018             BEQ.N    ??TIM_ICInit_0
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable61  ;; 0x40014400
   \   00000040   0x4284             CMP      R4,R0
   \   00000042   0xD014             BEQ.N    ??TIM_ICInit_0
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable61_1  ;; 0x40014800
   \   00000048   0x4284             CMP      R4,R0
   \   0000004A   0xD010             BEQ.N    ??TIM_ICInit_0
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable57_1  ;; 0x40001800
   \   00000050   0x4284             CMP      R4,R0
   \   00000052   0xD00C             BEQ.N    ??TIM_ICInit_0
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable62  ;; 0x40001c00
   \   00000058   0x4284             CMP      R4,R0
   \   0000005A   0xD008             BEQ.N    ??TIM_ICInit_0
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable62_1  ;; 0x40002000
   \   00000060   0x4284             CMP      R4,R0
   \   00000062   0xD004             BEQ.N    ??TIM_ICInit_0
   \   00000064   0xF240 0x7165      MOVW     R1,#+1893
   \   00000068   0x....             LDR.N    R0,??DataTable51
   \   0000006A   0x.... 0x....      BL       assert_failed
   1894            assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
   \                     ??TIM_ICInit_0: (+1)
   \   0000006E   0x8868             LDRH     R0,[R5, #+2]
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD00A             BEQ.N    ??TIM_ICInit_1
   \   00000074   0x8868             LDRH     R0,[R5, #+2]
   \   00000076   0x2802             CMP      R0,#+2
   \   00000078   0xD007             BEQ.N    ??TIM_ICInit_1
   \   0000007A   0x8868             LDRH     R0,[R5, #+2]
   \   0000007C   0x280A             CMP      R0,#+10
   \   0000007E   0xD004             BEQ.N    ??TIM_ICInit_1
   \   00000080   0xF240 0x7166      MOVW     R1,#+1894
   \   00000084   0x....             LDR.N    R0,??DataTable51
   \   00000086   0x.... 0x....      BL       assert_failed
   1895            assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
   \                     ??TIM_ICInit_1: (+1)
   \   0000008A   0x88A8             LDRH     R0,[R5, #+4]
   \   0000008C   0x2801             CMP      R0,#+1
   \   0000008E   0xD00A             BEQ.N    ??TIM_ICInit_2
   \   00000090   0x88A8             LDRH     R0,[R5, #+4]
   \   00000092   0x2802             CMP      R0,#+2
   \   00000094   0xD007             BEQ.N    ??TIM_ICInit_2
   \   00000096   0x88A8             LDRH     R0,[R5, #+4]
   \   00000098   0x2803             CMP      R0,#+3
   \   0000009A   0xD004             BEQ.N    ??TIM_ICInit_2
   \   0000009C   0xF240 0x7167      MOVW     R1,#+1895
   \   000000A0   0x....             LDR.N    R0,??DataTable51
   \   000000A2   0x.... 0x....      BL       assert_failed
   1896            assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
   \                     ??TIM_ICInit_2: (+1)
   \   000000A6   0x88E8             LDRH     R0,[R5, #+6]
   \   000000A8   0x2800             CMP      R0,#+0
   \   000000AA   0xD00D             BEQ.N    ??TIM_ICInit_3
   \   000000AC   0x88E8             LDRH     R0,[R5, #+6]
   \   000000AE   0x2804             CMP      R0,#+4
   \   000000B0   0xD00A             BEQ.N    ??TIM_ICInit_3
   \   000000B2   0x88E8             LDRH     R0,[R5, #+6]
   \   000000B4   0x2808             CMP      R0,#+8
   \   000000B6   0xD007             BEQ.N    ??TIM_ICInit_3
   \   000000B8   0x88E8             LDRH     R0,[R5, #+6]
   \   000000BA   0x280C             CMP      R0,#+12
   \   000000BC   0xD004             BEQ.N    ??TIM_ICInit_3
   \   000000BE   0xF44F 0x61ED      MOV      R1,#+1896
   \   000000C2   0x....             LDR.N    R0,??DataTable51
   \   000000C4   0x.... 0x....      BL       assert_failed
   1897            assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
   \                     ??TIM_ICInit_3: (+1)
   \   000000C8   0x8928             LDRH     R0,[R5, #+8]
   \   000000CA   0x2810             CMP      R0,#+16
   \   000000CC   0xDB04             BLT.N    ??TIM_ICInit_4
   \   000000CE   0xF240 0x7169      MOVW     R1,#+1897
   \   000000D2   0x....             LDR.N    R0,??DataTable51
   \   000000D4   0x.... 0x....      BL       assert_failed
   1898            
   1899            if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
   \                     ??TIM_ICInit_4: (+1)
   \   000000D8   0x8828             LDRH     R0,[R5, #+0]
   \   000000DA   0x2800             CMP      R0,#+0
   \   000000DC   0xD10A             BNE.N    ??TIM_ICInit_5
   1900            {
   1901              /* TI1 Configuration */
   1902              TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
   1903                         TIM_ICInitStruct->TIM_ICSelection,
   1904                         TIM_ICInitStruct->TIM_ICFilter);
   \   000000DE   0x892B             LDRH     R3,[R5, #+8]
   \   000000E0   0x88AA             LDRH     R2,[R5, #+4]
   \   000000E2   0x8869             LDRH     R1,[R5, #+2]
   \   000000E4   0x0020             MOVS     R0,R4
   \   000000E6   0x.... 0x....      BL       TI1_Config
   1905              /* Set the Input Capture Prescaler value */
   1906              TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
   \   000000EA   0x88E9             LDRH     R1,[R5, #+6]
   \   000000EC   0x0020             MOVS     R0,R4
   \   000000EE   0x.... 0x....      BL       TIM_SetIC1Prescaler
   \   000000F2   0xE080             B.N      ??TIM_ICInit_6
   1907            }
   1908            else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
   \                     ??TIM_ICInit_5: (+1)
   \   000000F4   0x8828             LDRH     R0,[R5, #+0]
   \   000000F6   0x2804             CMP      R0,#+4
   \   000000F8   0xD12E             BNE.N    ??TIM_ICInit_7
   1909            {
   1910              /* TI2 Configuration */
   1911              assert_param(IS_TIM_LIST2_PERIPH(TIMx));
   \   000000FA   0x.... 0x....      LDR.W    R0,??DataTable54  ;; 0x40010000
   \   000000FE   0x4284             CMP      R4,R0
   \   00000100   0xD01F             BEQ.N    ??TIM_ICInit_8
   \   00000102   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000106   0xD01C             BEQ.N    ??TIM_ICInit_8
   \   00000108   0x.... 0x....      LDR.W    R0,??DataTable55  ;; 0x40000400
   \   0000010C   0x4284             CMP      R4,R0
   \   0000010E   0xD018             BEQ.N    ??TIM_ICInit_8
   \   00000110   0x.... 0x....      LDR.W    R0,??DataTable55_1  ;; 0x40000800
   \   00000114   0x4284             CMP      R4,R0
   \   00000116   0xD014             BEQ.N    ??TIM_ICInit_8
   \   00000118   0x.... 0x....      LDR.W    R0,??DataTable55_2  ;; 0x40000c00
   \   0000011C   0x4284             CMP      R4,R0
   \   0000011E   0xD010             BEQ.N    ??TIM_ICInit_8
   \   00000120   0x.... 0x....      LDR.W    R0,??DataTable55_3  ;; 0x40010400
   \   00000124   0x4284             CMP      R4,R0
   \   00000126   0xD00C             BEQ.N    ??TIM_ICInit_8
   \   00000128   0x.... 0x....      LDR.W    R0,??DataTable57  ;; 0x40014000
   \   0000012C   0x4284             CMP      R4,R0
   \   0000012E   0xD008             BEQ.N    ??TIM_ICInit_8
   \   00000130   0x.... 0x....      LDR.W    R0,??DataTable57_1  ;; 0x40001800
   \   00000134   0x4284             CMP      R4,R0
   \   00000136   0xD004             BEQ.N    ??TIM_ICInit_8
   \   00000138   0xF240 0x7177      MOVW     R1,#+1911
   \   0000013C   0x....             LDR.N    R0,??DataTable51
   \   0000013E   0x.... 0x....      BL       assert_failed
   1912              TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
   1913                         TIM_ICInitStruct->TIM_ICSelection,
   1914                         TIM_ICInitStruct->TIM_ICFilter);
   \                     ??TIM_ICInit_8: (+1)
   \   00000142   0x892B             LDRH     R3,[R5, #+8]
   \   00000144   0x88AA             LDRH     R2,[R5, #+4]
   \   00000146   0x8869             LDRH     R1,[R5, #+2]
   \   00000148   0x0020             MOVS     R0,R4
   \   0000014A   0x.... 0x....      BL       TI2_Config
   1915              /* Set the Input Capture Prescaler value */
   1916              TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
   \   0000014E   0x88E9             LDRH     R1,[R5, #+6]
   \   00000150   0x0020             MOVS     R0,R4
   \   00000152   0x.... 0x....      BL       TIM_SetIC2Prescaler
   \   00000156   0xE04E             B.N      ??TIM_ICInit_6
   1917            }
   1918            else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
   \                     ??TIM_ICInit_7: (+1)
   \   00000158   0x8828             LDRH     R0,[R5, #+0]
   \   0000015A   0x2808             CMP      R0,#+8
   \   0000015C   0xD126             BNE.N    ??TIM_ICInit_9
   1919            {
   1920              /* TI3 Configuration */
   1921              assert_param(IS_TIM_LIST3_PERIPH(TIMx));
   \   0000015E   0x.... 0x....      LDR.W    R0,??DataTable54  ;; 0x40010000
   \   00000162   0x4284             CMP      R4,R0
   \   00000164   0xD017             BEQ.N    ??TIM_ICInit_10
   \   00000166   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   0000016A   0xD014             BEQ.N    ??TIM_ICInit_10
   \   0000016C   0x.... 0x....      LDR.W    R0,??DataTable55  ;; 0x40000400
   \   00000170   0x4284             CMP      R4,R0
   \   00000172   0xD010             BEQ.N    ??TIM_ICInit_10
   \   00000174   0x.... 0x....      LDR.W    R0,??DataTable55_1  ;; 0x40000800
   \   00000178   0x4284             CMP      R4,R0
   \   0000017A   0xD00C             BEQ.N    ??TIM_ICInit_10
   \   0000017C   0x.... 0x....      LDR.W    R0,??DataTable55_2  ;; 0x40000c00
   \   00000180   0x4284             CMP      R4,R0
   \   00000182   0xD008             BEQ.N    ??TIM_ICInit_10
   \   00000184   0x.... 0x....      LDR.W    R0,??DataTable55_3  ;; 0x40010400
   \   00000188   0x4284             CMP      R4,R0
   \   0000018A   0xD004             BEQ.N    ??TIM_ICInit_10
   \   0000018C   0xF240 0x7181      MOVW     R1,#+1921
   \   00000190   0x....             LDR.N    R0,??DataTable51
   \   00000192   0x.... 0x....      BL       assert_failed
   1922              TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
   1923                         TIM_ICInitStruct->TIM_ICSelection,
   1924                         TIM_ICInitStruct->TIM_ICFilter);
   \                     ??TIM_ICInit_10: (+1)
   \   00000196   0x892B             LDRH     R3,[R5, #+8]
   \   00000198   0x88AA             LDRH     R2,[R5, #+4]
   \   0000019A   0x8869             LDRH     R1,[R5, #+2]
   \   0000019C   0x0020             MOVS     R0,R4
   \   0000019E   0x.... 0x....      BL       TI3_Config
   1925              /* Set the Input Capture Prescaler value */
   1926              TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
   \   000001A2   0x88E9             LDRH     R1,[R5, #+6]
   \   000001A4   0x0020             MOVS     R0,R4
   \   000001A6   0x.... 0x....      BL       TIM_SetIC3Prescaler
   \   000001AA   0xE024             B.N      ??TIM_ICInit_6
   1927            }
   1928            else
   1929            {
   1930              /* TI4 Configuration */
   1931              assert_param(IS_TIM_LIST3_PERIPH(TIMx));
   \                     ??TIM_ICInit_9: (+1)
   \   000001AC   0x....             LDR.N    R0,??DataTable54  ;; 0x40010000
   \   000001AE   0x4284             CMP      R4,R0
   \   000001B0   0xD017             BEQ.N    ??TIM_ICInit_11
   \   000001B2   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   000001B6   0xD014             BEQ.N    ??TIM_ICInit_11
   \   000001B8   0x.... 0x....      LDR.W    R0,??DataTable55  ;; 0x40000400
   \   000001BC   0x4284             CMP      R4,R0
   \   000001BE   0xD010             BEQ.N    ??TIM_ICInit_11
   \   000001C0   0x.... 0x....      LDR.W    R0,??DataTable55_1  ;; 0x40000800
   \   000001C4   0x4284             CMP      R4,R0
   \   000001C6   0xD00C             BEQ.N    ??TIM_ICInit_11
   \   000001C8   0x.... 0x....      LDR.W    R0,??DataTable55_2  ;; 0x40000c00
   \   000001CC   0x4284             CMP      R4,R0
   \   000001CE   0xD008             BEQ.N    ??TIM_ICInit_11
   \   000001D0   0x.... 0x....      LDR.W    R0,??DataTable55_3  ;; 0x40010400
   \   000001D4   0x4284             CMP      R4,R0
   \   000001D6   0xD004             BEQ.N    ??TIM_ICInit_11
   \   000001D8   0xF240 0x718B      MOVW     R1,#+1931
   \   000001DC   0x....             LDR.N    R0,??DataTable51
   \   000001DE   0x.... 0x....      BL       assert_failed
   1932              TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
   1933                         TIM_ICInitStruct->TIM_ICSelection,
   1934                         TIM_ICInitStruct->TIM_ICFilter);
   \                     ??TIM_ICInit_11: (+1)
   \   000001E2   0x892B             LDRH     R3,[R5, #+8]
   \   000001E4   0x88AA             LDRH     R2,[R5, #+4]
   \   000001E6   0x8869             LDRH     R1,[R5, #+2]
   \   000001E8   0x0020             MOVS     R0,R4
   \   000001EA   0x.... 0x....      BL       TI4_Config
   1935              /* Set the Input Capture Prescaler value */
   1936              TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
   \   000001EE   0x88E9             LDRH     R1,[R5, #+6]
   \   000001F0   0x0020             MOVS     R0,R4
   \   000001F2   0x.... 0x....      BL       TIM_SetIC4Prescaler
   1937            }
   1938          }
   \                     ??TIM_ICInit_6: (+1)
   \   000001F6   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   1939          
   1940          /**
   1941            * @brief  Fills each TIM_ICInitStruct member with its default value.
   1942            * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
   1943            *         be initialized.
   1944            * @retval None
   1945            */

   \                                 In section .text, align 2, keep-with-next
   1946          void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
   1947          {
   1948            /* Set the default configuration */
   1949            TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
   \                     TIM_ICStructInit: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x8001             STRH     R1,[R0, #+0]
   1950            TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x8041             STRH     R1,[R0, #+2]
   1951            TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
   \   00000008   0x2101             MOVS     R1,#+1
   \   0000000A   0x8081             STRH     R1,[R0, #+4]
   1952            TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x80C1             STRH     R1,[R0, #+6]
   1953            TIM_ICInitStruct->TIM_ICFilter = 0x00;
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x8101             STRH     R1,[R0, #+8]
   1954          }
   \   00000014   0x4770             BX       LR               ;; return
   1955          
   1956          /**
   1957            * @brief  Configures the TIM peripheral according to the specified parameters
   1958            *         in the TIM_ICInitStruct to measure an external PWM signal.
   1959            * @param  TIMx: where x can be  1, 2, 3, 4, 5,8, 9 or 12 to select the TIM 
   1960            *         peripheral.
   1961            * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
   1962            *         the configuration information for the specified TIM peripheral.
   1963            * @retval None
   1964            */

   \                                 In section .text, align 2, keep-with-next
   1965          void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
   1966          {
   \                     TIM_PWMIConfig: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1967            uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
   \   00000006   0x2600             MOVS     R6,#+0
   1968            uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
   \   00000008   0x2701             MOVS     R7,#+1
   1969          
   1970            /* Check the parameters */
   1971            assert_param(IS_TIM_LIST2_PERIPH(TIMx));
   \   0000000A   0x....             LDR.N    R0,??DataTable54  ;; 0x40010000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD01B             BEQ.N    ??TIM_PWMIConfig_0
   \   00000010   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000014   0xD018             BEQ.N    ??TIM_PWMIConfig_0
   \   00000016   0x....             LDR.N    R0,??DataTable55  ;; 0x40000400
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD015             BEQ.N    ??TIM_PWMIConfig_0
   \   0000001C   0x....             LDR.N    R0,??DataTable55_1  ;; 0x40000800
   \   0000001E   0x4284             CMP      R4,R0
   \   00000020   0xD012             BEQ.N    ??TIM_PWMIConfig_0
   \   00000022   0x....             LDR.N    R0,??DataTable55_2  ;; 0x40000c00
   \   00000024   0x4284             CMP      R4,R0
   \   00000026   0xD00F             BEQ.N    ??TIM_PWMIConfig_0
   \   00000028   0x....             LDR.N    R0,??DataTable55_3  ;; 0x40010400
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD00C             BEQ.N    ??TIM_PWMIConfig_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable57  ;; 0x40014000
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD008             BEQ.N    ??TIM_PWMIConfig_0
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable57_1  ;; 0x40001800
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD004             BEQ.N    ??TIM_PWMIConfig_0
   \   0000003E   0xF240 0x71B3      MOVW     R1,#+1971
   \   00000042   0x....             LDR.N    R0,??DataTable51
   \   00000044   0x.... 0x....      BL       assert_failed
   1972          
   1973            /* Select the Opposite Input Polarity */
   1974            if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
   \                     ??TIM_PWMIConfig_0: (+1)
   \   00000048   0x8868             LDRH     R0,[R5, #+2]
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD102             BNE.N    ??TIM_PWMIConfig_1
   1975            {
   1976              icoppositepolarity = TIM_ICPolarity_Falling;
   \   0000004E   0x2002             MOVS     R0,#+2
   \   00000050   0x0006             MOVS     R6,R0
   \   00000052   0xE001             B.N      ??TIM_PWMIConfig_2
   1977            }
   1978            else
   1979            {
   1980              icoppositepolarity = TIM_ICPolarity_Rising;
   \                     ??TIM_PWMIConfig_1: (+1)
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x0006             MOVS     R6,R0
   1981            }
   1982            /* Select the Opposite Input */
   1983            if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
   \                     ??TIM_PWMIConfig_2: (+1)
   \   00000058   0x88A8             LDRH     R0,[R5, #+4]
   \   0000005A   0x2801             CMP      R0,#+1
   \   0000005C   0xD102             BNE.N    ??TIM_PWMIConfig_3
   1984            {
   1985              icoppositeselection = TIM_ICSelection_IndirectTI;
   \   0000005E   0x2002             MOVS     R0,#+2
   \   00000060   0x0007             MOVS     R7,R0
   \   00000062   0xE001             B.N      ??TIM_PWMIConfig_4
   1986            }
   1987            else
   1988            {
   1989              icoppositeselection = TIM_ICSelection_DirectTI;
   \                     ??TIM_PWMIConfig_3: (+1)
   \   00000064   0x2001             MOVS     R0,#+1
   \   00000066   0x0007             MOVS     R7,R0
   1990            }
   1991            if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
   \                     ??TIM_PWMIConfig_4: (+1)
   \   00000068   0x8828             LDRH     R0,[R5, #+0]
   \   0000006A   0x2800             CMP      R0,#+0
   \   0000006C   0xD116             BNE.N    ??TIM_PWMIConfig_5
   1992            {
   1993              /* TI1 Configuration */
   1994              TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
   1995                         TIM_ICInitStruct->TIM_ICFilter);
   \   0000006E   0x892B             LDRH     R3,[R5, #+8]
   \   00000070   0x88AA             LDRH     R2,[R5, #+4]
   \   00000072   0x8869             LDRH     R1,[R5, #+2]
   \   00000074   0x0020             MOVS     R0,R4
   \   00000076   0x.... 0x....      BL       TI1_Config
   1996              /* Set the Input Capture Prescaler value */
   1997              TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
   \   0000007A   0x88E9             LDRH     R1,[R5, #+6]
   \   0000007C   0x0020             MOVS     R0,R4
   \   0000007E   0x.... 0x....      BL       TIM_SetIC1Prescaler
   1998              /* TI2 Configuration */
   1999              TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
   \   00000082   0x892B             LDRH     R3,[R5, #+8]
   \   00000084   0x003A             MOVS     R2,R7
   \   00000086   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000088   0x0031             MOVS     R1,R6
   \   0000008A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000008C   0x0020             MOVS     R0,R4
   \   0000008E   0x.... 0x....      BL       TI2_Config
   2000              /* Set the Input Capture Prescaler value */
   2001              TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
   \   00000092   0x88E9             LDRH     R1,[R5, #+6]
   \   00000094   0x0020             MOVS     R0,R4
   \   00000096   0x.... 0x....      BL       TIM_SetIC2Prescaler
   \   0000009A   0xE015             B.N      ??TIM_PWMIConfig_6
   2002            }
   2003            else
   2004            { 
   2005              /* TI2 Configuration */
   2006              TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
   2007                         TIM_ICInitStruct->TIM_ICFilter);
   \                     ??TIM_PWMIConfig_5: (+1)
   \   0000009C   0x892B             LDRH     R3,[R5, #+8]
   \   0000009E   0x88AA             LDRH     R2,[R5, #+4]
   \   000000A0   0x8869             LDRH     R1,[R5, #+2]
   \   000000A2   0x0020             MOVS     R0,R4
   \   000000A4   0x.... 0x....      BL       TI2_Config
   2008              /* Set the Input Capture Prescaler value */
   2009              TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
   \   000000A8   0x88E9             LDRH     R1,[R5, #+6]
   \   000000AA   0x0020             MOVS     R0,R4
   \   000000AC   0x.... 0x....      BL       TIM_SetIC2Prescaler
   2010              /* TI1 Configuration */
   2011              TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
   \   000000B0   0x892B             LDRH     R3,[R5, #+8]
   \   000000B2   0x003A             MOVS     R2,R7
   \   000000B4   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000B6   0x0031             MOVS     R1,R6
   \   000000B8   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000BA   0x0020             MOVS     R0,R4
   \   000000BC   0x.... 0x....      BL       TI1_Config
   2012              /* Set the Input Capture Prescaler value */
   2013              TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
   \   000000C0   0x88E9             LDRH     R1,[R5, #+6]
   \   000000C2   0x0020             MOVS     R0,R4
   \   000000C4   0x.... 0x....      BL       TIM_SetIC1Prescaler
   2014            }
   2015          }
   \                     ??TIM_PWMIConfig_6: (+1)
   \   000000C8   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
   2016          
   2017          /**
   2018            * @brief  Gets the TIMx Input Capture 1 value.
   2019            * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
   2020            * @retval Capture Compare 1 Register value.
   2021            */

   \                                 In section .text, align 2, keep-with-next
   2022          uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
   2023          {
   \                     TIM_GetCapture1: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   2024            /* Check the parameters */
   2025            assert_param(IS_TIM_LIST1_PERIPH(TIMx));
   \   00000004   0x....             LDR.N    R0,??DataTable54  ;; 0x40010000
   \   00000006   0x4284             CMP      R4,R0
   \   00000008   0xD029             BEQ.N    ??TIM_GetCapture1_0
   \   0000000A   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   0000000E   0xD026             BEQ.N    ??TIM_GetCapture1_0
   \   00000010   0x....             LDR.N    R0,??DataTable55  ;; 0x40000400
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD023             BEQ.N    ??TIM_GetCapture1_0
   \   00000016   0x....             LDR.N    R0,??DataTable55_1  ;; 0x40000800
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD020             BEQ.N    ??TIM_GetCapture1_0
   \   0000001C   0x....             LDR.N    R0,??DataTable55_2  ;; 0x40000c00
   \   0000001E   0x4284             CMP      R4,R0
   \   00000020   0xD01D             BEQ.N    ??TIM_GetCapture1_0
   \   00000022   0x....             LDR.N    R0,??DataTable55_3  ;; 0x40010400
   \   00000024   0x4284             CMP      R4,R0
   \   00000026   0xD01A             BEQ.N    ??TIM_GetCapture1_0
   \   00000028   0x....             LDR.N    R0,??DataTable57  ;; 0x40014000
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD017             BEQ.N    ??TIM_GetCapture1_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable61  ;; 0x40014400
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD013             BEQ.N    ??TIM_GetCapture1_0
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable61_1  ;; 0x40014800
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD00F             BEQ.N    ??TIM_GetCapture1_0
   \   0000003E   0x....             LDR.N    R0,??DataTable57_1  ;; 0x40001800
   \   00000040   0x4284             CMP      R4,R0
   \   00000042   0xD00C             BEQ.N    ??TIM_GetCapture1_0
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable62  ;; 0x40001c00
   \   00000048   0x4284             CMP      R4,R0
   \   0000004A   0xD008             BEQ.N    ??TIM_GetCapture1_0
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable62_1  ;; 0x40002000
   \   00000050   0x4284             CMP      R4,R0
   \   00000052   0xD004             BEQ.N    ??TIM_GetCapture1_0
   \   00000054   0xF240 0x71E9      MOVW     R1,#+2025
   \   00000058   0x....             LDR.N    R0,??DataTable51
   \   0000005A   0x.... 0x....      BL       assert_failed
   2026          
   2027            /* Get the Capture 1 Register value */
   2028            return TIMx->CCR1;
   \                     ??TIM_GetCapture1_0: (+1)
   \   0000005E   0x6B60             LDR      R0,[R4, #+52]
   \   00000060   0xBD10             POP      {R4,PC}          ;; return
   2029          }
   2030          
   2031          /**
   2032            * @brief  Gets the TIMx Input Capture 2 value.
   2033            * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
   2034            *         peripheral.
   2035            * @retval Capture Compare 2 Register value.
   2036            */

   \                                 In section .text, align 2, keep-with-next
   2037          uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
   2038          {
   \                     TIM_GetCapture2: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   2039            /* Check the parameters */
   2040            assert_param(IS_TIM_LIST2_PERIPH(TIMx));
   \   00000004   0x....             LDR.N    R0,??DataTable54  ;; 0x40010000
   \   00000006   0x4284             CMP      R4,R0
   \   00000008   0xD019             BEQ.N    ??TIM_GetCapture2_0
   \   0000000A   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   0000000E   0xD016             BEQ.N    ??TIM_GetCapture2_0
   \   00000010   0x....             LDR.N    R0,??DataTable55  ;; 0x40000400
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD013             BEQ.N    ??TIM_GetCapture2_0
   \   00000016   0x....             LDR.N    R0,??DataTable55_1  ;; 0x40000800
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD010             BEQ.N    ??TIM_GetCapture2_0
   \   0000001C   0x....             LDR.N    R0,??DataTable55_2  ;; 0x40000c00
   \   0000001E   0x4284             CMP      R4,R0
   \   00000020   0xD00D             BEQ.N    ??TIM_GetCapture2_0
   \   00000022   0x....             LDR.N    R0,??DataTable55_3  ;; 0x40010400
   \   00000024   0x4284             CMP      R4,R0
   \   00000026   0xD00A             BEQ.N    ??TIM_GetCapture2_0
   \   00000028   0x....             LDR.N    R0,??DataTable57  ;; 0x40014000
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD007             BEQ.N    ??TIM_GetCapture2_0
   \   0000002E   0x....             LDR.N    R0,??DataTable57_1  ;; 0x40001800
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD004             BEQ.N    ??TIM_GetCapture2_0
   \   00000034   0xF44F 0x61FF      MOV      R1,#+2040
   \   00000038   0x....             LDR.N    R0,??DataTable51
   \   0000003A   0x.... 0x....      BL       assert_failed
   2041          
   2042            /* Get the Capture 2 Register value */
   2043            return TIMx->CCR2;
   \                     ??TIM_GetCapture2_0: (+1)
   \   0000003E   0x6BA0             LDR      R0,[R4, #+56]
   \   00000040   0xBD10             POP      {R4,PC}          ;; return
   2044          }
   2045          
   2046          /**
   2047            * @brief  Gets the TIMx Input Capture 3 value.
   2048            * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
   2049            * @retval Capture Compare 3 Register value.
   2050            */

   \                                 In section .text, align 2, keep-with-next
   2051          uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
   2052          {
   \                     TIM_GetCapture3: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   2053            /* Check the parameters */
   2054            assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
   \   00000004   0x....             LDR.N    R0,??DataTable54  ;; 0x40010000
   \   00000006   0x4284             CMP      R4,R0
   \   00000008   0xD014             BEQ.N    ??TIM_GetCapture3_0
   \   0000000A   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   0000000E   0xD011             BEQ.N    ??TIM_GetCapture3_0
   \   00000010   0x....             LDR.N    R0,??DataTable55  ;; 0x40000400
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD00E             BEQ.N    ??TIM_GetCapture3_0
   \   00000016   0x....             LDR.N    R0,??DataTable55_1  ;; 0x40000800
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD00B             BEQ.N    ??TIM_GetCapture3_0
   \   0000001C   0x....             LDR.N    R0,??DataTable55_2  ;; 0x40000c00
   \   0000001E   0x4284             CMP      R4,R0
   \   00000020   0xD008             BEQ.N    ??TIM_GetCapture3_0
   \   00000022   0x....             LDR.N    R0,??DataTable55_3  ;; 0x40010400
   \   00000024   0x4284             CMP      R4,R0
   \   00000026   0xD005             BEQ.N    ??TIM_GetCapture3_0
   \   00000028   0xF640 0x0106      MOVW     R1,#+2054
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable72
   \   00000030   0x.... 0x....      BL       assert_failed
   2055          
   2056            /* Get the Capture 3 Register value */
   2057            return TIMx->CCR3;
   \                     ??TIM_GetCapture3_0: (+1)
   \   00000034   0x6BE0             LDR      R0,[R4, #+60]
   \   00000036   0xBD10             POP      {R4,PC}          ;; return
   2058          }
   2059          
   2060          /**
   2061            * @brief  Gets the TIMx Input Capture 4 value.
   2062            * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
   2063            * @retval Capture Compare 4 Register value.
   2064            */

   \                                 In section .text, align 2, keep-with-next
   2065          uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
   2066          {
   \                     TIM_GetCapture4: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   2067            /* Check the parameters */
   2068            assert_param(IS_TIM_LIST3_PERIPH(TIMx));
   \   00000004   0x....             LDR.N    R0,??DataTable54  ;; 0x40010000
   \   00000006   0x4284             CMP      R4,R0
   \   00000008   0xD014             BEQ.N    ??TIM_GetCapture4_0
   \   0000000A   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   0000000E   0xD011             BEQ.N    ??TIM_GetCapture4_0
   \   00000010   0x....             LDR.N    R0,??DataTable55  ;; 0x40000400
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD00E             BEQ.N    ??TIM_GetCapture4_0
   \   00000016   0x....             LDR.N    R0,??DataTable55_1  ;; 0x40000800
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD00B             BEQ.N    ??TIM_GetCapture4_0
   \   0000001C   0x....             LDR.N    R0,??DataTable55_2  ;; 0x40000c00
   \   0000001E   0x4284             CMP      R4,R0
   \   00000020   0xD008             BEQ.N    ??TIM_GetCapture4_0
   \   00000022   0x....             LDR.N    R0,??DataTable55_3  ;; 0x40010400
   \   00000024   0x4284             CMP      R4,R0
   \   00000026   0xD005             BEQ.N    ??TIM_GetCapture4_0
   \   00000028   0xF640 0x0114      MOVW     R1,#+2068
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable72
   \   00000030   0x.... 0x....      BL       assert_failed
   2069          
   2070            /* Get the Capture 4 Register value */
   2071            return TIMx->CCR4;
   \                     ??TIM_GetCapture4_0: (+1)
   \   00000034   0x6C20             LDR      R0,[R4, #+64]
   \   00000036   0xBD10             POP      {R4,PC}          ;; return
   2072          }
   2073          
   2074          /**
   2075            * @brief  Sets the TIMx Input Capture 1 prescaler.
   2076            * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
   2077            * @param  TIM_ICPSC: specifies the Input Capture1 prescaler new value.
   2078            *          This parameter can be one of the following values:
   2079            *            @arg TIM_ICPSC_DIV1: no prescaler
   2080            *            @arg TIM_ICPSC_DIV2: capture is done once every 2 events
   2081            *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
   2082            *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
   2083            * @retval None
   2084            */

   \                                 In section .text, align 2, keep-with-next
   2085          void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
   2086          {
   \                     TIM_SetIC1Prescaler: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   2087            /* Check the parameters */
   2088            assert_param(IS_TIM_LIST1_PERIPH(TIMx));
   \   00000006   0x....             LDR.N    R0,??DataTable54  ;; 0x40010000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD02A             BEQ.N    ??TIM_SetIC1Prescaler_0
   \   0000000C   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000010   0xD027             BEQ.N    ??TIM_SetIC1Prescaler_0
   \   00000012   0x....             LDR.N    R0,??DataTable55  ;; 0x40000400
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD024             BEQ.N    ??TIM_SetIC1Prescaler_0
   \   00000018   0x....             LDR.N    R0,??DataTable55_1  ;; 0x40000800
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD021             BEQ.N    ??TIM_SetIC1Prescaler_0
   \   0000001E   0x....             LDR.N    R0,??DataTable55_2  ;; 0x40000c00
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD01E             BEQ.N    ??TIM_SetIC1Prescaler_0
   \   00000024   0x....             LDR.N    R0,??DataTable55_3  ;; 0x40010400
   \   00000026   0x4284             CMP      R4,R0
   \   00000028   0xD01B             BEQ.N    ??TIM_SetIC1Prescaler_0
   \   0000002A   0x....             LDR.N    R0,??DataTable57  ;; 0x40014000
   \   0000002C   0x4284             CMP      R4,R0
   \   0000002E   0xD018             BEQ.N    ??TIM_SetIC1Prescaler_0
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable61  ;; 0x40014400
   \   00000034   0x4284             CMP      R4,R0
   \   00000036   0xD014             BEQ.N    ??TIM_SetIC1Prescaler_0
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable61_1  ;; 0x40014800
   \   0000003C   0x4284             CMP      R4,R0
   \   0000003E   0xD010             BEQ.N    ??TIM_SetIC1Prescaler_0
   \   00000040   0x....             LDR.N    R0,??DataTable57_1  ;; 0x40001800
   \   00000042   0x4284             CMP      R4,R0
   \   00000044   0xD00D             BEQ.N    ??TIM_SetIC1Prescaler_0
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable62  ;; 0x40001c00
   \   0000004A   0x4284             CMP      R4,R0
   \   0000004C   0xD009             BEQ.N    ??TIM_SetIC1Prescaler_0
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable62_1  ;; 0x40002000
   \   00000052   0x4284             CMP      R4,R0
   \   00000054   0xD005             BEQ.N    ??TIM_SetIC1Prescaler_0
   \   00000056   0xF640 0x0128      MOVW     R1,#+2088
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable72
   \   0000005E   0x.... 0x....      BL       assert_failed
   2089            assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
   \                     ??TIM_SetIC1Prescaler_0: (+1)
   \   00000062   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000064   0x2D00             CMP      R5,#+0
   \   00000066   0xD00E             BEQ.N    ??TIM_SetIC1Prescaler_1
   \   00000068   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000006A   0x2D04             CMP      R5,#+4
   \   0000006C   0xD00B             BEQ.N    ??TIM_SetIC1Prescaler_1
   \   0000006E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000070   0x2D08             CMP      R5,#+8
   \   00000072   0xD008             BEQ.N    ??TIM_SetIC1Prescaler_1
   \   00000074   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000076   0x2D0C             CMP      R5,#+12
   \   00000078   0xD005             BEQ.N    ??TIM_SetIC1Prescaler_1
   \   0000007A   0xF640 0x0129      MOVW     R1,#+2089
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable72
   \   00000082   0x.... 0x....      BL       assert_failed
   2090          
   2091            /* Reset the IC1PSC Bits */
   2092            TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
   \                     ??TIM_SetIC1Prescaler_1: (+1)
   \   00000086   0x8B20             LDRH     R0,[R4, #+24]
   \   00000088   0xF64F 0x71F3      MOVW     R1,#+65523
   \   0000008C   0x4008             ANDS     R0,R1,R0
   \   0000008E   0x8320             STRH     R0,[R4, #+24]
   2093          
   2094            /* Set the IC1PSC value */
   2095            TIMx->CCMR1 |= TIM_ICPSC;
   \   00000090   0x8B20             LDRH     R0,[R4, #+24]
   \   00000092   0x4328             ORRS     R0,R5,R0
   \   00000094   0x8320             STRH     R0,[R4, #+24]
   2096          }
   \   00000096   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   2097          
   2098          /**
   2099            * @brief  Sets the TIMx Input Capture 2 prescaler.
   2100            * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
   2101            *         peripheral.
   2102            * @param  TIM_ICPSC: specifies the Input Capture2 prescaler new value.
   2103            *          This parameter can be one of the following values:
   2104            *            @arg TIM_ICPSC_DIV1: no prescaler
   2105            *            @arg TIM_ICPSC_DIV2: capture is done once every 2 events
   2106            *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
   2107            *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
   2108            * @retval None
   2109            */

   \                                 In section .text, align 2, keep-with-next
   2110          void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
   2111          {
   \                     TIM_SetIC2Prescaler: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   2112            /* Check the parameters */
   2113            assert_param(IS_TIM_LIST2_PERIPH(TIMx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable67  ;; 0x40010000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD01A             BEQ.N    ??TIM_SetIC2Prescaler_0
   \   0000000E   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000012   0xD017             BEQ.N    ??TIM_SetIC2Prescaler_0
   \   00000014   0x....             LDR.N    R0,??DataTable55  ;; 0x40000400
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xD014             BEQ.N    ??TIM_SetIC2Prescaler_0
   \   0000001A   0x....             LDR.N    R0,??DataTable55_1  ;; 0x40000800
   \   0000001C   0x4284             CMP      R4,R0
   \   0000001E   0xD011             BEQ.N    ??TIM_SetIC2Prescaler_0
   \   00000020   0x....             LDR.N    R0,??DataTable55_2  ;; 0x40000c00
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD00E             BEQ.N    ??TIM_SetIC2Prescaler_0
   \   00000026   0x....             LDR.N    R0,??DataTable55_3  ;; 0x40010400
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD00B             BEQ.N    ??TIM_SetIC2Prescaler_0
   \   0000002C   0x....             LDR.N    R0,??DataTable57  ;; 0x40014000
   \   0000002E   0x4284             CMP      R4,R0
   \   00000030   0xD008             BEQ.N    ??TIM_SetIC2Prescaler_0
   \   00000032   0x....             LDR.N    R0,??DataTable57_1  ;; 0x40001800
   \   00000034   0x4284             CMP      R4,R0
   \   00000036   0xD005             BEQ.N    ??TIM_SetIC2Prescaler_0
   \   00000038   0xF640 0x0141      MOVW     R1,#+2113
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable72
   \   00000040   0x.... 0x....      BL       assert_failed
   2114            assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
   \                     ??TIM_SetIC2Prescaler_0: (+1)
   \   00000044   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000046   0x2D00             CMP      R5,#+0
   \   00000048   0xD00E             BEQ.N    ??TIM_SetIC2Prescaler_1
   \   0000004A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004C   0x2D04             CMP      R5,#+4
   \   0000004E   0xD00B             BEQ.N    ??TIM_SetIC2Prescaler_1
   \   00000050   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000052   0x2D08             CMP      R5,#+8
   \   00000054   0xD008             BEQ.N    ??TIM_SetIC2Prescaler_1
   \   00000056   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000058   0x2D0C             CMP      R5,#+12
   \   0000005A   0xD005             BEQ.N    ??TIM_SetIC2Prescaler_1
   \   0000005C   0xF640 0x0142      MOVW     R1,#+2114
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable72
   \   00000064   0x.... 0x....      BL       assert_failed
   2115          
   2116            /* Reset the IC2PSC Bits */
   2117            TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
   \                     ??TIM_SetIC2Prescaler_1: (+1)
   \   00000068   0x8B20             LDRH     R0,[R4, #+24]
   \   0000006A   0xF24F 0x31FF      MOVW     R1,#+62463
   \   0000006E   0x4008             ANDS     R0,R1,R0
   \   00000070   0x8320             STRH     R0,[R4, #+24]
   2118          
   2119            /* Set the IC2PSC value */
   2120            TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
   \   00000072   0x8B20             LDRH     R0,[R4, #+24]
   \   00000074   0xEA50 0x2005      ORRS     R0,R0,R5, LSL #+8
   \   00000078   0x8320             STRH     R0,[R4, #+24]
   2121          }
   \   0000007A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   2122          
   2123          /**
   2124            * @brief  Sets the TIMx Input Capture 3 prescaler.
   2125            * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
   2126            * @param  TIM_ICPSC: specifies the Input Capture3 prescaler new value.
   2127            *          This parameter can be one of the following values:
   2128            *            @arg TIM_ICPSC_DIV1: no prescaler
   2129            *            @arg TIM_ICPSC_DIV2: capture is done once every 2 events
   2130            *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
   2131            *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
   2132            * @retval None
   2133            */

   \                                 In section .text, align 2, keep-with-next
   2134          void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
   2135          {
   \                     TIM_SetIC3Prescaler: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   2136            /* Check the parameters */
   2137            assert_param(IS_TIM_LIST3_PERIPH(TIMx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable67  ;; 0x40010000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD018             BEQ.N    ??TIM_SetIC3Prescaler_0
   \   0000000E   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000012   0xD015             BEQ.N    ??TIM_SetIC3Prescaler_0
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable68  ;; 0x40000400
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD011             BEQ.N    ??TIM_SetIC3Prescaler_0
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable68_1  ;; 0x40000800
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD00D             BEQ.N    ??TIM_SetIC3Prescaler_0
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable68_2  ;; 0x40000c00
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD009             BEQ.N    ??TIM_SetIC3Prescaler_0
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable69  ;; 0x40010400
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD005             BEQ.N    ??TIM_SetIC3Prescaler_0
   \   00000034   0xF640 0x0159      MOVW     R1,#+2137
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable72
   \   0000003C   0x.... 0x....      BL       assert_failed
   2138            assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
   \                     ??TIM_SetIC3Prescaler_0: (+1)
   \   00000040   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000042   0x2D00             CMP      R5,#+0
   \   00000044   0xD00E             BEQ.N    ??TIM_SetIC3Prescaler_1
   \   00000046   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000048   0x2D04             CMP      R5,#+4
   \   0000004A   0xD00B             BEQ.N    ??TIM_SetIC3Prescaler_1
   \   0000004C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004E   0x2D08             CMP      R5,#+8
   \   00000050   0xD008             BEQ.N    ??TIM_SetIC3Prescaler_1
   \   00000052   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000054   0x2D0C             CMP      R5,#+12
   \   00000056   0xD005             BEQ.N    ??TIM_SetIC3Prescaler_1
   \   00000058   0xF640 0x015A      MOVW     R1,#+2138
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable72
   \   00000060   0x.... 0x....      BL       assert_failed
   2139          
   2140            /* Reset the IC3PSC Bits */
   2141            TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
   \                     ??TIM_SetIC3Prescaler_1: (+1)
   \   00000064   0x8BA0             LDRH     R0,[R4, #+28]
   \   00000066   0xF64F 0x71F3      MOVW     R1,#+65523
   \   0000006A   0x4008             ANDS     R0,R1,R0
   \   0000006C   0x83A0             STRH     R0,[R4, #+28]
   2142          
   2143            /* Set the IC3PSC value */
   2144            TIMx->CCMR2 |= TIM_ICPSC;
   \   0000006E   0x8BA0             LDRH     R0,[R4, #+28]
   \   00000070   0x4328             ORRS     R0,R5,R0
   \   00000072   0x83A0             STRH     R0,[R4, #+28]
   2145          }
   \   00000074   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   2146          
   2147          /**
   2148            * @brief  Sets the TIMx Input Capture 4 prescaler.
   2149            * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
   2150            * @param  TIM_ICPSC: specifies the Input Capture4 prescaler new value.
   2151            *          This parameter can be one of the following values:
   2152            *            @arg TIM_ICPSC_DIV1: no prescaler
   2153            *            @arg TIM_ICPSC_DIV2: capture is done once every 2 events
   2154            *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
   2155            *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
   2156            * @retval None
   2157            */

   \                                 In section .text, align 2, keep-with-next
   2158          void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
   2159          {  
   \                     TIM_SetIC4Prescaler: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   2160            /* Check the parameters */
   2161            assert_param(IS_TIM_LIST3_PERIPH(TIMx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable67  ;; 0x40010000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD018             BEQ.N    ??TIM_SetIC4Prescaler_0
   \   0000000E   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000012   0xD015             BEQ.N    ??TIM_SetIC4Prescaler_0
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable68  ;; 0x40000400
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD011             BEQ.N    ??TIM_SetIC4Prescaler_0
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable68_1  ;; 0x40000800
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD00D             BEQ.N    ??TIM_SetIC4Prescaler_0
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable68_2  ;; 0x40000c00
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD009             BEQ.N    ??TIM_SetIC4Prescaler_0
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable69  ;; 0x40010400
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD005             BEQ.N    ??TIM_SetIC4Prescaler_0
   \   00000034   0xF640 0x0171      MOVW     R1,#+2161
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable72
   \   0000003C   0x.... 0x....      BL       assert_failed
   2162            assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
   \                     ??TIM_SetIC4Prescaler_0: (+1)
   \   00000040   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000042   0x2D00             CMP      R5,#+0
   \   00000044   0xD00E             BEQ.N    ??TIM_SetIC4Prescaler_1
   \   00000046   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000048   0x2D04             CMP      R5,#+4
   \   0000004A   0xD00B             BEQ.N    ??TIM_SetIC4Prescaler_1
   \   0000004C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004E   0x2D08             CMP      R5,#+8
   \   00000050   0xD008             BEQ.N    ??TIM_SetIC4Prescaler_1
   \   00000052   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000054   0x2D0C             CMP      R5,#+12
   \   00000056   0xD005             BEQ.N    ??TIM_SetIC4Prescaler_1
   \   00000058   0xF640 0x0172      MOVW     R1,#+2162
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable72
   \   00000060   0x.... 0x....      BL       assert_failed
   2163          
   2164            /* Reset the IC4PSC Bits */
   2165            TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
   \                     ??TIM_SetIC4Prescaler_1: (+1)
   \   00000064   0x8BA0             LDRH     R0,[R4, #+28]
   \   00000066   0xF24F 0x31FF      MOVW     R1,#+62463
   \   0000006A   0x4008             ANDS     R0,R1,R0
   \   0000006C   0x83A0             STRH     R0,[R4, #+28]
   2166          
   2167            /* Set the IC4PSC value */
   2168            TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
   \   0000006E   0x8BA0             LDRH     R0,[R4, #+28]
   \   00000070   0xEA50 0x2005      ORRS     R0,R0,R5, LSL #+8
   \   00000074   0x83A0             STRH     R0,[R4, #+28]
   2169          }
   \   00000076   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   2170          /**
   2171            * @}
   2172            */
   2173          
   2174          /** @defgroup TIM_Group4 Advanced-control timers (TIM1 and TIM8) specific features
   2175           *  @brief   Advanced-control timers (TIM1 and TIM8) specific features
   2176           *
   2177          @verbatim   
   2178           ===============================================================================
   2179                    Advanced-control timers (TIM1 and TIM8) specific features
   2180           ===============================================================================  
   2181            
   2182                 ===================================================================      
   2183                        TIM Driver: how to use the Break feature
   2184                 =================================================================== 
   2185                 After configuring the Timer channel(s) in the appropriate Output Compare mode: 
   2186                                   
   2187                 1. Fill the TIM_BDTRInitStruct with the desired parameters for the Timer
   2188                    Break Polarity, dead time, Lock level, the OSSI/OSSR State and the 
   2189                    AOE(automatic output enable).
   2190                         
   2191                 2. Call TIM_BDTRConfig(TIMx, &TIM_BDTRInitStruct) to configure the Timer
   2192                    
   2193                 3. Enable the Main Output using TIM_CtrlPWMOutputs(TIM1, ENABLE) 
   2194                    
   2195                 4. Once the break even occurs, the Timer's output signals are put in reset
   2196                    state or in a known state (according to the configuration made in
   2197                    TIM_BDTRConfig() function).
   2198          
   2199          @endverbatim
   2200            * @{
   2201            */
   2202          
   2203          /**
   2204            * @brief  Configures the Break feature, dead time, Lock level, OSSI/OSSR State
   2205            *         and the AOE(automatic output enable).
   2206            * @param  TIMx: where x can be  1 or 8 to select the TIM 
   2207            * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
   2208            *         contains the BDTR Register configuration  information for the TIM peripheral.
   2209            * @retval None
   2210            */

   \                                 In section .text, align 2, keep-with-next
   2211          void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
   2212          {
   \                     TIM_BDTRConfig: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   2213            /* Check the parameters */
   2214            assert_param(IS_TIM_LIST4_PERIPH(TIMx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable67  ;; 0x40010000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD009             BEQ.N    ??TIM_BDTRConfig_0
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable69  ;; 0x40010400
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD005             BEQ.N    ??TIM_BDTRConfig_0
   \   00000016   0xF640 0x01A6      MOVW     R1,#+2214
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable72
   \   0000001E   0x.... 0x....      BL       assert_failed
   2215            assert_param(IS_TIM_OSSR_STATE(TIM_BDTRInitStruct->TIM_OSSRState));
   \                     ??TIM_BDTRConfig_0: (+1)
   \   00000022   0x8828             LDRH     R0,[R5, #+0]
   \   00000024   0xF5B0 0x6F00      CMP      R0,#+2048
   \   00000028   0xD008             BEQ.N    ??TIM_BDTRConfig_1
   \   0000002A   0x8828             LDRH     R0,[R5, #+0]
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD005             BEQ.N    ??TIM_BDTRConfig_1
   \   00000030   0xF640 0x01A7      MOVW     R1,#+2215
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable72
   \   00000038   0x.... 0x....      BL       assert_failed
   2216            assert_param(IS_TIM_OSSI_STATE(TIM_BDTRInitStruct->TIM_OSSIState));
   \                     ??TIM_BDTRConfig_1: (+1)
   \   0000003C   0x8868             LDRH     R0,[R5, #+2]
   \   0000003E   0xF5B0 0x6F80      CMP      R0,#+1024
   \   00000042   0xD008             BEQ.N    ??TIM_BDTRConfig_2
   \   00000044   0x8868             LDRH     R0,[R5, #+2]
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD005             BEQ.N    ??TIM_BDTRConfig_2
   \   0000004A   0xF640 0x01A8      MOVW     R1,#+2216
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable72
   \   00000052   0x.... 0x....      BL       assert_failed
   2217            assert_param(IS_TIM_LOCK_LEVEL(TIM_BDTRInitStruct->TIM_LOCKLevel));
   \                     ??TIM_BDTRConfig_2: (+1)
   \   00000056   0x88A8             LDRH     R0,[R5, #+4]
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD011             BEQ.N    ??TIM_BDTRConfig_3
   \   0000005C   0x88A8             LDRH     R0,[R5, #+4]
   \   0000005E   0xF5B0 0x7F80      CMP      R0,#+256
   \   00000062   0xD00D             BEQ.N    ??TIM_BDTRConfig_3
   \   00000064   0x88A8             LDRH     R0,[R5, #+4]
   \   00000066   0xF5B0 0x7F00      CMP      R0,#+512
   \   0000006A   0xD009             BEQ.N    ??TIM_BDTRConfig_3
   \   0000006C   0x88A8             LDRH     R0,[R5, #+4]
   \   0000006E   0xF5B0 0x7F40      CMP      R0,#+768
   \   00000072   0xD005             BEQ.N    ??TIM_BDTRConfig_3
   \   00000074   0xF640 0x01A9      MOVW     R1,#+2217
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable72
   \   0000007C   0x.... 0x....      BL       assert_failed
   2218            assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
   \                     ??TIM_BDTRConfig_3: (+1)
   \   00000080   0x8928             LDRH     R0,[R5, #+8]
   \   00000082   0xF5B0 0x5F80      CMP      R0,#+4096
   \   00000086   0xD008             BEQ.N    ??TIM_BDTRConfig_4
   \   00000088   0x8928             LDRH     R0,[R5, #+8]
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD005             BEQ.N    ??TIM_BDTRConfig_4
   \   0000008E   0xF640 0x01AA      MOVW     R1,#+2218
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable72
   \   00000096   0x.... 0x....      BL       assert_failed
   2219            assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
   \                     ??TIM_BDTRConfig_4: (+1)
   \   0000009A   0x8968             LDRH     R0,[R5, #+10]
   \   0000009C   0x2800             CMP      R0,#+0
   \   0000009E   0xD009             BEQ.N    ??TIM_BDTRConfig_5
   \   000000A0   0x8968             LDRH     R0,[R5, #+10]
   \   000000A2   0xF5B0 0x5F00      CMP      R0,#+8192
   \   000000A6   0xD005             BEQ.N    ??TIM_BDTRConfig_5
   \   000000A8   0xF640 0x01AB      MOVW     R1,#+2219
   \   000000AC   0x.... 0x....      LDR.W    R0,??DataTable72
   \   000000B0   0x.... 0x....      BL       assert_failed
   2220            assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
   \                     ??TIM_BDTRConfig_5: (+1)
   \   000000B4   0x89A8             LDRH     R0,[R5, #+12]
   \   000000B6   0xF5B0 0x4F80      CMP      R0,#+16384
   \   000000BA   0xD008             BEQ.N    ??TIM_BDTRConfig_6
   \   000000BC   0x89A8             LDRH     R0,[R5, #+12]
   \   000000BE   0x2800             CMP      R0,#+0
   \   000000C0   0xD005             BEQ.N    ??TIM_BDTRConfig_6
   \   000000C2   0xF640 0x01AC      MOVW     R1,#+2220
   \   000000C6   0x.... 0x....      LDR.W    R0,??DataTable72
   \   000000CA   0x.... 0x....      BL       assert_failed
   2221          
   2222            /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
   2223               the OSSI State, the dead time value and the Automatic Output Enable Bit */
   2224            TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
   2225                       TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
   2226                       TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
   2227                       TIM_BDTRInitStruct->TIM_AutomaticOutput;
   \                     ??TIM_BDTRConfig_6: (+1)
   \   000000CE   0x8828             LDRH     R0,[R5, #+0]
   \   000000D0   0x8869             LDRH     R1,[R5, #+2]
   \   000000D2   0x4308             ORRS     R0,R1,R0
   \   000000D4   0x88A9             LDRH     R1,[R5, #+4]
   \   000000D6   0x4308             ORRS     R0,R1,R0
   \   000000D8   0x88E9             LDRH     R1,[R5, #+6]
   \   000000DA   0x4308             ORRS     R0,R1,R0
   \   000000DC   0x8929             LDRH     R1,[R5, #+8]
   \   000000DE   0x4308             ORRS     R0,R1,R0
   \   000000E0   0x8969             LDRH     R1,[R5, #+10]
   \   000000E2   0x4308             ORRS     R0,R1,R0
   \   000000E4   0x89A9             LDRH     R1,[R5, #+12]
   \   000000E6   0x4308             ORRS     R0,R1,R0
   \   000000E8   0xF8A4 0x0044      STRH     R0,[R4, #+68]
   2228          }
   \   000000EC   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   2229          
   2230          /**
   2231            * @brief  Fills each TIM_BDTRInitStruct member with its default value.
   2232            * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
   2233            *         will be initialized.
   2234            * @retval None
   2235            */

   \                                 In section .text, align 2, keep-with-next
   2236          void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
   2237          {
   2238            /* Set the default configuration */
   2239            TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
   \                     TIM_BDTRStructInit: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x8001             STRH     R1,[R0, #+0]
   2240            TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x8041             STRH     R1,[R0, #+2]
   2241            TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x8081             STRH     R1,[R0, #+4]
   2242            TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x80C1             STRH     R1,[R0, #+6]
   2243            TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x8101             STRH     R1,[R0, #+8]
   2244            TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x8141             STRH     R1,[R0, #+10]
   2245            TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x8181             STRH     R1,[R0, #+12]
   2246          }
   \   0000001C   0x4770             BX       LR               ;; return
   2247          
   2248          /**
   2249            * @brief  Enables or disables the TIM peripheral Main Outputs.
   2250            * @param  TIMx: where x can be 1 or 8 to select the TIMx peripheral.
   2251            * @param  NewState: new state of the TIM peripheral Main Outputs.
   2252            *          This parameter can be: ENABLE or DISABLE.
   2253            * @retval None
   2254            */

   \                                 In section .text, align 2, keep-with-next
   2255          void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
   2256          {
   \                     TIM_CtrlPWMOutputs: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   2257            /* Check the parameters */
   2258            assert_param(IS_TIM_LIST4_PERIPH(TIMx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable67  ;; 0x40010000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD009             BEQ.N    ??TIM_CtrlPWMOutputs_0
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable69  ;; 0x40010400
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD005             BEQ.N    ??TIM_CtrlPWMOutputs_0
   \   00000016   0xF640 0x01D2      MOVW     R1,#+2258
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable72
   \   0000001E   0x.... 0x....      BL       assert_failed
   2259            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \                     ??TIM_CtrlPWMOutputs_0: (+1)
   \   00000022   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000024   0x2D00             CMP      R5,#+0
   \   00000026   0xD008             BEQ.N    ??TIM_CtrlPWMOutputs_1
   \   00000028   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002A   0x2D01             CMP      R5,#+1
   \   0000002C   0xD005             BEQ.N    ??TIM_CtrlPWMOutputs_1
   \   0000002E   0xF640 0x01D3      MOVW     R1,#+2259
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable72
   \   00000036   0x.... 0x....      BL       assert_failed
   2260          
   2261            if (NewState != DISABLE)
   \                     ??TIM_CtrlPWMOutputs_1: (+1)
   \   0000003A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003C   0x2D00             CMP      R5,#+0
   \   0000003E   0xD006             BEQ.N    ??TIM_CtrlPWMOutputs_2
   2262            {
   2263              /* Enable the TIM Main Output */
   2264              TIMx->BDTR |= TIM_BDTR_MOE;
   \   00000040   0xF8B4 0x0044      LDRH     R0,[R4, #+68]
   \   00000044   0xF450 0x4000      ORRS     R0,R0,#0x8000
   \   00000048   0xF8A4 0x0044      STRH     R0,[R4, #+68]
   \   0000004C   0xE005             B.N      ??TIM_CtrlPWMOutputs_3
   2265            }
   2266            else
   2267            {
   2268              /* Disable the TIM Main Output */
   2269              TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
   \                     ??TIM_CtrlPWMOutputs_2: (+1)
   \   0000004E   0xF8B4 0x0044      LDRH     R0,[R4, #+68]
   \   00000052   0x0440             LSLS     R0,R0,#+17       ;; ZeroExtS R0,R0,#+17,#+17
   \   00000054   0x0C40             LSRS     R0,R0,#+17
   \   00000056   0xF8A4 0x0044      STRH     R0,[R4, #+68]
   2270            }  
   2271          }
   \                     ??TIM_CtrlPWMOutputs_3: (+1)
   \   0000005A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   2272          
   2273          /**
   2274            * @brief  Selects the TIM peripheral Commutation event.
   2275            * @param  TIMx: where x can be  1 or 8 to select the TIMx peripheral
   2276            * @param  NewState: new state of the Commutation event.
   2277            *          This parameter can be: ENABLE or DISABLE.
   2278            * @retval None
   2279            */

   \                                 In section .text, align 2, keep-with-next
   2280          void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
   2281          {
   \                     TIM_SelectCOM: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   2282            /* Check the parameters */
   2283            assert_param(IS_TIM_LIST4_PERIPH(TIMx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable67  ;; 0x40010000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD009             BEQ.N    ??TIM_SelectCOM_0
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable69  ;; 0x40010400
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD005             BEQ.N    ??TIM_SelectCOM_0
   \   00000016   0xF640 0x01EB      MOVW     R1,#+2283
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable72
   \   0000001E   0x.... 0x....      BL       assert_failed
   2284            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \                     ??TIM_SelectCOM_0: (+1)
   \   00000022   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000024   0x2D00             CMP      R5,#+0
   \   00000026   0xD008             BEQ.N    ??TIM_SelectCOM_1
   \   00000028   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002A   0x2D01             CMP      R5,#+1
   \   0000002C   0xD005             BEQ.N    ??TIM_SelectCOM_1
   \   0000002E   0xF640 0x01EC      MOVW     R1,#+2284
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable72
   \   00000036   0x.... 0x....      BL       assert_failed
   2285          
   2286            if (NewState != DISABLE)
   \                     ??TIM_SelectCOM_1: (+1)
   \   0000003A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003C   0x2D00             CMP      R5,#+0
   \   0000003E   0xD004             BEQ.N    ??TIM_SelectCOM_2
   2287            {
   2288              /* Set the COM Bit */
   2289              TIMx->CR2 |= TIM_CR2_CCUS;
   \   00000040   0x88A0             LDRH     R0,[R4, #+4]
   \   00000042   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000046   0x80A0             STRH     R0,[R4, #+4]
   \   00000048   0xE004             B.N      ??TIM_SelectCOM_3
   2290            }
   2291            else
   2292            {
   2293              /* Reset the COM Bit */
   2294              TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
   \                     ??TIM_SelectCOM_2: (+1)
   \   0000004A   0x88A0             LDRH     R0,[R4, #+4]
   \   0000004C   0xF64F 0x71FB      MOVW     R1,#+65531
   \   00000050   0x4008             ANDS     R0,R1,R0
   \   00000052   0x80A0             STRH     R0,[R4, #+4]
   2295            }
   2296          }
   \                     ??TIM_SelectCOM_3: (+1)
   \   00000054   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   2297          
   2298          /**
   2299            * @brief  Sets or Resets the TIM peripheral Capture Compare Preload Control bit.
   2300            * @param  TIMx: where x can be  1 or 8 to select the TIMx peripheral
   2301            * @param  NewState: new state of the Capture Compare Preload Control bit
   2302            *          This parameter can be: ENABLE or DISABLE.
   2303            * @retval None
   2304            */

   \                                 In section .text, align 2, keep-with-next
   2305          void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
   2306          { 
   \                     TIM_CCPreloadControl: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   2307            /* Check the parameters */
   2308            assert_param(IS_TIM_LIST4_PERIPH(TIMx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable67  ;; 0x40010000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD009             BEQ.N    ??TIM_CCPreloadControl_0
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable69  ;; 0x40010400
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD005             BEQ.N    ??TIM_CCPreloadControl_0
   \   00000016   0xF640 0x1104      MOVW     R1,#+2308
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable72
   \   0000001E   0x.... 0x....      BL       assert_failed
   2309            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \                     ??TIM_CCPreloadControl_0: (+1)
   \   00000022   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000024   0x2D00             CMP      R5,#+0
   \   00000026   0xD008             BEQ.N    ??TIM_CCPreloadControl_1
   \   00000028   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002A   0x2D01             CMP      R5,#+1
   \   0000002C   0xD005             BEQ.N    ??TIM_CCPreloadControl_1
   \   0000002E   0xF640 0x1105      MOVW     R1,#+2309
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable72
   \   00000036   0x.... 0x....      BL       assert_failed
   2310            if (NewState != DISABLE)
   \                     ??TIM_CCPreloadControl_1: (+1)
   \   0000003A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003C   0x2D00             CMP      R5,#+0
   \   0000003E   0xD004             BEQ.N    ??TIM_CCPreloadControl_2
   2311            {
   2312              /* Set the CCPC Bit */
   2313              TIMx->CR2 |= TIM_CR2_CCPC;
   \   00000040   0x88A0             LDRH     R0,[R4, #+4]
   \   00000042   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000046   0x80A0             STRH     R0,[R4, #+4]
   \   00000048   0xE004             B.N      ??TIM_CCPreloadControl_3
   2314            }
   2315            else
   2316            {
   2317              /* Reset the CCPC Bit */
   2318              TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
   \                     ??TIM_CCPreloadControl_2: (+1)
   \   0000004A   0x88A0             LDRH     R0,[R4, #+4]
   \   0000004C   0xF64F 0x71FE      MOVW     R1,#+65534
   \   00000050   0x4008             ANDS     R0,R1,R0
   \   00000052   0x80A0             STRH     R0,[R4, #+4]
   2319            }
   2320          }
   \                     ??TIM_CCPreloadControl_3: (+1)
   \   00000054   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   2321          /**
   2322            * @}
   2323            */
   2324          
   2325          /** @defgroup TIM_Group5 Interrupts DMA and flags management functions
   2326           *  @brief    Interrupts, DMA and flags management functions 
   2327           *
   2328          @verbatim   
   2329           ===============================================================================
   2330                           Interrupts, DMA and flags management functions
   2331           ===============================================================================  
   2332          
   2333          @endverbatim
   2334            * @{
   2335            */
   2336          
   2337          /**
   2338            * @brief  Enables or disables the specified TIM interrupts.
   2339            * @param  TIMx: where x can be 1 to 14 to select the TIMx peripheral.
   2340            * @param  TIM_IT: specifies the TIM interrupts sources to be enabled or disabled.
   2341            *          This parameter can be any combination of the following values:
   2342            *            @arg TIM_IT_Update: TIM update Interrupt source
   2343            *            @arg TIM_IT_CC1: TIM Capture Compare 1 Interrupt source
   2344            *            @arg TIM_IT_CC2: TIM Capture Compare 2 Interrupt source
   2345            *            @arg TIM_IT_CC3: TIM Capture Compare 3 Interrupt source
   2346            *            @arg TIM_IT_CC4: TIM Capture Compare 4 Interrupt source
   2347            *            @arg TIM_IT_COM: TIM Commutation Interrupt source
   2348            *            @arg TIM_IT_Trigger: TIM Trigger Interrupt source
   2349            *            @arg TIM_IT_Break: TIM Break Interrupt source
   2350            *  
   2351            * @note   For TIM6 and TIM7 only the parameter TIM_IT_Update can be used
   2352            * @note   For TIM9 and TIM12 only one of the following parameters can be used: TIM_IT_Update,
   2353            *          TIM_IT_CC1, TIM_IT_CC2 or TIM_IT_Trigger. 
   2354            * @note   For TIM10, TIM11, TIM13 and TIM14 only one of the following parameters can
   2355            *          be used: TIM_IT_Update or TIM_IT_CC1   
   2356            * @note   TIM_IT_COM and TIM_IT_Break can be used only with TIM1 and TIM8 
   2357            *        
   2358            * @param  NewState: new state of the TIM interrupts.
   2359            *          This parameter can be: ENABLE or DISABLE.
   2360            * @retval None
   2361            */

   \                                 In section .text, align 2, keep-with-next
   2362          void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
   2363          {  
   \                     TIM_ITConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   2364            /* Check the parameters */
   2365            assert_param(IS_TIM_ALL_PERIPH(TIMx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable67  ;; 0x40010000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD036             BEQ.N    ??TIM_ITConfig_0
   \   00000010   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000014   0xD033             BEQ.N    ??TIM_ITConfig_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable68  ;; 0x40000400
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD02F             BEQ.N    ??TIM_ITConfig_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable68_1  ;; 0x40000800
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD02B             BEQ.N    ??TIM_ITConfig_0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable68_2  ;; 0x40000c00
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD027             BEQ.N    ??TIM_ITConfig_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable74  ;; 0x40001000
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD023             BEQ.N    ??TIM_ITConfig_0
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable74_1  ;; 0x40001400
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD01F             BEQ.N    ??TIM_ITConfig_0
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable69  ;; 0x40010400
   \   00000042   0x4284             CMP      R4,R0
   \   00000044   0xD01B             BEQ.N    ??TIM_ITConfig_0
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable74_2  ;; 0x40014000
   \   0000004A   0x4284             CMP      R4,R0
   \   0000004C   0xD017             BEQ.N    ??TIM_ITConfig_0
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable74_3  ;; 0x40014400
   \   00000052   0x4284             CMP      R4,R0
   \   00000054   0xD013             BEQ.N    ??TIM_ITConfig_0
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable74_4  ;; 0x40014800
   \   0000005A   0x4284             CMP      R4,R0
   \   0000005C   0xD00F             BEQ.N    ??TIM_ITConfig_0
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable74_5  ;; 0x40001800
   \   00000062   0x4284             CMP      R4,R0
   \   00000064   0xD00B             BEQ.N    ??TIM_ITConfig_0
   \   00000066   0x....             LDR.N    R0,??DataTable62  ;; 0x40001c00
   \   00000068   0x4284             CMP      R4,R0
   \   0000006A   0xD008             BEQ.N    ??TIM_ITConfig_0
   \   0000006C   0x....             LDR.N    R0,??DataTable62_1  ;; 0x40002000
   \   0000006E   0x4284             CMP      R4,R0
   \   00000070   0xD005             BEQ.N    ??TIM_ITConfig_0
   \   00000072   0xF640 0x113D      MOVW     R1,#+2365
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable72
   \   0000007A   0x.... 0x....      BL       assert_failed
   2366            assert_param(IS_TIM_IT(TIM_IT));
   \                     ??TIM_ITConfig_0: (+1)
   \   0000007E   0xF44F 0x407F      MOV      R0,#+65280
   \   00000082   0x4205             TST      R5,R0
   \   00000084   0xD102             BNE.N    ??TIM_ITConfig_1
   \   00000086   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000088   0x2D00             CMP      R5,#+0
   \   0000008A   0xD105             BNE.N    ??TIM_ITConfig_2
   \                     ??TIM_ITConfig_1: (+1)
   \   0000008C   0xF640 0x113E      MOVW     R1,#+2366
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable72
   \   00000094   0x.... 0x....      BL       assert_failed
   2367            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \                     ??TIM_ITConfig_2: (+1)
   \   00000098   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000009A   0x2E00             CMP      R6,#+0
   \   0000009C   0xD008             BEQ.N    ??TIM_ITConfig_3
   \   0000009E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000A0   0x2E01             CMP      R6,#+1
   \   000000A2   0xD005             BEQ.N    ??TIM_ITConfig_3
   \   000000A4   0xF640 0x113F      MOVW     R1,#+2367
   \   000000A8   0x.... 0x....      LDR.W    R0,??DataTable72
   \   000000AC   0x.... 0x....      BL       assert_failed
   2368            
   2369            if (NewState != DISABLE)
   \                     ??TIM_ITConfig_3: (+1)
   \   000000B0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000B2   0x2E00             CMP      R6,#+0
   \   000000B4   0xD003             BEQ.N    ??TIM_ITConfig_4
   2370            {
   2371              /* Enable the Interrupt sources */
   2372              TIMx->DIER |= TIM_IT;
   \   000000B6   0x89A0             LDRH     R0,[R4, #+12]
   \   000000B8   0x4328             ORRS     R0,R5,R0
   \   000000BA   0x81A0             STRH     R0,[R4, #+12]
   \   000000BC   0xE002             B.N      ??TIM_ITConfig_5
   2373            }
   2374            else
   2375            {
   2376              /* Disable the Interrupt sources */
   2377              TIMx->DIER &= (uint16_t)~TIM_IT;
   \                     ??TIM_ITConfig_4: (+1)
   \   000000BE   0x89A0             LDRH     R0,[R4, #+12]
   \   000000C0   0x43A8             BICS     R0,R0,R5
   \   000000C2   0x81A0             STRH     R0,[R4, #+12]
   2378            }
   2379          }
   \                     ??TIM_ITConfig_5: (+1)
   \   000000C4   0xBD70             POP      {R4-R6,PC}       ;; return
   2380          
   2381          /**
   2382            * @brief  Configures the TIMx event to be generate by software.
   2383            * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
   2384            * @param  TIM_EventSource: specifies the event source.
   2385            *          This parameter can be one or more of the following values:	   
   2386            *            @arg TIM_EventSource_Update: Timer update Event source
   2387            *            @arg TIM_EventSource_CC1: Timer Capture Compare 1 Event source
   2388            *            @arg TIM_EventSource_CC2: Timer Capture Compare 2 Event source
   2389            *            @arg TIM_EventSource_CC3: Timer Capture Compare 3 Event source
   2390            *            @arg TIM_EventSource_CC4: Timer Capture Compare 4 Event source
   2391            *            @arg TIM_EventSource_COM: Timer COM event source  
   2392            *            @arg TIM_EventSource_Trigger: Timer Trigger Event source
   2393            *            @arg TIM_EventSource_Break: Timer Break event source
   2394            * 
   2395            * @note   TIM6 and TIM7 can only generate an update event. 
   2396            * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
   2397            *        
   2398            * @retval None
   2399            */

   \                                 In section .text, align 2, keep-with-next
   2400          void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
   2401          { 
   \                     TIM_GenerateEvent: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   2402            /* Check the parameters */
   2403            assert_param(IS_TIM_ALL_PERIPH(TIMx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable67  ;; 0x40010000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD038             BEQ.N    ??TIM_GenerateEvent_0
   \   0000000E   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000012   0xD035             BEQ.N    ??TIM_GenerateEvent_0
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable68  ;; 0x40000400
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD031             BEQ.N    ??TIM_GenerateEvent_0
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable68_1  ;; 0x40000800
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD02D             BEQ.N    ??TIM_GenerateEvent_0
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable68_2  ;; 0x40000c00
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD029             BEQ.N    ??TIM_GenerateEvent_0
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable74  ;; 0x40001000
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD025             BEQ.N    ??TIM_GenerateEvent_0
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable74_1  ;; 0x40001400
   \   00000038   0x4284             CMP      R4,R0
   \   0000003A   0xD021             BEQ.N    ??TIM_GenerateEvent_0
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable69  ;; 0x40010400
   \   00000040   0x4284             CMP      R4,R0
   \   00000042   0xD01D             BEQ.N    ??TIM_GenerateEvent_0
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable74_2  ;; 0x40014000
   \   00000048   0x4284             CMP      R4,R0
   \   0000004A   0xD019             BEQ.N    ??TIM_GenerateEvent_0
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable74_3  ;; 0x40014400
   \   00000050   0x4284             CMP      R4,R0
   \   00000052   0xD015             BEQ.N    ??TIM_GenerateEvent_0
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable74_4  ;; 0x40014800
   \   00000058   0x4284             CMP      R4,R0
   \   0000005A   0xD011             BEQ.N    ??TIM_GenerateEvent_0
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable74_5  ;; 0x40001800
   \   00000060   0x4284             CMP      R4,R0
   \   00000062   0xD00D             BEQ.N    ??TIM_GenerateEvent_0
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable76  ;; 0x40001c00
   \   00000068   0x4284             CMP      R4,R0
   \   0000006A   0xD009             BEQ.N    ??TIM_GenerateEvent_0
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable76_1  ;; 0x40002000
   \   00000070   0x4284             CMP      R4,R0
   \   00000072   0xD005             BEQ.N    ??TIM_GenerateEvent_0
   \   00000074   0xF640 0x1163      MOVW     R1,#+2403
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable72
   \   0000007C   0x.... 0x....      BL       assert_failed
   2404            assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
   \                     ??TIM_GenerateEvent_0: (+1)
   \   00000080   0xF44F 0x407F      MOV      R0,#+65280
   \   00000084   0x4205             TST      R5,R0
   \   00000086   0xD102             BNE.N    ??TIM_GenerateEvent_1
   \   00000088   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000008A   0x2D00             CMP      R5,#+0
   \   0000008C   0xD105             BNE.N    ??TIM_GenerateEvent_2
   \                     ??TIM_GenerateEvent_1: (+1)
   \   0000008E   0xF640 0x1164      MOVW     R1,#+2404
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable72
   \   00000096   0x.... 0x....      BL       assert_failed
   2405           
   2406            /* Set the event sources */
   2407            TIMx->EGR = TIM_EventSource;
   \                     ??TIM_GenerateEvent_2: (+1)
   \   0000009A   0x82A5             STRH     R5,[R4, #+20]
   2408          }
   \   0000009C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   2409          
   2410          /**
   2411            * @brief  Checks whether the specified TIM flag is set or not.
   2412            * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
   2413            * @param  TIM_FLAG: specifies the flag to check.
   2414            *          This parameter can be one of the following values:
   2415            *            @arg TIM_FLAG_Update: TIM update Flag
   2416            *            @arg TIM_FLAG_CC1: TIM Capture Compare 1 Flag
   2417            *            @arg TIM_FLAG_CC2: TIM Capture Compare 2 Flag
   2418            *            @arg TIM_FLAG_CC3: TIM Capture Compare 3 Flag
   2419            *            @arg TIM_FLAG_CC4: TIM Capture Compare 4 Flag
   2420            *            @arg TIM_FLAG_COM: TIM Commutation Flag
   2421            *            @arg TIM_FLAG_Trigger: TIM Trigger Flag
   2422            *            @arg TIM_FLAG_Break: TIM Break Flag
   2423            *            @arg TIM_FLAG_CC1OF: TIM Capture Compare 1 over capture Flag
   2424            *            @arg TIM_FLAG_CC2OF: TIM Capture Compare 2 over capture Flag
   2425            *            @arg TIM_FLAG_CC3OF: TIM Capture Compare 3 over capture Flag
   2426            *            @arg TIM_FLAG_CC4OF: TIM Capture Compare 4 over capture Flag
   2427            *
   2428            * @note   TIM6 and TIM7 can have only one update flag. 
   2429            * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
   2430            *
   2431            * @retval The new state of TIM_FLAG (SET or RESET).
   2432            */

   \                                 In section .text, align 2, keep-with-next
   2433          FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
   2434          { 
   \                     TIM_GetFlagStatus: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   2435            ITStatus bitstatus = RESET;  
   \   00000006   0x2600             MOVS     R6,#+0
   2436            /* Check the parameters */
   2437            assert_param(IS_TIM_ALL_PERIPH(TIMx));
   \   00000008   0x....             LDR.N    R0,??DataTable67  ;; 0x40010000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD038             BEQ.N    ??TIM_GetFlagStatus_0
   \   0000000E   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000012   0xD035             BEQ.N    ??TIM_GetFlagStatus_0
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable68  ;; 0x40000400
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD031             BEQ.N    ??TIM_GetFlagStatus_0
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable68_1  ;; 0x40000800
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD02D             BEQ.N    ??TIM_GetFlagStatus_0
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable68_2  ;; 0x40000c00
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD029             BEQ.N    ??TIM_GetFlagStatus_0
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable74  ;; 0x40001000
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD025             BEQ.N    ??TIM_GetFlagStatus_0
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable74_1  ;; 0x40001400
   \   00000038   0x4284             CMP      R4,R0
   \   0000003A   0xD021             BEQ.N    ??TIM_GetFlagStatus_0
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable69  ;; 0x40010400
   \   00000040   0x4284             CMP      R4,R0
   \   00000042   0xD01D             BEQ.N    ??TIM_GetFlagStatus_0
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable74_2  ;; 0x40014000
   \   00000048   0x4284             CMP      R4,R0
   \   0000004A   0xD019             BEQ.N    ??TIM_GetFlagStatus_0
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable74_3  ;; 0x40014400
   \   00000050   0x4284             CMP      R4,R0
   \   00000052   0xD015             BEQ.N    ??TIM_GetFlagStatus_0
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable74_4  ;; 0x40014800
   \   00000058   0x4284             CMP      R4,R0
   \   0000005A   0xD011             BEQ.N    ??TIM_GetFlagStatus_0
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable74_5  ;; 0x40001800
   \   00000060   0x4284             CMP      R4,R0
   \   00000062   0xD00D             BEQ.N    ??TIM_GetFlagStatus_0
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable76  ;; 0x40001c00
   \   00000068   0x4284             CMP      R4,R0
   \   0000006A   0xD009             BEQ.N    ??TIM_GetFlagStatus_0
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable76_1  ;; 0x40002000
   \   00000070   0x4284             CMP      R4,R0
   \   00000072   0xD005             BEQ.N    ??TIM_GetFlagStatus_0
   \   00000074   0xF640 0x1185      MOVW     R1,#+2437
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable72
   \   0000007C   0x.... 0x....      BL       assert_failed
   2438            assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
   \                     ??TIM_GetFlagStatus_0: (+1)
   \   00000080   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000082   0x2D01             CMP      R5,#+1
   \   00000084   0xD02A             BEQ.N    ??TIM_GetFlagStatus_1
   \   00000086   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000088   0x2D02             CMP      R5,#+2
   \   0000008A   0xD027             BEQ.N    ??TIM_GetFlagStatus_1
   \   0000008C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000008E   0x2D04             CMP      R5,#+4
   \   00000090   0xD024             BEQ.N    ??TIM_GetFlagStatus_1
   \   00000092   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000094   0x2D08             CMP      R5,#+8
   \   00000096   0xD021             BEQ.N    ??TIM_GetFlagStatus_1
   \   00000098   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000009A   0x2D10             CMP      R5,#+16
   \   0000009C   0xD01E             BEQ.N    ??TIM_GetFlagStatus_1
   \   0000009E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000A0   0x2D20             CMP      R5,#+32
   \   000000A2   0xD01B             BEQ.N    ??TIM_GetFlagStatus_1
   \   000000A4   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000A6   0x2D40             CMP      R5,#+64
   \   000000A8   0xD018             BEQ.N    ??TIM_GetFlagStatus_1
   \   000000AA   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000AC   0x2D80             CMP      R5,#+128
   \   000000AE   0xD015             BEQ.N    ??TIM_GetFlagStatus_1
   \   000000B0   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000B2   0xF5B5 0x7F00      CMP      R5,#+512
   \   000000B6   0xD011             BEQ.N    ??TIM_GetFlagStatus_1
   \   000000B8   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000BA   0xF5B5 0x6F80      CMP      R5,#+1024
   \   000000BE   0xD00D             BEQ.N    ??TIM_GetFlagStatus_1
   \   000000C0   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000C2   0xF5B5 0x6F00      CMP      R5,#+2048
   \   000000C6   0xD009             BEQ.N    ??TIM_GetFlagStatus_1
   \   000000C8   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000CA   0xF5B5 0x5F80      CMP      R5,#+4096
   \   000000CE   0xD005             BEQ.N    ??TIM_GetFlagStatus_1
   \   000000D0   0xF640 0x1186      MOVW     R1,#+2438
   \   000000D4   0x.... 0x....      LDR.W    R0,??DataTable72
   \   000000D8   0x.... 0x....      BL       assert_failed
   2439          
   2440            
   2441            if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
   \                     ??TIM_GetFlagStatus_1: (+1)
   \   000000DC   0x8A20             LDRH     R0,[R4, #+16]
   \   000000DE   0x4228             TST      R0,R5
   \   000000E0   0xD002             BEQ.N    ??TIM_GetFlagStatus_2
   2442            {
   2443              bitstatus = SET;
   \   000000E2   0x2001             MOVS     R0,#+1
   \   000000E4   0x0006             MOVS     R6,R0
   \   000000E6   0xE001             B.N      ??TIM_GetFlagStatus_3
   2444            }
   2445            else
   2446            {
   2447              bitstatus = RESET;
   \                     ??TIM_GetFlagStatus_2: (+1)
   \   000000E8   0x2000             MOVS     R0,#+0
   \   000000EA   0x0006             MOVS     R6,R0
   2448            }
   2449            return bitstatus;
   \                     ??TIM_GetFlagStatus_3: (+1)
   \   000000EC   0x0030             MOVS     R0,R6
   \   000000EE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000F0   0xBD70             POP      {R4-R6,PC}       ;; return
   2450          }
   2451          
   2452          /**
   2453            * @brief  Clears the TIMx's pending flags.
   2454            * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
   2455            * @param  TIM_FLAG: specifies the flag bit to clear.
   2456            *          This parameter can be any combination of the following values:
   2457            *            @arg TIM_FLAG_Update: TIM update Flag
   2458            *            @arg TIM_FLAG_CC1: TIM Capture Compare 1 Flag
   2459            *            @arg TIM_FLAG_CC2: TIM Capture Compare 2 Flag
   2460            *            @arg TIM_FLAG_CC3: TIM Capture Compare 3 Flag
   2461            *            @arg TIM_FLAG_CC4: TIM Capture Compare 4 Flag
   2462            *            @arg TIM_FLAG_COM: TIM Commutation Flag
   2463            *            @arg TIM_FLAG_Trigger: TIM Trigger Flag
   2464            *            @arg TIM_FLAG_Break: TIM Break Flag
   2465            *            @arg TIM_FLAG_CC1OF: TIM Capture Compare 1 over capture Flag
   2466            *            @arg TIM_FLAG_CC2OF: TIM Capture Compare 2 over capture Flag
   2467            *            @arg TIM_FLAG_CC3OF: TIM Capture Compare 3 over capture Flag
   2468            *            @arg TIM_FLAG_CC4OF: TIM Capture Compare 4 over capture Flag
   2469            *
   2470            * @note   TIM6 and TIM7 can have only one update flag. 
   2471            * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
   2472            *    
   2473            * @retval None
   2474            */

   \                                 In section .text, align 2, keep-with-next
   2475          void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
   2476          {  
   \                     TIM_ClearFlag: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   2477            /* Check the parameters */
   2478            assert_param(IS_TIM_ALL_PERIPH(TIMx));
   \   00000006   0x....             LDR.N    R0,??DataTable67  ;; 0x40010000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD038             BEQ.N    ??TIM_ClearFlag_0
   \   0000000C   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000010   0xD035             BEQ.N    ??TIM_ClearFlag_0
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable68  ;; 0x40000400
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xD031             BEQ.N    ??TIM_ClearFlag_0
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable68_1  ;; 0x40000800
   \   0000001E   0x4284             CMP      R4,R0
   \   00000020   0xD02D             BEQ.N    ??TIM_ClearFlag_0
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable68_2  ;; 0x40000c00
   \   00000026   0x4284             CMP      R4,R0
   \   00000028   0xD029             BEQ.N    ??TIM_ClearFlag_0
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable74  ;; 0x40001000
   \   0000002E   0x4284             CMP      R4,R0
   \   00000030   0xD025             BEQ.N    ??TIM_ClearFlag_0
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable74_1  ;; 0x40001400
   \   00000036   0x4284             CMP      R4,R0
   \   00000038   0xD021             BEQ.N    ??TIM_ClearFlag_0
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable69  ;; 0x40010400
   \   0000003E   0x4284             CMP      R4,R0
   \   00000040   0xD01D             BEQ.N    ??TIM_ClearFlag_0
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable74_2  ;; 0x40014000
   \   00000046   0x4284             CMP      R4,R0
   \   00000048   0xD019             BEQ.N    ??TIM_ClearFlag_0
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable74_3  ;; 0x40014400
   \   0000004E   0x4284             CMP      R4,R0
   \   00000050   0xD015             BEQ.N    ??TIM_ClearFlag_0
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable74_4  ;; 0x40014800
   \   00000056   0x4284             CMP      R4,R0
   \   00000058   0xD011             BEQ.N    ??TIM_ClearFlag_0
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable74_5  ;; 0x40001800
   \   0000005E   0x4284             CMP      R4,R0
   \   00000060   0xD00D             BEQ.N    ??TIM_ClearFlag_0
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable76  ;; 0x40001c00
   \   00000066   0x4284             CMP      R4,R0
   \   00000068   0xD009             BEQ.N    ??TIM_ClearFlag_0
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable76_1  ;; 0x40002000
   \   0000006E   0x4284             CMP      R4,R0
   \   00000070   0xD005             BEQ.N    ??TIM_ClearFlag_0
   \   00000072   0xF640 0x11AE      MOVW     R1,#+2478
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable72
   \   0000007A   0x.... 0x....      BL       assert_failed
   2479             
   2480            /* Clear the flags */
   2481            TIMx->SR = (uint16_t)~TIM_FLAG;
   \                     ??TIM_ClearFlag_0: (+1)
   \   0000007E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000080   0x43E8             MVNS     R0,R5
   \   00000082   0x8220             STRH     R0,[R4, #+16]
   2482          }
   \   00000084   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   2483          
   2484          /**
   2485            * @brief  Checks whether the TIM interrupt has occurred or not.
   2486            * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
   2487            * @param  TIM_IT: specifies the TIM interrupt source to check.
   2488            *          This parameter can be one of the following values:
   2489            *            @arg TIM_IT_Update: TIM update Interrupt source
   2490            *            @arg TIM_IT_CC1: TIM Capture Compare 1 Interrupt source
   2491            *            @arg TIM_IT_CC2: TIM Capture Compare 2 Interrupt source
   2492            *            @arg TIM_IT_CC3: TIM Capture Compare 3 Interrupt source
   2493            *            @arg TIM_IT_CC4: TIM Capture Compare 4 Interrupt source
   2494            *            @arg TIM_IT_COM: TIM Commutation Interrupt source
   2495            *            @arg TIM_IT_Trigger: TIM Trigger Interrupt source
   2496            *            @arg TIM_IT_Break: TIM Break Interrupt source
   2497            *
   2498            * @note   TIM6 and TIM7 can generate only an update interrupt.
   2499            * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
   2500            *     
   2501            * @retval The new state of the TIM_IT(SET or RESET).
   2502            */

   \                                 In section .text, align 2, keep-with-next
   2503          ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
   2504          {
   \                     TIM_GetITStatus: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   2505            ITStatus bitstatus = RESET;  
   \   00000008   0x2600             MOVS     R6,#+0
   2506            uint16_t itstatus = 0x0, itenable = 0x0;
   \   0000000A   0x2700             MOVS     R7,#+0
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
   2507            /* Check the parameters */
   2508            assert_param(IS_TIM_ALL_PERIPH(TIMx));
   \   00000010   0x....             LDR.N    R0,??DataTable67  ;; 0x40010000
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD035             BEQ.N    ??TIM_GetITStatus_0
   \   00000016   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   0000001A   0xD032             BEQ.N    ??TIM_GetITStatus_0
   \   0000001C   0x....             LDR.N    R0,??DataTable68  ;; 0x40000400
   \   0000001E   0x4284             CMP      R4,R0
   \   00000020   0xD02F             BEQ.N    ??TIM_GetITStatus_0
   \   00000022   0x....             LDR.N    R0,??DataTable68_1  ;; 0x40000800
   \   00000024   0x4284             CMP      R4,R0
   \   00000026   0xD02C             BEQ.N    ??TIM_GetITStatus_0
   \   00000028   0x....             LDR.N    R0,??DataTable68_2  ;; 0x40000c00
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD029             BEQ.N    ??TIM_GetITStatus_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable74  ;; 0x40001000
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD025             BEQ.N    ??TIM_GetITStatus_0
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable74_1  ;; 0x40001400
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD021             BEQ.N    ??TIM_GetITStatus_0
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable69  ;; 0x40010400
   \   00000042   0x4284             CMP      R4,R0
   \   00000044   0xD01D             BEQ.N    ??TIM_GetITStatus_0
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable74_2  ;; 0x40014000
   \   0000004A   0x4284             CMP      R4,R0
   \   0000004C   0xD019             BEQ.N    ??TIM_GetITStatus_0
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable74_3  ;; 0x40014400
   \   00000052   0x4284             CMP      R4,R0
   \   00000054   0xD015             BEQ.N    ??TIM_GetITStatus_0
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable74_4  ;; 0x40014800
   \   0000005A   0x4284             CMP      R4,R0
   \   0000005C   0xD011             BEQ.N    ??TIM_GetITStatus_0
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable74_5  ;; 0x40001800
   \   00000062   0x4284             CMP      R4,R0
   \   00000064   0xD00D             BEQ.N    ??TIM_GetITStatus_0
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable76  ;; 0x40001c00
   \   0000006A   0x4284             CMP      R4,R0
   \   0000006C   0xD009             BEQ.N    ??TIM_GetITStatus_0
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable76_1  ;; 0x40002000
   \   00000072   0x4284             CMP      R4,R0
   \   00000074   0xD005             BEQ.N    ??TIM_GetITStatus_0
   \   00000076   0xF640 0x11CC      MOVW     R1,#+2508
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable72
   \   0000007E   0x.... 0x....      BL       assert_failed
   2509            assert_param(IS_TIM_GET_IT(TIM_IT));
   \                     ??TIM_GetITStatus_0: (+1)
   \   00000082   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000084   0x2D01             CMP      R5,#+1
   \   00000086   0xD01A             BEQ.N    ??TIM_GetITStatus_1
   \   00000088   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000008A   0x2D02             CMP      R5,#+2
   \   0000008C   0xD017             BEQ.N    ??TIM_GetITStatus_1
   \   0000008E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000090   0x2D04             CMP      R5,#+4
   \   00000092   0xD014             BEQ.N    ??TIM_GetITStatus_1
   \   00000094   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000096   0x2D08             CMP      R5,#+8
   \   00000098   0xD011             BEQ.N    ??TIM_GetITStatus_1
   \   0000009A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000009C   0x2D10             CMP      R5,#+16
   \   0000009E   0xD00E             BEQ.N    ??TIM_GetITStatus_1
   \   000000A0   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000A2   0x2D20             CMP      R5,#+32
   \   000000A4   0xD00B             BEQ.N    ??TIM_GetITStatus_1
   \   000000A6   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000A8   0x2D40             CMP      R5,#+64
   \   000000AA   0xD008             BEQ.N    ??TIM_GetITStatus_1
   \   000000AC   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000AE   0x2D80             CMP      R5,#+128
   \   000000B0   0xD005             BEQ.N    ??TIM_GetITStatus_1
   \   000000B2   0xF640 0x11CD      MOVW     R1,#+2509
   \   000000B6   0x.... 0x....      LDR.W    R0,??DataTable72
   \   000000BA   0x.... 0x....      BL       assert_failed
   2510             
   2511            itstatus = TIMx->SR & TIM_IT;
   \                     ??TIM_GetITStatus_1: (+1)
   \   000000BE   0x8A20             LDRH     R0,[R4, #+16]
   \   000000C0   0x4028             ANDS     R0,R5,R0
   \   000000C2   0x0007             MOVS     R7,R0
   2512            
   2513            itenable = TIMx->DIER & TIM_IT;
   \   000000C4   0x89A0             LDRH     R0,[R4, #+12]
   \   000000C6   0x4028             ANDS     R0,R5,R0
   \   000000C8   0x4680             MOV      R8,R0
   2514            if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
   \   000000CA   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000CC   0x2F00             CMP      R7,#+0
   \   000000CE   0xD007             BEQ.N    ??TIM_GetITStatus_2
   \   000000D0   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000D4   0xF1B8 0x0F00      CMP      R8,#+0
   \   000000D8   0xD002             BEQ.N    ??TIM_GetITStatus_2
   2515            {
   2516              bitstatus = SET;
   \   000000DA   0x2001             MOVS     R0,#+1
   \   000000DC   0x0006             MOVS     R6,R0
   \   000000DE   0xE001             B.N      ??TIM_GetITStatus_3
   2517            }
   2518            else
   2519            {
   2520              bitstatus = RESET;
   \                     ??TIM_GetITStatus_2: (+1)
   \   000000E0   0x2000             MOVS     R0,#+0
   \   000000E2   0x0006             MOVS     R6,R0
   2521            }
   2522            return bitstatus;
   \                     ??TIM_GetITStatus_3: (+1)
   \   000000E4   0x0030             MOVS     R0,R6
   \   000000E6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E8   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   2523          }
   2524          
   2525          /**
   2526            * @brief  Clears the TIMx's interrupt pending bits.
   2527            * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
   2528            * @param  TIM_IT: specifies the pending bit to clear.
   2529            *          This parameter can be any combination of the following values:
   2530            *            @arg TIM_IT_Update: TIM1 update Interrupt source
   2531            *            @arg TIM_IT_CC1: TIM Capture Compare 1 Interrupt source
   2532            *            @arg TIM_IT_CC2: TIM Capture Compare 2 Interrupt source
   2533            *            @arg TIM_IT_CC3: TIM Capture Compare 3 Interrupt source
   2534            *            @arg TIM_IT_CC4: TIM Capture Compare 4 Interrupt source
   2535            *            @arg TIM_IT_COM: TIM Commutation Interrupt source
   2536            *            @arg TIM_IT_Trigger: TIM Trigger Interrupt source
   2537            *            @arg TIM_IT_Break: TIM Break Interrupt source
   2538            *
   2539            * @note   TIM6 and TIM7 can generate only an update interrupt.
   2540            * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
   2541            *      
   2542            * @retval None
   2543            */

   \                                 In section .text, align 2, keep-with-next
   2544          void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
   2545          {
   \                     TIM_ClearITPendingBit: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   2546            /* Check the parameters */
   2547            assert_param(IS_TIM_ALL_PERIPH(TIMx));
   \   00000006   0x....             LDR.N    R0,??DataTable67  ;; 0x40010000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD034             BEQ.N    ??TIM_ClearITPendingBit_0
   \   0000000C   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000010   0xD031             BEQ.N    ??TIM_ClearITPendingBit_0
   \   00000012   0x....             LDR.N    R0,??DataTable68  ;; 0x40000400
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD02E             BEQ.N    ??TIM_ClearITPendingBit_0
   \   00000018   0x....             LDR.N    R0,??DataTable68_1  ;; 0x40000800
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD02B             BEQ.N    ??TIM_ClearITPendingBit_0
   \   0000001E   0x....             LDR.N    R0,??DataTable68_2  ;; 0x40000c00
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD028             BEQ.N    ??TIM_ClearITPendingBit_0
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable74  ;; 0x40001000
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD024             BEQ.N    ??TIM_ClearITPendingBit_0
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable74_1  ;; 0x40001400
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD020             BEQ.N    ??TIM_ClearITPendingBit_0
   \   00000034   0x....             LDR.N    R0,??DataTable69  ;; 0x40010400
   \   00000036   0x4284             CMP      R4,R0
   \   00000038   0xD01D             BEQ.N    ??TIM_ClearITPendingBit_0
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable74_2  ;; 0x40014000
   \   0000003E   0x4284             CMP      R4,R0
   \   00000040   0xD019             BEQ.N    ??TIM_ClearITPendingBit_0
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable74_3  ;; 0x40014400
   \   00000046   0x4284             CMP      R4,R0
   \   00000048   0xD015             BEQ.N    ??TIM_ClearITPendingBit_0
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable74_4  ;; 0x40014800
   \   0000004E   0x4284             CMP      R4,R0
   \   00000050   0xD011             BEQ.N    ??TIM_ClearITPendingBit_0
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable74_5  ;; 0x40001800
   \   00000056   0x4284             CMP      R4,R0
   \   00000058   0xD00D             BEQ.N    ??TIM_ClearITPendingBit_0
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable76  ;; 0x40001c00
   \   0000005E   0x4284             CMP      R4,R0
   \   00000060   0xD009             BEQ.N    ??TIM_ClearITPendingBit_0
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable76_1  ;; 0x40002000
   \   00000066   0x4284             CMP      R4,R0
   \   00000068   0xD005             BEQ.N    ??TIM_ClearITPendingBit_0
   \   0000006A   0xF640 0x11F3      MOVW     R1,#+2547
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable72
   \   00000072   0x.... 0x....      BL       assert_failed
   2548          
   2549            /* Clear the IT pending Bit */
   2550            TIMx->SR = (uint16_t)~TIM_IT;
   \                     ??TIM_ClearITPendingBit_0: (+1)
   \   00000076   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000078   0x43E8             MVNS     R0,R5
   \   0000007A   0x8220             STRH     R0,[R4, #+16]
   2551          }
   \   0000007C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   2552          
   2553          /**
   2554            * @brief  Configures the TIMx's DMA interface.
   2555            * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
   2556            * @param  TIM_DMABase: DMA Base address.
   2557            *          This parameter can be one of the following values:
   2558            *            @arg TIM_DMABase_CR1  
   2559            *            @arg TIM_DMABase_CR2
   2560            *            @arg TIM_DMABase_SMCR
   2561            *            @arg TIM_DMABase_DIER
   2562            *            @arg TIM1_DMABase_SR
   2563            *            @arg TIM_DMABase_EGR
   2564            *            @arg TIM_DMABase_CCMR1
   2565            *            @arg TIM_DMABase_CCMR2
   2566            *            @arg TIM_DMABase_CCER
   2567            *            @arg TIM_DMABase_CNT   
   2568            *            @arg TIM_DMABase_PSC   
   2569            *            @arg TIM_DMABase_ARR
   2570            *            @arg TIM_DMABase_RCR
   2571            *            @arg TIM_DMABase_CCR1
   2572            *            @arg TIM_DMABase_CCR2
   2573            *            @arg TIM_DMABase_CCR3  
   2574            *            @arg TIM_DMABase_CCR4
   2575            *            @arg TIM_DMABase_BDTR
   2576            *            @arg TIM_DMABase_DCR
   2577            * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
   2578            *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
   2579            * @retval None
   2580            */

   \                                 In section .text, align 2, keep-with-next
   2581          void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
   2582          {
   \                     TIM_DMAConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   2583            /* Check the parameters */
   2584            assert_param(IS_TIM_LIST3_PERIPH(TIMx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable81  ;; 0x40010000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD013             BEQ.N    ??TIM_DMAConfig_0
   \   00000010   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000014   0xD010             BEQ.N    ??TIM_DMAConfig_0
   \   00000016   0x....             LDR.N    R0,??DataTable68  ;; 0x40000400
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD00D             BEQ.N    ??TIM_DMAConfig_0
   \   0000001C   0x....             LDR.N    R0,??DataTable68_1  ;; 0x40000800
   \   0000001E   0x4284             CMP      R4,R0
   \   00000020   0xD00A             BEQ.N    ??TIM_DMAConfig_0
   \   00000022   0x....             LDR.N    R0,??DataTable68_2  ;; 0x40000c00
   \   00000024   0x4284             CMP      R4,R0
   \   00000026   0xD007             BEQ.N    ??TIM_DMAConfig_0
   \   00000028   0x....             LDR.N    R0,??DataTable69  ;; 0x40010400
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD004             BEQ.N    ??TIM_DMAConfig_0
   \   0000002E   0xF640 0x2118      MOVW     R1,#+2584
   \   00000032   0x....             LDR.N    R0,??DataTable72
   \   00000034   0x.... 0x....      BL       assert_failed
   2585            assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
   \                     ??TIM_DMAConfig_0: (+1)
   \   00000038   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000003A   0x2D00             CMP      R5,#+0
   \   0000003C   0xD03D             BEQ.N    ??TIM_DMAConfig_1
   \   0000003E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000040   0x2D01             CMP      R5,#+1
   \   00000042   0xD03A             BEQ.N    ??TIM_DMAConfig_1
   \   00000044   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000046   0x2D02             CMP      R5,#+2
   \   00000048   0xD037             BEQ.N    ??TIM_DMAConfig_1
   \   0000004A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004C   0x2D03             CMP      R5,#+3
   \   0000004E   0xD034             BEQ.N    ??TIM_DMAConfig_1
   \   00000050   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000052   0x2D04             CMP      R5,#+4
   \   00000054   0xD031             BEQ.N    ??TIM_DMAConfig_1
   \   00000056   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000058   0x2D05             CMP      R5,#+5
   \   0000005A   0xD02E             BEQ.N    ??TIM_DMAConfig_1
   \   0000005C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000005E   0x2D06             CMP      R5,#+6
   \   00000060   0xD02B             BEQ.N    ??TIM_DMAConfig_1
   \   00000062   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000064   0x2D07             CMP      R5,#+7
   \   00000066   0xD028             BEQ.N    ??TIM_DMAConfig_1
   \   00000068   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000006A   0x2D08             CMP      R5,#+8
   \   0000006C   0xD025             BEQ.N    ??TIM_DMAConfig_1
   \   0000006E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000070   0x2D09             CMP      R5,#+9
   \   00000072   0xD022             BEQ.N    ??TIM_DMAConfig_1
   \   00000074   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000076   0x2D0A             CMP      R5,#+10
   \   00000078   0xD01F             BEQ.N    ??TIM_DMAConfig_1
   \   0000007A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000007C   0x2D0B             CMP      R5,#+11
   \   0000007E   0xD01C             BEQ.N    ??TIM_DMAConfig_1
   \   00000080   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000082   0x2D0C             CMP      R5,#+12
   \   00000084   0xD019             BEQ.N    ??TIM_DMAConfig_1
   \   00000086   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000088   0x2D0D             CMP      R5,#+13
   \   0000008A   0xD016             BEQ.N    ??TIM_DMAConfig_1
   \   0000008C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000008E   0x2D0E             CMP      R5,#+14
   \   00000090   0xD013             BEQ.N    ??TIM_DMAConfig_1
   \   00000092   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000094   0x2D0F             CMP      R5,#+15
   \   00000096   0xD010             BEQ.N    ??TIM_DMAConfig_1
   \   00000098   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000009A   0x2D10             CMP      R5,#+16
   \   0000009C   0xD00D             BEQ.N    ??TIM_DMAConfig_1
   \   0000009E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000A0   0x2D11             CMP      R5,#+17
   \   000000A2   0xD00A             BEQ.N    ??TIM_DMAConfig_1
   \   000000A4   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000A6   0x2D12             CMP      R5,#+18
   \   000000A8   0xD007             BEQ.N    ??TIM_DMAConfig_1
   \   000000AA   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000AC   0x2D13             CMP      R5,#+19
   \   000000AE   0xD004             BEQ.N    ??TIM_DMAConfig_1
   \   000000B0   0xF640 0x2119      MOVW     R1,#+2585
   \   000000B4   0x....             LDR.N    R0,??DataTable72
   \   000000B6   0x.... 0x....      BL       assert_failed
   2586            assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
   \                     ??TIM_DMAConfig_1: (+1)
   \   000000BA   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000BC   0x2E00             CMP      R6,#+0
   \   000000BE   0xD048             BEQ.N    ??TIM_DMAConfig_2
   \   000000C0   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000C2   0xF5B6 0x7F80      CMP      R6,#+256
   \   000000C6   0xD044             BEQ.N    ??TIM_DMAConfig_2
   \   000000C8   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000CA   0xF5B6 0x7F00      CMP      R6,#+512
   \   000000CE   0xD040             BEQ.N    ??TIM_DMAConfig_2
   \   000000D0   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000D2   0xF5B6 0x7F40      CMP      R6,#+768
   \   000000D6   0xD03C             BEQ.N    ??TIM_DMAConfig_2
   \   000000D8   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000DA   0xF5B6 0x6F80      CMP      R6,#+1024
   \   000000DE   0xD038             BEQ.N    ??TIM_DMAConfig_2
   \   000000E0   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000E2   0xF5B6 0x6FA0      CMP      R6,#+1280
   \   000000E6   0xD034             BEQ.N    ??TIM_DMAConfig_2
   \   000000E8   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000EA   0xF5B6 0x6FC0      CMP      R6,#+1536
   \   000000EE   0xD030             BEQ.N    ??TIM_DMAConfig_2
   \   000000F0   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000F2   0xF5B6 0x6FE0      CMP      R6,#+1792
   \   000000F6   0xD02C             BEQ.N    ??TIM_DMAConfig_2
   \   000000F8   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000FA   0xF5B6 0x6F00      CMP      R6,#+2048
   \   000000FE   0xD028             BEQ.N    ??TIM_DMAConfig_2
   \   00000100   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000102   0xF5B6 0x6F10      CMP      R6,#+2304
   \   00000106   0xD024             BEQ.N    ??TIM_DMAConfig_2
   \   00000108   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000010A   0xF5B6 0x6F20      CMP      R6,#+2560
   \   0000010E   0xD020             BEQ.N    ??TIM_DMAConfig_2
   \   00000110   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000112   0xF5B6 0x6F30      CMP      R6,#+2816
   \   00000116   0xD01C             BEQ.N    ??TIM_DMAConfig_2
   \   00000118   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000011A   0xF5B6 0x6F40      CMP      R6,#+3072
   \   0000011E   0xD018             BEQ.N    ??TIM_DMAConfig_2
   \   00000120   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000122   0xF5B6 0x6F50      CMP      R6,#+3328
   \   00000126   0xD014             BEQ.N    ??TIM_DMAConfig_2
   \   00000128   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000012A   0xF5B6 0x6F60      CMP      R6,#+3584
   \   0000012E   0xD010             BEQ.N    ??TIM_DMAConfig_2
   \   00000130   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000132   0xF5B6 0x6F70      CMP      R6,#+3840
   \   00000136   0xD00C             BEQ.N    ??TIM_DMAConfig_2
   \   00000138   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000013A   0xF5B6 0x5F80      CMP      R6,#+4096
   \   0000013E   0xD008             BEQ.N    ??TIM_DMAConfig_2
   \   00000140   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000142   0xF5B6 0x5F88      CMP      R6,#+4352
   \   00000146   0xD004             BEQ.N    ??TIM_DMAConfig_2
   \   00000148   0xF640 0x211A      MOVW     R1,#+2586
   \   0000014C   0x....             LDR.N    R0,??DataTable72
   \   0000014E   0x.... 0x....      BL       assert_failed
   2587          
   2588            /* Set the DMA Base and the DMA Burst Length */
   2589            TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
   \                     ??TIM_DMAConfig_2: (+1)
   \   00000152   0xEA56 0x0005      ORRS     R0,R6,R5
   \   00000156   0xF8A4 0x0048      STRH     R0,[R4, #+72]
   2590          }
   \   0000015A   0xBD70             POP      {R4-R6,PC}       ;; return
   2591          
   2592          /**
   2593            * @brief  Enables or disables the TIMx's DMA Requests.
   2594            * @param  TIMx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the TIM peripheral.
   2595            * @param  TIM_DMASource: specifies the DMA Request sources.
   2596            *          This parameter can be any combination of the following values:
   2597            *            @arg TIM_DMA_Update: TIM update Interrupt source
   2598            *            @arg TIM_DMA_CC1: TIM Capture Compare 1 DMA source
   2599            *            @arg TIM_DMA_CC2: TIM Capture Compare 2 DMA source
   2600            *            @arg TIM_DMA_CC3: TIM Capture Compare 3 DMA source
   2601            *            @arg TIM_DMA_CC4: TIM Capture Compare 4 DMA source
   2602            *            @arg TIM_DMA_COM: TIM Commutation DMA source
   2603            *            @arg TIM_DMA_Trigger: TIM Trigger DMA source
   2604            * @param  NewState: new state of the DMA Request sources.
   2605            *          This parameter can be: ENABLE or DISABLE.
   2606            * @retval None
   2607            */

   \                                 In section .text, align 2, keep-with-next
   2608          void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
   2609          { 
   \                     TIM_DMACmd: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   2610            /* Check the parameters */
   2611            assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable81  ;; 0x40010000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD01E             BEQ.N    ??TIM_DMACmd_0
   \   00000010   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000014   0xD01B             BEQ.N    ??TIM_DMACmd_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable83  ;; 0x40000400
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD017             BEQ.N    ??TIM_DMACmd_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable83_1  ;; 0x40000800
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD013             BEQ.N    ??TIM_DMACmd_0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable83_2  ;; 0x40000c00
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD00F             BEQ.N    ??TIM_DMACmd_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable74  ;; 0x40001000
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD00B             BEQ.N    ??TIM_DMACmd_0
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable74_1  ;; 0x40001400
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD007             BEQ.N    ??TIM_DMACmd_0
   \   0000003E   0x....             LDR.N    R0,??DataTable69  ;; 0x40010400
   \   00000040   0x4284             CMP      R4,R0
   \   00000042   0xD004             BEQ.N    ??TIM_DMACmd_0
   \   00000044   0xF640 0x2133      MOVW     R1,#+2611
   \   00000048   0x....             LDR.N    R0,??DataTable72
   \   0000004A   0x.... 0x....      BL       assert_failed
   2612            assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
   \                     ??TIM_DMACmd_0: (+1)
   \   0000004E   0xF248 0x00FF      MOVW     R0,#+33023
   \   00000052   0x4205             TST      R5,R0
   \   00000054   0xD102             BNE.N    ??TIM_DMACmd_1
   \   00000056   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000058   0x2D00             CMP      R5,#+0
   \   0000005A   0xD104             BNE.N    ??TIM_DMACmd_2
   \                     ??TIM_DMACmd_1: (+1)
   \   0000005C   0xF640 0x2134      MOVW     R1,#+2612
   \   00000060   0x....             LDR.N    R0,??DataTable72
   \   00000062   0x.... 0x....      BL       assert_failed
   2613            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \                     ??TIM_DMACmd_2: (+1)
   \   00000066   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000068   0x2E00             CMP      R6,#+0
   \   0000006A   0xD007             BEQ.N    ??TIM_DMACmd_3
   \   0000006C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000006E   0x2E01             CMP      R6,#+1
   \   00000070   0xD004             BEQ.N    ??TIM_DMACmd_3
   \   00000072   0xF640 0x2135      MOVW     R1,#+2613
   \   00000076   0x....             LDR.N    R0,??DataTable72
   \   00000078   0x.... 0x....      BL       assert_failed
   2614            
   2615            if (NewState != DISABLE)
   \                     ??TIM_DMACmd_3: (+1)
   \   0000007C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000007E   0x2E00             CMP      R6,#+0
   \   00000080   0xD003             BEQ.N    ??TIM_DMACmd_4
   2616            {
   2617              /* Enable the DMA sources */
   2618              TIMx->DIER |= TIM_DMASource; 
   \   00000082   0x89A0             LDRH     R0,[R4, #+12]
   \   00000084   0x4328             ORRS     R0,R5,R0
   \   00000086   0x81A0             STRH     R0,[R4, #+12]
   \   00000088   0xE002             B.N      ??TIM_DMACmd_5
   2619            }
   2620            else
   2621            {
   2622              /* Disable the DMA sources */
   2623              TIMx->DIER &= (uint16_t)~TIM_DMASource;
   \                     ??TIM_DMACmd_4: (+1)
   \   0000008A   0x89A0             LDRH     R0,[R4, #+12]
   \   0000008C   0x43A8             BICS     R0,R0,R5
   \   0000008E   0x81A0             STRH     R0,[R4, #+12]
   2624            }
   2625          }
   \                     ??TIM_DMACmd_5: (+1)
   \   00000090   0xBD70             POP      {R4-R6,PC}       ;; return
   2626          
   2627          /**
   2628            * @brief  Selects the TIMx peripheral Capture Compare DMA source.
   2629            * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
   2630            * @param  NewState: new state of the Capture Compare DMA source
   2631            *          This parameter can be: ENABLE or DISABLE.
   2632            * @retval None
   2633            */

   \                                 In section .text, align 2, keep-with-next
   2634          void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
   2635          {
   \                     TIM_SelectCCDMA: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   2636            /* Check the parameters */
   2637            assert_param(IS_TIM_LIST3_PERIPH(TIMx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable81  ;; 0x40010000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD017             BEQ.N    ??TIM_SelectCCDMA_0
   \   0000000E   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000012   0xD014             BEQ.N    ??TIM_SelectCCDMA_0
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable83  ;; 0x40000400
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD010             BEQ.N    ??TIM_SelectCCDMA_0
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable83_1  ;; 0x40000800
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD00C             BEQ.N    ??TIM_SelectCCDMA_0
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable83_2  ;; 0x40000c00
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD008             BEQ.N    ??TIM_SelectCCDMA_0
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable83_3  ;; 0x40010400
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD004             BEQ.N    ??TIM_SelectCCDMA_0
   \   00000034   0xF640 0x214D      MOVW     R1,#+2637
   \   00000038   0x....             LDR.N    R0,??DataTable72
   \   0000003A   0x.... 0x....      BL       assert_failed
   2638            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \                     ??TIM_SelectCCDMA_0: (+1)
   \   0000003E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000040   0x2D00             CMP      R5,#+0
   \   00000042   0xD007             BEQ.N    ??TIM_SelectCCDMA_1
   \   00000044   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000046   0x2D01             CMP      R5,#+1
   \   00000048   0xD004             BEQ.N    ??TIM_SelectCCDMA_1
   \   0000004A   0xF640 0x214E      MOVW     R1,#+2638
   \   0000004E   0x....             LDR.N    R0,??DataTable72
   \   00000050   0x.... 0x....      BL       assert_failed
   2639          
   2640            if (NewState != DISABLE)
   \                     ??TIM_SelectCCDMA_1: (+1)
   \   00000054   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000056   0x2D00             CMP      R5,#+0
   \   00000058   0xD004             BEQ.N    ??TIM_SelectCCDMA_2
   2641            {
   2642              /* Set the CCDS Bit */
   2643              TIMx->CR2 |= TIM_CR2_CCDS;
   \   0000005A   0x88A0             LDRH     R0,[R4, #+4]
   \   0000005C   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000060   0x80A0             STRH     R0,[R4, #+4]
   \   00000062   0xE004             B.N      ??TIM_SelectCCDMA_3
   2644            }
   2645            else
   2646            {
   2647              /* Reset the CCDS Bit */
   2648              TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
   \                     ??TIM_SelectCCDMA_2: (+1)
   \   00000064   0x88A0             LDRH     R0,[R4, #+4]
   \   00000066   0xF64F 0x71F7      MOVW     R1,#+65527
   \   0000006A   0x4008             ANDS     R0,R1,R0
   \   0000006C   0x80A0             STRH     R0,[R4, #+4]
   2649            }
   2650          }
   \                     ??TIM_SelectCCDMA_3: (+1)
   \   0000006E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   2651          /**
   2652            * @}
   2653            */
   2654          
   2655          /** @defgroup TIM_Group6 Clocks management functions
   2656           *  @brief    Clocks management functions
   2657           *
   2658          @verbatim   
   2659           ===============================================================================
   2660                                   Clocks management functions
   2661           ===============================================================================  
   2662          
   2663          @endverbatim
   2664            * @{
   2665            */
   2666          
   2667          /**
   2668            * @brief  Configures the TIMx internal Clock
   2669            * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
   2670            *         peripheral.
   2671            * @retval None
   2672            */

   \                                 In section .text, align 2, keep-with-next
   2673          void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
   2674          {
   \                     TIM_InternalClockConfig: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   2675            /* Check the parameters */
   2676            assert_param(IS_TIM_LIST2_PERIPH(TIMx));
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable81  ;; 0x40010000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD01D             BEQ.N    ??TIM_InternalClockConfig_0
   \   0000000C   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000010   0xD01A             BEQ.N    ??TIM_InternalClockConfig_0
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable83  ;; 0x40000400
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xD016             BEQ.N    ??TIM_InternalClockConfig_0
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable83_1  ;; 0x40000800
   \   0000001E   0x4284             CMP      R4,R0
   \   00000020   0xD012             BEQ.N    ??TIM_InternalClockConfig_0
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable83_2  ;; 0x40000c00
   \   00000026   0x4284             CMP      R4,R0
   \   00000028   0xD00E             BEQ.N    ??TIM_InternalClockConfig_0
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable83_3  ;; 0x40010400
   \   0000002E   0x4284             CMP      R4,R0
   \   00000030   0xD00A             BEQ.N    ??TIM_InternalClockConfig_0
   \   00000032   0x....             LDR.N    R0,??DataTable74_2  ;; 0x40014000
   \   00000034   0x4284             CMP      R4,R0
   \   00000036   0xD007             BEQ.N    ??TIM_InternalClockConfig_0
   \   00000038   0x....             LDR.N    R0,??DataTable74_5  ;; 0x40001800
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD004             BEQ.N    ??TIM_InternalClockConfig_0
   \   0000003E   0xF640 0x2174      MOVW     R1,#+2676
   \   00000042   0x....             LDR.N    R0,??DataTable72
   \   00000044   0x.... 0x....      BL       assert_failed
   2677          
   2678            /* Disable slave mode to clock the prescaler directly with the internal clock */
   2679            TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
   \                     ??TIM_InternalClockConfig_0: (+1)
   \   00000048   0x8920             LDRH     R0,[R4, #+8]
   \   0000004A   0xF64F 0x71F8      MOVW     R1,#+65528
   \   0000004E   0x4008             ANDS     R0,R1,R0
   \   00000050   0x8120             STRH     R0,[R4, #+8]
   2680          }
   \   00000052   0xBD10             POP      {R4,PC}          ;; return
   2681          
   2682          /**
   2683            * @brief  Configures the TIMx Internal Trigger as External Clock
   2684            * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
   2685            *         peripheral.
   2686            * @param  TIM_InputTriggerSource: Trigger source.
   2687            *          This parameter can be one of the following values:
   2688            *            @arg TIM_TS_ITR0: Internal Trigger 0
   2689            *            @arg TIM_TS_ITR1: Internal Trigger 1
   2690            *            @arg TIM_TS_ITR2: Internal Trigger 2
   2691            *            @arg TIM_TS_ITR3: Internal Trigger 3
   2692            * @retval None
   2693            */

   \                                 In section .text, align 2, keep-with-next
   2694          void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
   2695          {
   \                     TIM_ITRxExternalClockConfig: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   2696            /* Check the parameters */
   2697            assert_param(IS_TIM_LIST2_PERIPH(TIMx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable81  ;; 0x40010000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD01D             BEQ.N    ??TIM_ITRxExternalClockConfig_0
   \   0000000E   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000012   0xD01A             BEQ.N    ??TIM_ITRxExternalClockConfig_0
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable83  ;; 0x40000400
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD016             BEQ.N    ??TIM_ITRxExternalClockConfig_0
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable83_1  ;; 0x40000800
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD012             BEQ.N    ??TIM_ITRxExternalClockConfig_0
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable83_2  ;; 0x40000c00
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD00E             BEQ.N    ??TIM_ITRxExternalClockConfig_0
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable83_3  ;; 0x40010400
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD00A             BEQ.N    ??TIM_ITRxExternalClockConfig_0
   \   00000034   0x....             LDR.N    R0,??DataTable74_2  ;; 0x40014000
   \   00000036   0x4284             CMP      R4,R0
   \   00000038   0xD007             BEQ.N    ??TIM_ITRxExternalClockConfig_0
   \   0000003A   0x....             LDR.N    R0,??DataTable74_5  ;; 0x40001800
   \   0000003C   0x4284             CMP      R4,R0
   \   0000003E   0xD004             BEQ.N    ??TIM_ITRxExternalClockConfig_0
   \   00000040   0xF640 0x2189      MOVW     R1,#+2697
   \   00000044   0x....             LDR.N    R0,??DataTable72
   \   00000046   0x.... 0x....      BL       assert_failed
   2698            assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
   \                     ??TIM_ITRxExternalClockConfig_0: (+1)
   \   0000004A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004C   0x2D00             CMP      R5,#+0
   \   0000004E   0xD00D             BEQ.N    ??TIM_ITRxExternalClockConfig_1
   \   00000050   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000052   0x2D10             CMP      R5,#+16
   \   00000054   0xD00A             BEQ.N    ??TIM_ITRxExternalClockConfig_1
   \   00000056   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000058   0x2D20             CMP      R5,#+32
   \   0000005A   0xD007             BEQ.N    ??TIM_ITRxExternalClockConfig_1
   \   0000005C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000005E   0x2D30             CMP      R5,#+48
   \   00000060   0xD004             BEQ.N    ??TIM_ITRxExternalClockConfig_1
   \   00000062   0xF640 0x218A      MOVW     R1,#+2698
   \   00000066   0x....             LDR.N    R0,??DataTable72
   \   00000068   0x.... 0x....      BL       assert_failed
   2699          
   2700            /* Select the Internal Trigger */
   2701            TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
   \                     ??TIM_ITRxExternalClockConfig_1: (+1)
   \   0000006C   0x0029             MOVS     R1,R5
   \   0000006E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000070   0x0020             MOVS     R0,R4
   \   00000072   0x.... 0x....      BL       TIM_SelectInputTrigger
   2702          
   2703            /* Select the External clock mode1 */
   2704            TIMx->SMCR |= TIM_SlaveMode_External1;
   \   00000076   0x8920             LDRH     R0,[R4, #+8]
   \   00000078   0xF050 0x0007      ORRS     R0,R0,#0x7
   \   0000007C   0x8120             STRH     R0,[R4, #+8]
   2705          }
   \   0000007E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   2706          
   2707          /**
   2708            * @brief  Configures the TIMx Trigger as External Clock
   2709            * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13 or 14  
   2710            *         to select the TIM peripheral.
   2711            * @param  TIM_TIxExternalCLKSource: Trigger source.
   2712            *          This parameter can be one of the following values:
   2713            *            @arg TIM_TIxExternalCLK1Source_TI1ED: TI1 Edge Detector
   2714            *            @arg TIM_TIxExternalCLK1Source_TI1: Filtered Timer Input 1
   2715            *            @arg TIM_TIxExternalCLK1Source_TI2: Filtered Timer Input 2
   2716            * @param  TIM_ICPolarity: specifies the TIx Polarity.
   2717            *          This parameter can be one of the following values:
   2718            *            @arg TIM_ICPolarity_Rising
   2719            *            @arg TIM_ICPolarity_Falling
   2720            * @param  ICFilter: specifies the filter value.
   2721            *          This parameter must be a value between 0x0 and 0xF.
   2722            * @retval None
   2723            */

   \                                 In section .text, align 2, keep-with-next
   2724          void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
   2725                                          uint16_t TIM_ICPolarity, uint16_t ICFilter)
   2726          {
   \                     TIM_TIxExternalClockConfig: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
   2727            /* Check the parameters */
   2728            assert_param(IS_TIM_LIST1_PERIPH(TIMx));
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable81  ;; 0x40010000
   \   0000000E   0x4284             CMP      R4,R0
   \   00000010   0xD02A             BEQ.N    ??TIM_TIxExternalClockConfig_0
   \   00000012   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000016   0xD027             BEQ.N    ??TIM_TIxExternalClockConfig_0
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable83  ;; 0x40000400
   \   0000001C   0x4284             CMP      R4,R0
   \   0000001E   0xD023             BEQ.N    ??TIM_TIxExternalClockConfig_0
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable83_1  ;; 0x40000800
   \   00000024   0x4284             CMP      R4,R0
   \   00000026   0xD01F             BEQ.N    ??TIM_TIxExternalClockConfig_0
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable83_2  ;; 0x40000c00
   \   0000002C   0x4284             CMP      R4,R0
   \   0000002E   0xD01B             BEQ.N    ??TIM_TIxExternalClockConfig_0
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable83_3  ;; 0x40010400
   \   00000034   0x4284             CMP      R4,R0
   \   00000036   0xD017             BEQ.N    ??TIM_TIxExternalClockConfig_0
   \   00000038   0x....             LDR.N    R0,??DataTable74_2  ;; 0x40014000
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD014             BEQ.N    ??TIM_TIxExternalClockConfig_0
   \   0000003E   0x....             LDR.N    R0,??DataTable74_3  ;; 0x40014400
   \   00000040   0x4284             CMP      R4,R0
   \   00000042   0xD011             BEQ.N    ??TIM_TIxExternalClockConfig_0
   \   00000044   0x....             LDR.N    R0,??DataTable74_4  ;; 0x40014800
   \   00000046   0x4284             CMP      R4,R0
   \   00000048   0xD00E             BEQ.N    ??TIM_TIxExternalClockConfig_0
   \   0000004A   0x....             LDR.N    R0,??DataTable74_5  ;; 0x40001800
   \   0000004C   0x4284             CMP      R4,R0
   \   0000004E   0xD00B             BEQ.N    ??TIM_TIxExternalClockConfig_0
   \   00000050   0x....             LDR.N    R0,??DataTable76  ;; 0x40001c00
   \   00000052   0x4284             CMP      R4,R0
   \   00000054   0xD008             BEQ.N    ??TIM_TIxExternalClockConfig_0
   \   00000056   0x....             LDR.N    R0,??DataTable76_1  ;; 0x40002000
   \   00000058   0x4284             CMP      R4,R0
   \   0000005A   0xD005             BEQ.N    ??TIM_TIxExternalClockConfig_0
   \   0000005C   0xF640 0x21A8      MOVW     R1,#+2728
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable83_4
   \   00000064   0x.... 0x....      BL       assert_failed
   2729            assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
   \                     ??TIM_TIxExternalClockConfig_0: (+1)
   \   00000068   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000006A   0x2E00             CMP      R6,#+0
   \   0000006C   0xD00B             BEQ.N    ??TIM_TIxExternalClockConfig_1
   \   0000006E   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000070   0x2E02             CMP      R6,#+2
   \   00000072   0xD008             BEQ.N    ??TIM_TIxExternalClockConfig_1
   \   00000074   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000076   0x2E0A             CMP      R6,#+10
   \   00000078   0xD005             BEQ.N    ??TIM_TIxExternalClockConfig_1
   \   0000007A   0xF640 0x21A9      MOVW     R1,#+2729
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable83_4
   \   00000082   0x.... 0x....      BL       assert_failed
   2730            assert_param(IS_TIM_IC_FILTER(ICFilter));
   \                     ??TIM_TIxExternalClockConfig_1: (+1)
   \   00000086   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000088   0x2F10             CMP      R7,#+16
   \   0000008A   0xDB05             BLT.N    ??TIM_TIxExternalClockConfig_2
   \   0000008C   0xF640 0x21AA      MOVW     R1,#+2730
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable83_4
   \   00000094   0x.... 0x....      BL       assert_failed
   2731          
   2732            /* Configure the Timer Input Clock Source */
   2733            if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
   \                     ??TIM_TIxExternalClockConfig_2: (+1)
   \   00000098   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000009A   0x2D60             CMP      R5,#+96
   \   0000009C   0xD108             BNE.N    ??TIM_TIxExternalClockConfig_3
   2734            {
   2735              TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
   \   0000009E   0x003B             MOVS     R3,R7
   \   000000A0   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   000000A2   0x2201             MOVS     R2,#+1
   \   000000A4   0x0031             MOVS     R1,R6
   \   000000A6   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000A8   0x0020             MOVS     R0,R4
   \   000000AA   0x.... 0x....      BL       TI2_Config
   \   000000AE   0xE007             B.N      ??TIM_TIxExternalClockConfig_4
   2736            }
   2737            else
   2738            {
   2739              TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
   \                     ??TIM_TIxExternalClockConfig_3: (+1)
   \   000000B0   0x003B             MOVS     R3,R7
   \   000000B2   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   000000B4   0x2201             MOVS     R2,#+1
   \   000000B6   0x0031             MOVS     R1,R6
   \   000000B8   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000BA   0x0020             MOVS     R0,R4
   \   000000BC   0x.... 0x....      BL       TI1_Config
   2740            }
   2741            /* Select the Trigger source */
   2742            TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
   \                     ??TIM_TIxExternalClockConfig_4: (+1)
   \   000000C0   0x0029             MOVS     R1,R5
   \   000000C2   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000C4   0x0020             MOVS     R0,R4
   \   000000C6   0x.... 0x....      BL       TIM_SelectInputTrigger
   2743            /* Select the External clock mode1 */
   2744            TIMx->SMCR |= TIM_SlaveMode_External1;
   \   000000CA   0x8920             LDRH     R0,[R4, #+8]
   \   000000CC   0xF050 0x0007      ORRS     R0,R0,#0x7
   \   000000D0   0x8120             STRH     R0,[R4, #+8]
   2745          }
   \   000000D2   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
   2746          
   2747          /**
   2748            * @brief  Configures the External clock Mode1
   2749            * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
   2750            * @param  TIM_ExtTRGPrescaler: The external Trigger Prescaler.
   2751            *          This parameter can be one of the following values:
   2752            *            @arg TIM_ExtTRGPSC_OFF: ETRP Prescaler OFF.
   2753            *            @arg TIM_ExtTRGPSC_DIV2: ETRP frequency divided by 2.
   2754            *            @arg TIM_ExtTRGPSC_DIV4: ETRP frequency divided by 4.
   2755            *            @arg TIM_ExtTRGPSC_DIV8: ETRP frequency divided by 8.
   2756            * @param  TIM_ExtTRGPolarity: The external Trigger Polarity.
   2757            *          This parameter can be one of the following values:
   2758            *            @arg TIM_ExtTRGPolarity_Inverted: active low or falling edge active.
   2759            *            @arg TIM_ExtTRGPolarity_NonInverted: active high or rising edge active.
   2760            * @param  ExtTRGFilter: External Trigger Filter.
   2761            *          This parameter must be a value between 0x00 and 0x0F
   2762            * @retval None
   2763            */

   \                                 In section .text, align 2, keep-with-next
   2764          void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
   2765                                      uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
   2766          {
   \                     TIM_ETRClockMode1Config: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
   2767            uint16_t tmpsmcr = 0;
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
   2768          
   2769            /* Check the parameters */
   2770            assert_param(IS_TIM_LIST3_PERIPH(TIMx));
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable81  ;; 0x40010000
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD018             BEQ.N    ??TIM_ETRClockMode1Config_0
   \   00000018   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   0000001C   0xD015             BEQ.N    ??TIM_ETRClockMode1Config_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable83  ;; 0x40000400
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD011             BEQ.N    ??TIM_ETRClockMode1Config_0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable83_1  ;; 0x40000800
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD00D             BEQ.N    ??TIM_ETRClockMode1Config_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable83_2  ;; 0x40000c00
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD009             BEQ.N    ??TIM_ETRClockMode1Config_0
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable83_3  ;; 0x40010400
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD005             BEQ.N    ??TIM_ETRClockMode1Config_0
   \   0000003E   0xF640 0x21D2      MOVW     R1,#+2770
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable83_4
   \   00000046   0x.... 0x....      BL       assert_failed
   2771            assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
   \                     ??TIM_ETRClockMode1Config_0: (+1)
   \   0000004A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004C   0x2D00             CMP      R5,#+0
   \   0000004E   0xD011             BEQ.N    ??TIM_ETRClockMode1Config_1
   \   00000050   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000052   0xF5B5 0x5F80      CMP      R5,#+4096
   \   00000056   0xD00D             BEQ.N    ??TIM_ETRClockMode1Config_1
   \   00000058   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000005A   0xF5B5 0x5F00      CMP      R5,#+8192
   \   0000005E   0xD009             BEQ.N    ??TIM_ETRClockMode1Config_1
   \   00000060   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000062   0xF5B5 0x5F40      CMP      R5,#+12288
   \   00000066   0xD005             BEQ.N    ??TIM_ETRClockMode1Config_1
   \   00000068   0xF640 0x21D3      MOVW     R1,#+2771
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable83_4
   \   00000070   0x.... 0x....      BL       assert_failed
   2772            assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
   \                     ??TIM_ETRClockMode1Config_1: (+1)
   \   00000074   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000076   0xF5B6 0x4F00      CMP      R6,#+32768
   \   0000007A   0xD008             BEQ.N    ??TIM_ETRClockMode1Config_2
   \   0000007C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000007E   0x2E00             CMP      R6,#+0
   \   00000080   0xD005             BEQ.N    ??TIM_ETRClockMode1Config_2
   \   00000082   0xF640 0x21D4      MOVW     R1,#+2772
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable83_4
   \   0000008A   0x.... 0x....      BL       assert_failed
   2773            assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
   \                     ??TIM_ETRClockMode1Config_2: (+1)
   \   0000008E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000090   0x2F10             CMP      R7,#+16
   \   00000092   0xDB05             BLT.N    ??TIM_ETRClockMode1Config_3
   \   00000094   0xF640 0x21D5      MOVW     R1,#+2773
   \   00000098   0x.... 0x....      LDR.W    R0,??DataTable83_4
   \   0000009C   0x.... 0x....      BL       assert_failed
   2774            /* Configure the ETR Clock source */
   2775            TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
   \                     ??TIM_ETRClockMode1Config_3: (+1)
   \   000000A0   0x003B             MOVS     R3,R7
   \   000000A2   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   000000A4   0x0032             MOVS     R2,R6
   \   000000A6   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000A8   0x0029             MOVS     R1,R5
   \   000000AA   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000AC   0x0020             MOVS     R0,R4
   \   000000AE   0x.... 0x....      BL       TIM_ETRConfig
   2776            
   2777            /* Get the TIMx SMCR register value */
   2778            tmpsmcr = TIMx->SMCR;
   \   000000B2   0x8920             LDRH     R0,[R4, #+8]
   \   000000B4   0x4680             MOV      R8,R0
   2779          
   2780            /* Reset the SMS Bits */
   2781            tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
   \   000000B6   0xF64F 0x70F8      MOVW     R0,#+65528
   \   000000BA   0xEA10 0x0808      ANDS     R8,R0,R8
   2782          
   2783            /* Select the External clock mode1 */
   2784            tmpsmcr |= TIM_SlaveMode_External1;
   \   000000BE   0xF058 0x0807      ORRS     R8,R8,#0x7
   2785          
   2786            /* Select the Trigger selection : ETRF */
   2787            tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
   \   000000C2   0xF64F 0x708F      MOVW     R0,#+65423
   \   000000C6   0xEA10 0x0808      ANDS     R8,R0,R8
   2788            tmpsmcr |= TIM_TS_ETRF;
   \   000000CA   0xF058 0x0870      ORRS     R8,R8,#0x70
   2789          
   2790            /* Write to TIMx SMCR */
   2791            TIMx->SMCR = tmpsmcr;
   \   000000CE   0xF8A4 0x8008      STRH     R8,[R4, #+8]
   2792          }
   \   000000D2   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   2793          
   2794          /**
   2795            * @brief  Configures the External clock Mode2
   2796            * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
   2797            * @param  TIM_ExtTRGPrescaler: The external Trigger Prescaler.
   2798            *          This parameter can be one of the following values:
   2799            *            @arg TIM_ExtTRGPSC_OFF: ETRP Prescaler OFF.
   2800            *            @arg TIM_ExtTRGPSC_DIV2: ETRP frequency divided by 2.
   2801            *            @arg TIM_ExtTRGPSC_DIV4: ETRP frequency divided by 4.
   2802            *            @arg TIM_ExtTRGPSC_DIV8: ETRP frequency divided by 8.
   2803            * @param  TIM_ExtTRGPolarity: The external Trigger Polarity.
   2804            *          This parameter can be one of the following values:
   2805            *            @arg TIM_ExtTRGPolarity_Inverted: active low or falling edge active.
   2806            *            @arg TIM_ExtTRGPolarity_NonInverted: active high or rising edge active.
   2807            * @param  ExtTRGFilter: External Trigger Filter.
   2808            *          This parameter must be a value between 0x00 and 0x0F
   2809            * @retval None
   2810            */

   \                                 In section .text, align 2, keep-with-next
   2811          void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
   2812                                       uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
   2813          {
   \                     TIM_ETRClockMode2Config: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
   2814            /* Check the parameters */
   2815            assert_param(IS_TIM_LIST3_PERIPH(TIMx));
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable81  ;; 0x40010000
   \   0000000E   0x4284             CMP      R4,R0
   \   00000010   0xD018             BEQ.N    ??TIM_ETRClockMode2Config_0
   \   00000012   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000016   0xD015             BEQ.N    ??TIM_ETRClockMode2Config_0
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable83  ;; 0x40000400
   \   0000001C   0x4284             CMP      R4,R0
   \   0000001E   0xD011             BEQ.N    ??TIM_ETRClockMode2Config_0
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable83_1  ;; 0x40000800
   \   00000024   0x4284             CMP      R4,R0
   \   00000026   0xD00D             BEQ.N    ??TIM_ETRClockMode2Config_0
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable83_2  ;; 0x40000c00
   \   0000002C   0x4284             CMP      R4,R0
   \   0000002E   0xD009             BEQ.N    ??TIM_ETRClockMode2Config_0
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable83_3  ;; 0x40010400
   \   00000034   0x4284             CMP      R4,R0
   \   00000036   0xD005             BEQ.N    ??TIM_ETRClockMode2Config_0
   \   00000038   0xF640 0x21FF      MOVW     R1,#+2815
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable83_4
   \   00000040   0x.... 0x....      BL       assert_failed
   2816            assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
   \                     ??TIM_ETRClockMode2Config_0: (+1)
   \   00000044   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000046   0x2D00             CMP      R5,#+0
   \   00000048   0xD011             BEQ.N    ??TIM_ETRClockMode2Config_1
   \   0000004A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004C   0xF5B5 0x5F80      CMP      R5,#+4096
   \   00000050   0xD00D             BEQ.N    ??TIM_ETRClockMode2Config_1
   \   00000052   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000054   0xF5B5 0x5F00      CMP      R5,#+8192
   \   00000058   0xD009             BEQ.N    ??TIM_ETRClockMode2Config_1
   \   0000005A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000005C   0xF5B5 0x5F40      CMP      R5,#+12288
   \   00000060   0xD005             BEQ.N    ??TIM_ETRClockMode2Config_1
   \   00000062   0xF44F 0x6130      MOV      R1,#+2816
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable83_4
   \   0000006A   0x.... 0x....      BL       assert_failed
   2817            assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
   \                     ??TIM_ETRClockMode2Config_1: (+1)
   \   0000006E   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000070   0xF5B6 0x4F00      CMP      R6,#+32768
   \   00000074   0xD008             BEQ.N    ??TIM_ETRClockMode2Config_2
   \   00000076   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000078   0x2E00             CMP      R6,#+0
   \   0000007A   0xD005             BEQ.N    ??TIM_ETRClockMode2Config_2
   \   0000007C   0xF640 0x3101      MOVW     R1,#+2817
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable83_4
   \   00000084   0x.... 0x....      BL       assert_failed
   2818            assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
   \                     ??TIM_ETRClockMode2Config_2: (+1)
   \   00000088   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000008A   0x2F10             CMP      R7,#+16
   \   0000008C   0xDB05             BLT.N    ??TIM_ETRClockMode2Config_3
   \   0000008E   0xF640 0x3102      MOVW     R1,#+2818
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable83_4
   \   00000096   0x.... 0x....      BL       assert_failed
   2819          
   2820            /* Configure the ETR Clock source */
   2821            TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
   \                     ??TIM_ETRClockMode2Config_3: (+1)
   \   0000009A   0x003B             MOVS     R3,R7
   \   0000009C   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000009E   0x0032             MOVS     R2,R6
   \   000000A0   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000A2   0x0029             MOVS     R1,R5
   \   000000A4   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000A6   0x0020             MOVS     R0,R4
   \   000000A8   0x.... 0x....      BL       TIM_ETRConfig
   2822          
   2823            /* Enable the External clock mode2 */
   2824            TIMx->SMCR |= TIM_SMCR_ECE;
   \   000000AC   0x8920             LDRH     R0,[R4, #+8]
   \   000000AE   0xF450 0x4080      ORRS     R0,R0,#0x4000
   \   000000B2   0x8120             STRH     R0,[R4, #+8]
   2825          }
   \   000000B4   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
   2826          /**
   2827            * @}
   2828            */
   2829          
   2830          /** @defgroup TIM_Group7 Synchronization management functions
   2831           *  @brief    Synchronization management functions 
   2832           *
   2833          @verbatim   
   2834           ===============================================================================
   2835                                 Synchronization management functions
   2836           ===============================================================================  
   2837                             
   2838                 ===================================================================      
   2839                        TIM Driver: how to use it in synchronization Mode
   2840                 =================================================================== 
   2841                 Case of two/several Timers
   2842                 **************************
   2843                 1. Configure the Master Timers using the following functions:
   2844                    - void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource); 
   2845                    - void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode);  
   2846                 2. Configure the Slave Timers using the following functions: 
   2847                    - void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource);  
   2848                    - void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode); 
   2849                    
   2850                 Case of Timers and external trigger(ETR pin)
   2851                 ********************************************       
   2852                 1. Configure the External trigger using this function:
   2853                    - void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
   2854                                         uint16_t ExtTRGFilter);
   2855                 2. Configure the Slave Timers using the following functions: 
   2856                    - void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource);  
   2857                    - void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode); 
   2858          
   2859          @endverbatim
   2860            * @{
   2861            */
   2862          
   2863          /**
   2864            * @brief  Selects the Input Trigger source
   2865            * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13 or 14  
   2866            *         to select the TIM peripheral.
   2867            * @param  TIM_InputTriggerSource: The Input Trigger source.
   2868            *          This parameter can be one of the following values:
   2869            *            @arg TIM_TS_ITR0: Internal Trigger 0
   2870            *            @arg TIM_TS_ITR1: Internal Trigger 1
   2871            *            @arg TIM_TS_ITR2: Internal Trigger 2
   2872            *            @arg TIM_TS_ITR3: Internal Trigger 3
   2873            *            @arg TIM_TS_TI1F_ED: TI1 Edge Detector
   2874            *            @arg TIM_TS_TI1FP1: Filtered Timer Input 1
   2875            *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
   2876            *            @arg TIM_TS_ETRF: External Trigger input
   2877            * @retval None
   2878            */

   \                                 In section .text, align 2, keep-with-next
   2879          void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
   2880          {
   \                     TIM_SelectInputTrigger: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   2881            uint16_t tmpsmcr = 0;
   \   00000006   0x2600             MOVS     R6,#+0
   2882          
   2883            /* Check the parameters */
   2884            assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable81  ;; 0x40010000
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD02E             BEQ.N    ??TIM_SelectInputTrigger_0
   \   00000010   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000014   0xD02B             BEQ.N    ??TIM_SelectInputTrigger_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable83  ;; 0x40000400
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD027             BEQ.N    ??TIM_SelectInputTrigger_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable83_1  ;; 0x40000800
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD023             BEQ.N    ??TIM_SelectInputTrigger_0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable83_2  ;; 0x40000c00
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD01F             BEQ.N    ??TIM_SelectInputTrigger_0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable83_3  ;; 0x40010400
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD01B             BEQ.N    ??TIM_SelectInputTrigger_0
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable83_5  ;; 0x40014000
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD017             BEQ.N    ??TIM_SelectInputTrigger_0
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable83_6  ;; 0x40014400
   \   00000042   0x4284             CMP      R4,R0
   \   00000044   0xD013             BEQ.N    ??TIM_SelectInputTrigger_0
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable83_7  ;; 0x40014800
   \   0000004A   0x4284             CMP      R4,R0
   \   0000004C   0xD00F             BEQ.N    ??TIM_SelectInputTrigger_0
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable83_8  ;; 0x40001800
   \   00000052   0x4284             CMP      R4,R0
   \   00000054   0xD00B             BEQ.N    ??TIM_SelectInputTrigger_0
   \   00000056   0x....             LDR.N    R0,??DataTable76  ;; 0x40001c00
   \   00000058   0x4284             CMP      R4,R0
   \   0000005A   0xD008             BEQ.N    ??TIM_SelectInputTrigger_0
   \   0000005C   0x....             LDR.N    R0,??DataTable76_1  ;; 0x40002000
   \   0000005E   0x4284             CMP      R4,R0
   \   00000060   0xD005             BEQ.N    ??TIM_SelectInputTrigger_0
   \   00000062   0xF640 0x3144      MOVW     R1,#+2884
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable83_4
   \   0000006A   0x.... 0x....      BL       assert_failed
   2885            assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
   \                     ??TIM_SelectInputTrigger_0: (+1)
   \   0000006E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000070   0x2D00             CMP      R5,#+0
   \   00000072   0xD01A             BEQ.N    ??TIM_SelectInputTrigger_1
   \   00000074   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000076   0x2D10             CMP      R5,#+16
   \   00000078   0xD017             BEQ.N    ??TIM_SelectInputTrigger_1
   \   0000007A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000007C   0x2D20             CMP      R5,#+32
   \   0000007E   0xD014             BEQ.N    ??TIM_SelectInputTrigger_1
   \   00000080   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000082   0x2D30             CMP      R5,#+48
   \   00000084   0xD011             BEQ.N    ??TIM_SelectInputTrigger_1
   \   00000086   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000088   0x2D40             CMP      R5,#+64
   \   0000008A   0xD00E             BEQ.N    ??TIM_SelectInputTrigger_1
   \   0000008C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000008E   0x2D50             CMP      R5,#+80
   \   00000090   0xD00B             BEQ.N    ??TIM_SelectInputTrigger_1
   \   00000092   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000094   0x2D60             CMP      R5,#+96
   \   00000096   0xD008             BEQ.N    ??TIM_SelectInputTrigger_1
   \   00000098   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000009A   0x2D70             CMP      R5,#+112
   \   0000009C   0xD005             BEQ.N    ??TIM_SelectInputTrigger_1
   \   0000009E   0xF640 0x3145      MOVW     R1,#+2885
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable83_4
   \   000000A6   0x.... 0x....      BL       assert_failed
   2886          
   2887            /* Get the TIMx SMCR register value */
   2888            tmpsmcr = TIMx->SMCR;
   \                     ??TIM_SelectInputTrigger_1: (+1)
   \   000000AA   0x8920             LDRH     R0,[R4, #+8]
   \   000000AC   0x0006             MOVS     R6,R0
   2889          
   2890            /* Reset the TS Bits */
   2891            tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
   \   000000AE   0xF64F 0x708F      MOVW     R0,#+65423
   \   000000B2   0x4006             ANDS     R6,R0,R6
   2892          
   2893            /* Set the Input Trigger source */
   2894            tmpsmcr |= TIM_InputTriggerSource;
   \   000000B4   0x432E             ORRS     R6,R5,R6
   2895          
   2896            /* Write to TIMx SMCR */
   2897            TIMx->SMCR = tmpsmcr;
   \   000000B6   0x8126             STRH     R6,[R4, #+8]
   2898          }
   \   000000B8   0xBD70             POP      {R4-R6,PC}       ;; return
   2899          
   2900          /**
   2901            * @brief  Selects the TIMx Trigger Output Mode.
   2902            * @param  TIMx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the TIM peripheral.
   2903            *     
   2904            * @param  TIM_TRGOSource: specifies the Trigger Output source.
   2905            *   This parameter can be one of the following values:
   2906            *
   2907            *  - For all TIMx
   2908            *            @arg TIM_TRGOSource_Reset:  The UG bit in the TIM_EGR register is used as the trigger output(TRGO)
   2909            *            @arg TIM_TRGOSource_Enable: The Counter Enable CEN is used as the trigger output(TRGO)
   2910            *            @arg TIM_TRGOSource_Update: The update event is selected as the trigger output(TRGO)
   2911            *
   2912            *  - For all TIMx except TIM6 and TIM7
   2913            *            @arg TIM_TRGOSource_OC1: The trigger output sends a positive pulse when the CC1IF flag
   2914            *                                     is to be set, as soon as a capture or compare match occurs(TRGO)
   2915            *            @arg TIM_TRGOSource_OC1Ref: OC1REF signal is used as the trigger output(TRGO)
   2916            *            @arg TIM_TRGOSource_OC2Ref: OC2REF signal is used as the trigger output(TRGO)
   2917            *            @arg TIM_TRGOSource_OC3Ref: OC3REF signal is used as the trigger output(TRGO)
   2918            *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
   2919            *
   2920            * @retval None
   2921            */

   \                                 In section .text, align 2, keep-with-next
   2922          void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
   2923          {
   \                     TIM_SelectOutputTrigger: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   2924            /* Check the parameters */
   2925            assert_param(IS_TIM_LIST5_PERIPH(TIMx));
   \   00000006   0x....             LDR.N    R0,??DataTable81  ;; 0x40010000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD020             BEQ.N    ??TIM_SelectOutputTrigger_0
   \   0000000C   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000010   0xD01D             BEQ.N    ??TIM_SelectOutputTrigger_0
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable83  ;; 0x40000400
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xD019             BEQ.N    ??TIM_SelectOutputTrigger_0
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable83_1  ;; 0x40000800
   \   0000001E   0x4284             CMP      R4,R0
   \   00000020   0xD015             BEQ.N    ??TIM_SelectOutputTrigger_0
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable83_2  ;; 0x40000c00
   \   00000026   0x4284             CMP      R4,R0
   \   00000028   0xD011             BEQ.N    ??TIM_SelectOutputTrigger_0
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable83_9  ;; 0x40001000
   \   0000002E   0x4284             CMP      R4,R0
   \   00000030   0xD00D             BEQ.N    ??TIM_SelectOutputTrigger_0
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable83_10  ;; 0x40001400
   \   00000036   0x4284             CMP      R4,R0
   \   00000038   0xD009             BEQ.N    ??TIM_SelectOutputTrigger_0
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable83_3  ;; 0x40010400
   \   0000003E   0x4284             CMP      R4,R0
   \   00000040   0xD005             BEQ.N    ??TIM_SelectOutputTrigger_0
   \   00000042   0xF640 0x316D      MOVW     R1,#+2925
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable83_4
   \   0000004A   0x.... 0x....      BL       assert_failed
   2926            assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
   \                     ??TIM_SelectOutputTrigger_0: (+1)
   \   0000004E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000050   0x2D00             CMP      R5,#+0
   \   00000052   0xD01A             BEQ.N    ??TIM_SelectOutputTrigger_1
   \   00000054   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000056   0x2D10             CMP      R5,#+16
   \   00000058   0xD017             BEQ.N    ??TIM_SelectOutputTrigger_1
   \   0000005A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000005C   0x2D20             CMP      R5,#+32
   \   0000005E   0xD014             BEQ.N    ??TIM_SelectOutputTrigger_1
   \   00000060   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000062   0x2D30             CMP      R5,#+48
   \   00000064   0xD011             BEQ.N    ??TIM_SelectOutputTrigger_1
   \   00000066   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000068   0x2D40             CMP      R5,#+64
   \   0000006A   0xD00E             BEQ.N    ??TIM_SelectOutputTrigger_1
   \   0000006C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000006E   0x2D50             CMP      R5,#+80
   \   00000070   0xD00B             BEQ.N    ??TIM_SelectOutputTrigger_1
   \   00000072   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000074   0x2D60             CMP      R5,#+96
   \   00000076   0xD008             BEQ.N    ??TIM_SelectOutputTrigger_1
   \   00000078   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000007A   0x2D70             CMP      R5,#+112
   \   0000007C   0xD005             BEQ.N    ??TIM_SelectOutputTrigger_1
   \   0000007E   0xF640 0x316E      MOVW     R1,#+2926
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable83_4
   \   00000086   0x.... 0x....      BL       assert_failed
   2927          
   2928            /* Reset the MMS Bits */
   2929            TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
   \                     ??TIM_SelectOutputTrigger_1: (+1)
   \   0000008A   0x88A0             LDRH     R0,[R4, #+4]
   \   0000008C   0xF64F 0x718F      MOVW     R1,#+65423
   \   00000090   0x4008             ANDS     R0,R1,R0
   \   00000092   0x80A0             STRH     R0,[R4, #+4]
   2930            /* Select the TRGO source */
   2931            TIMx->CR2 |=  TIM_TRGOSource;
   \   00000094   0x88A0             LDRH     R0,[R4, #+4]
   \   00000096   0x4328             ORRS     R0,R5,R0
   \   00000098   0x80A0             STRH     R0,[R4, #+4]
   2932          }
   \   0000009A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   2933          
   2934          /**
   2935            * @brief  Selects the TIMx Slave Mode.
   2936            * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM peripheral.
   2937            * @param  TIM_SlaveMode: specifies the Timer Slave Mode.
   2938            *          This parameter can be one of the following values:
   2939            *            @arg TIM_SlaveMode_Reset: Rising edge of the selected trigger signal(TRGI) reinitialize 
   2940            *                                      the counter and triggers an update of the registers
   2941            *            @arg TIM_SlaveMode_Gated:     The counter clock is enabled when the trigger signal (TRGI) is high
   2942            *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
   2943            *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
   2944            * @retval None
   2945            */

   \                                 In section .text, align 2, keep-with-next
   2946          void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
   2947          {
   \                     TIM_SelectSlaveMode: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   2948            /* Check the parameters */
   2949            assert_param(IS_TIM_LIST2_PERIPH(TIMx));
   \   00000006   0x....             LDR.N    R0,??DataTable81  ;; 0x40010000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD020             BEQ.N    ??TIM_SelectSlaveMode_0
   \   0000000C   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000010   0xD01D             BEQ.N    ??TIM_SelectSlaveMode_0
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable83  ;; 0x40000400
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xD019             BEQ.N    ??TIM_SelectSlaveMode_0
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable83_1  ;; 0x40000800
   \   0000001E   0x4284             CMP      R4,R0
   \   00000020   0xD015             BEQ.N    ??TIM_SelectSlaveMode_0
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable83_2  ;; 0x40000c00
   \   00000026   0x4284             CMP      R4,R0
   \   00000028   0xD011             BEQ.N    ??TIM_SelectSlaveMode_0
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable83_3  ;; 0x40010400
   \   0000002E   0x4284             CMP      R4,R0
   \   00000030   0xD00D             BEQ.N    ??TIM_SelectSlaveMode_0
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable83_5  ;; 0x40014000
   \   00000036   0x4284             CMP      R4,R0
   \   00000038   0xD009             BEQ.N    ??TIM_SelectSlaveMode_0
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable83_8  ;; 0x40001800
   \   0000003E   0x4284             CMP      R4,R0
   \   00000040   0xD005             BEQ.N    ??TIM_SelectSlaveMode_0
   \   00000042   0xF640 0x3185      MOVW     R1,#+2949
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable83_4
   \   0000004A   0x.... 0x....      BL       assert_failed
   2950            assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
   \                     ??TIM_SelectSlaveMode_0: (+1)
   \   0000004E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000050   0x2D04             CMP      R5,#+4
   \   00000052   0xD00E             BEQ.N    ??TIM_SelectSlaveMode_1
   \   00000054   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000056   0x2D05             CMP      R5,#+5
   \   00000058   0xD00B             BEQ.N    ??TIM_SelectSlaveMode_1
   \   0000005A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000005C   0x2D06             CMP      R5,#+6
   \   0000005E   0xD008             BEQ.N    ??TIM_SelectSlaveMode_1
   \   00000060   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000062   0x2D07             CMP      R5,#+7
   \   00000064   0xD005             BEQ.N    ??TIM_SelectSlaveMode_1
   \   00000066   0xF640 0x3186      MOVW     R1,#+2950
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable83_4
   \   0000006E   0x.... 0x....      BL       assert_failed
   2951          
   2952            /* Reset the SMS Bits */
   2953            TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
   \                     ??TIM_SelectSlaveMode_1: (+1)
   \   00000072   0x8920             LDRH     R0,[R4, #+8]
   \   00000074   0xF64F 0x71F8      MOVW     R1,#+65528
   \   00000078   0x4008             ANDS     R0,R1,R0
   \   0000007A   0x8120             STRH     R0,[R4, #+8]
   2954          
   2955            /* Select the Slave Mode */
   2956            TIMx->SMCR |= TIM_SlaveMode;
   \   0000007C   0x8920             LDRH     R0,[R4, #+8]
   \   0000007E   0x4328             ORRS     R0,R5,R0
   \   00000080   0x8120             STRH     R0,[R4, #+8]
   2957          }
   \   00000082   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   2958          
   2959          /**
   2960            * @brief  Sets or Resets the TIMx Master/Slave Mode.
   2961            * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM peripheral.
   2962            * @param  TIM_MasterSlaveMode: specifies the Timer Master Slave Mode.
   2963            *          This parameter can be one of the following values:
   2964            *            @arg TIM_MasterSlaveMode_Enable: synchronization between the current timer
   2965            *                                             and its slaves (through TRGO)
   2966            *            @arg TIM_MasterSlaveMode_Disable: No action
   2967            * @retval None
   2968            */

   \                                 In section .text, align 2, keep-with-next
   2969          void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
   2970          {
   \                     TIM_SelectMasterSlaveMode: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   2971            /* Check the parameters */
   2972            assert_param(IS_TIM_LIST2_PERIPH(TIMx));
   \   00000006   0x....             LDR.N    R0,??DataTable81  ;; 0x40010000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD019             BEQ.N    ??TIM_SelectMasterSlaveMode_0
   \   0000000C   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000010   0xD016             BEQ.N    ??TIM_SelectMasterSlaveMode_0
   \   00000012   0x....             LDR.N    R0,??DataTable83  ;; 0x40000400
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD013             BEQ.N    ??TIM_SelectMasterSlaveMode_0
   \   00000018   0x....             LDR.N    R0,??DataTable83_1  ;; 0x40000800
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD010             BEQ.N    ??TIM_SelectMasterSlaveMode_0
   \   0000001E   0x....             LDR.N    R0,??DataTable83_2  ;; 0x40000c00
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD00D             BEQ.N    ??TIM_SelectMasterSlaveMode_0
   \   00000024   0x....             LDR.N    R0,??DataTable83_3  ;; 0x40010400
   \   00000026   0x4284             CMP      R4,R0
   \   00000028   0xD00A             BEQ.N    ??TIM_SelectMasterSlaveMode_0
   \   0000002A   0x....             LDR.N    R0,??DataTable83_5  ;; 0x40014000
   \   0000002C   0x4284             CMP      R4,R0
   \   0000002E   0xD007             BEQ.N    ??TIM_SelectMasterSlaveMode_0
   \   00000030   0x....             LDR.N    R0,??DataTable83_8  ;; 0x40001800
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD004             BEQ.N    ??TIM_SelectMasterSlaveMode_0
   \   00000036   0xF640 0x319C      MOVW     R1,#+2972
   \   0000003A   0x....             LDR.N    R0,??DataTable83_4
   \   0000003C   0x.... 0x....      BL       assert_failed
   2973            assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
   \                     ??TIM_SelectMasterSlaveMode_0: (+1)
   \   00000040   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000042   0x2D80             CMP      R5,#+128
   \   00000044   0xD007             BEQ.N    ??TIM_SelectMasterSlaveMode_1
   \   00000046   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000048   0x2D00             CMP      R5,#+0
   \   0000004A   0xD004             BEQ.N    ??TIM_SelectMasterSlaveMode_1
   \   0000004C   0xF640 0x319D      MOVW     R1,#+2973
   \   00000050   0x....             LDR.N    R0,??DataTable83_4
   \   00000052   0x.... 0x....      BL       assert_failed
   2974          
   2975            /* Reset the MSM Bit */
   2976            TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
   \                     ??TIM_SelectMasterSlaveMode_1: (+1)
   \   00000056   0x8920             LDRH     R0,[R4, #+8]
   \   00000058   0xF64F 0x717F      MOVW     R1,#+65407
   \   0000005C   0x4008             ANDS     R0,R1,R0
   \   0000005E   0x8120             STRH     R0,[R4, #+8]
   2977            
   2978            /* Set or Reset the MSM Bit */
   2979            TIMx->SMCR |= TIM_MasterSlaveMode;
   \   00000060   0x8920             LDRH     R0,[R4, #+8]
   \   00000062   0x4328             ORRS     R0,R5,R0
   \   00000064   0x8120             STRH     R0,[R4, #+8]
   2980          }
   \   00000066   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   2981          
   2982          /**
   2983            * @brief  Configures the TIMx External Trigger (ETR).
   2984            * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
   2985            * @param  TIM_ExtTRGPrescaler: The external Trigger Prescaler.
   2986            *          This parameter can be one of the following values:
   2987            *            @arg TIM_ExtTRGPSC_OFF: ETRP Prescaler OFF.
   2988            *            @arg TIM_ExtTRGPSC_DIV2: ETRP frequency divided by 2.
   2989            *            @arg TIM_ExtTRGPSC_DIV4: ETRP frequency divided by 4.
   2990            *            @arg TIM_ExtTRGPSC_DIV8: ETRP frequency divided by 8.
   2991            * @param  TIM_ExtTRGPolarity: The external Trigger Polarity.
   2992            *          This parameter can be one of the following values:
   2993            *            @arg TIM_ExtTRGPolarity_Inverted: active low or falling edge active.
   2994            *            @arg TIM_ExtTRGPolarity_NonInverted: active high or rising edge active.
   2995            * @param  ExtTRGFilter: External Trigger Filter.
   2996            *          This parameter must be a value between 0x00 and 0x0F
   2997            * @retval None
   2998            */

   \                                 In section .text, align 2, keep-with-next
   2999          void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
   3000                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
   3001          {
   \                     TIM_ETRConfig: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
   3002            uint16_t tmpsmcr = 0;
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
   3003          
   3004            /* Check the parameters */
   3005            assert_param(IS_TIM_LIST3_PERIPH(TIMx));
   \   00000010   0x....             LDR.N    R0,??DataTable81  ;; 0x40010000
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD013             BEQ.N    ??TIM_ETRConfig_0
   \   00000016   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   0000001A   0xD010             BEQ.N    ??TIM_ETRConfig_0
   \   0000001C   0x....             LDR.N    R0,??DataTable83  ;; 0x40000400
   \   0000001E   0x4284             CMP      R4,R0
   \   00000020   0xD00D             BEQ.N    ??TIM_ETRConfig_0
   \   00000022   0x....             LDR.N    R0,??DataTable83_1  ;; 0x40000800
   \   00000024   0x4284             CMP      R4,R0
   \   00000026   0xD00A             BEQ.N    ??TIM_ETRConfig_0
   \   00000028   0x....             LDR.N    R0,??DataTable83_2  ;; 0x40000c00
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD007             BEQ.N    ??TIM_ETRConfig_0
   \   0000002E   0x....             LDR.N    R0,??DataTable83_3  ;; 0x40010400
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD004             BEQ.N    ??TIM_ETRConfig_0
   \   00000034   0xF640 0x31BD      MOVW     R1,#+3005
   \   00000038   0x....             LDR.N    R0,??DataTable83_4
   \   0000003A   0x.... 0x....      BL       assert_failed
   3006            assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
   \                     ??TIM_ETRConfig_0: (+1)
   \   0000003E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000040   0x2D00             CMP      R5,#+0
   \   00000042   0xD010             BEQ.N    ??TIM_ETRConfig_1
   \   00000044   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000046   0xF5B5 0x5F80      CMP      R5,#+4096
   \   0000004A   0xD00C             BEQ.N    ??TIM_ETRConfig_1
   \   0000004C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004E   0xF5B5 0x5F00      CMP      R5,#+8192
   \   00000052   0xD008             BEQ.N    ??TIM_ETRConfig_1
   \   00000054   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000056   0xF5B5 0x5F40      CMP      R5,#+12288
   \   0000005A   0xD004             BEQ.N    ??TIM_ETRConfig_1
   \   0000005C   0xF640 0x31BE      MOVW     R1,#+3006
   \   00000060   0x....             LDR.N    R0,??DataTable83_4
   \   00000062   0x.... 0x....      BL       assert_failed
   3007            assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
   \                     ??TIM_ETRConfig_1: (+1)
   \   00000066   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000068   0xF5B6 0x4F00      CMP      R6,#+32768
   \   0000006C   0xD007             BEQ.N    ??TIM_ETRConfig_2
   \   0000006E   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000070   0x2E00             CMP      R6,#+0
   \   00000072   0xD004             BEQ.N    ??TIM_ETRConfig_2
   \   00000074   0xF640 0x31BF      MOVW     R1,#+3007
   \   00000078   0x....             LDR.N    R0,??DataTable83_4
   \   0000007A   0x.... 0x....      BL       assert_failed
   3008            assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
   \                     ??TIM_ETRConfig_2: (+1)
   \   0000007E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000080   0x2F10             CMP      R7,#+16
   \   00000082   0xDB04             BLT.N    ??TIM_ETRConfig_3
   \   00000084   0xF44F 0x613C      MOV      R1,#+3008
   \   00000088   0x....             LDR.N    R0,??DataTable83_4
   \   0000008A   0x.... 0x....      BL       assert_failed
   3009          
   3010            tmpsmcr = TIMx->SMCR;
   \                     ??TIM_ETRConfig_3: (+1)
   \   0000008E   0x8920             LDRH     R0,[R4, #+8]
   \   00000090   0x4680             MOV      R8,R0
   3011          
   3012            /* Reset the ETR Bits */
   3013            tmpsmcr &= SMCR_ETR_MASK;
   \   00000092   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   3014          
   3015            /* Set the Prescaler, the Filter value and the Polarity */
   3016            tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
   \   00000096   0xEA56 0x2007      ORRS     R0,R6,R7, LSL #+8
   \   0000009A   0x4328             ORRS     R0,R0,R5
   \   0000009C   0xEA50 0x0808      ORRS     R8,R0,R8
   3017          
   3018            /* Write to TIMx SMCR */
   3019            TIMx->SMCR = tmpsmcr;
   \   000000A0   0xF8A4 0x8008      STRH     R8,[R4, #+8]
   3020          }
   \   000000A4   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   3021          /**
   3022            * @}
   3023            */
   3024          
   3025          /** @defgroup TIM_Group8 Specific interface management functions
   3026           *  @brief    Specific interface management functions 
   3027           *
   3028          @verbatim   
   3029           ===============================================================================
   3030                              Specific interface management functions
   3031           ===============================================================================  
   3032          
   3033          @endverbatim
   3034            * @{
   3035            */
   3036          
   3037          /**
   3038            * @brief  Configures the TIMx Encoder Interface.
   3039            * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
   3040            *         peripheral.
   3041            * @param  TIM_EncoderMode: specifies the TIMx Encoder Mode.
   3042            *          This parameter can be one of the following values:
   3043            *            @arg TIM_EncoderMode_TI1: Counter counts on TI1FP1 edge depending on TI2FP2 level.
   3044            *            @arg TIM_EncoderMode_TI2: Counter counts on TI2FP2 edge depending on TI1FP1 level.
   3045            *            @arg TIM_EncoderMode_TI12: Counter counts on both TI1FP1 and TI2FP2 edges depending
   3046            *                                       on the level of the other input.
   3047            * @param  TIM_IC1Polarity: specifies the IC1 Polarity
   3048            *          This parameter can be one of the following values:
   3049            *            @arg TIM_ICPolarity_Falling: IC Falling edge.
   3050            *            @arg TIM_ICPolarity_Rising: IC Rising edge.
   3051            * @param  TIM_IC2Polarity: specifies the IC2 Polarity
   3052            *          This parameter can be one of the following values:
   3053            *            @arg TIM_ICPolarity_Falling: IC Falling edge.
   3054            *            @arg TIM_ICPolarity_Rising: IC Rising edge.
   3055            * @retval None
   3056            */

   \                                 In section .text, align 2, keep-with-next
   3057          void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
   3058                                          uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
   3059          {
   \                     TIM_EncoderInterfaceConfig: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
   3060            uint16_t tmpsmcr = 0;
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
   3061            uint16_t tmpccmr1 = 0;
   \   00000010   0xF05F 0x0900      MOVS     R9,#+0
   3062            uint16_t tmpccer = 0;
   \   00000014   0xF05F 0x0A00      MOVS     R10,#+0
   3063              
   3064            /* Check the parameters */
   3065            assert_param(IS_TIM_LIST2_PERIPH(TIMx));
   \   00000018   0x....             LDR.N    R0,??DataTable81  ;; 0x40010000
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD019             BEQ.N    ??TIM_EncoderInterfaceConfig_0
   \   0000001E   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000022   0xD016             BEQ.N    ??TIM_EncoderInterfaceConfig_0
   \   00000024   0x....             LDR.N    R0,??DataTable83  ;; 0x40000400
   \   00000026   0x4284             CMP      R4,R0
   \   00000028   0xD013             BEQ.N    ??TIM_EncoderInterfaceConfig_0
   \   0000002A   0x....             LDR.N    R0,??DataTable83_1  ;; 0x40000800
   \   0000002C   0x4284             CMP      R4,R0
   \   0000002E   0xD010             BEQ.N    ??TIM_EncoderInterfaceConfig_0
   \   00000030   0x....             LDR.N    R0,??DataTable83_2  ;; 0x40000c00
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD00D             BEQ.N    ??TIM_EncoderInterfaceConfig_0
   \   00000036   0x....             LDR.N    R0,??DataTable83_3  ;; 0x40010400
   \   00000038   0x4284             CMP      R4,R0
   \   0000003A   0xD00A             BEQ.N    ??TIM_EncoderInterfaceConfig_0
   \   0000003C   0x....             LDR.N    R0,??DataTable83_5  ;; 0x40014000
   \   0000003E   0x4284             CMP      R4,R0
   \   00000040   0xD007             BEQ.N    ??TIM_EncoderInterfaceConfig_0
   \   00000042   0x....             LDR.N    R0,??DataTable83_8  ;; 0x40001800
   \   00000044   0x4284             CMP      R4,R0
   \   00000046   0xD004             BEQ.N    ??TIM_EncoderInterfaceConfig_0
   \   00000048   0xF640 0x31F9      MOVW     R1,#+3065
   \   0000004C   0x....             LDR.N    R0,??DataTable83_4
   \   0000004E   0x.... 0x....      BL       assert_failed
   3066            assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
   \                     ??TIM_EncoderInterfaceConfig_0: (+1)
   \   00000052   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000054   0x2D01             CMP      R5,#+1
   \   00000056   0xD00A             BEQ.N    ??TIM_EncoderInterfaceConfig_1
   \   00000058   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000005A   0x2D02             CMP      R5,#+2
   \   0000005C   0xD007             BEQ.N    ??TIM_EncoderInterfaceConfig_1
   \   0000005E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000060   0x2D03             CMP      R5,#+3
   \   00000062   0xD004             BEQ.N    ??TIM_EncoderInterfaceConfig_1
   \   00000064   0xF640 0x31FA      MOVW     R1,#+3066
   \   00000068   0x....             LDR.N    R0,??DataTable83_4
   \   0000006A   0x.... 0x....      BL       assert_failed
   3067            assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
   \                     ??TIM_EncoderInterfaceConfig_1: (+1)
   \   0000006E   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000070   0x2E00             CMP      R6,#+0
   \   00000072   0xD00A             BEQ.N    ??TIM_EncoderInterfaceConfig_2
   \   00000074   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000076   0x2E02             CMP      R6,#+2
   \   00000078   0xD007             BEQ.N    ??TIM_EncoderInterfaceConfig_2
   \   0000007A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000007C   0x2E0A             CMP      R6,#+10
   \   0000007E   0xD004             BEQ.N    ??TIM_EncoderInterfaceConfig_2
   \   00000080   0xF640 0x31FB      MOVW     R1,#+3067
   \   00000084   0x....             LDR.N    R0,??DataTable83_4
   \   00000086   0x.... 0x....      BL       assert_failed
   3068            assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));
   \                     ??TIM_EncoderInterfaceConfig_2: (+1)
   \   0000008A   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000008C   0x2F00             CMP      R7,#+0
   \   0000008E   0xD00A             BEQ.N    ??TIM_EncoderInterfaceConfig_3
   \   00000090   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000092   0x2F02             CMP      R7,#+2
   \   00000094   0xD007             BEQ.N    ??TIM_EncoderInterfaceConfig_3
   \   00000096   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000098   0x2F0A             CMP      R7,#+10
   \   0000009A   0xD004             BEQ.N    ??TIM_EncoderInterfaceConfig_3
   \   0000009C   0xF640 0x31FC      MOVW     R1,#+3068
   \   000000A0   0x....             LDR.N    R0,??DataTable83_4
   \   000000A2   0x.... 0x....      BL       assert_failed
   3069          
   3070            /* Get the TIMx SMCR register value */
   3071            tmpsmcr = TIMx->SMCR;
   \                     ??TIM_EncoderInterfaceConfig_3: (+1)
   \   000000A6   0x8920             LDRH     R0,[R4, #+8]
   \   000000A8   0x4680             MOV      R8,R0
   3072          
   3073            /* Get the TIMx CCMR1 register value */
   3074            tmpccmr1 = TIMx->CCMR1;
   \   000000AA   0x8B20             LDRH     R0,[R4, #+24]
   \   000000AC   0x4681             MOV      R9,R0
   3075          
   3076            /* Get the TIMx CCER register value */
   3077            tmpccer = TIMx->CCER;
   \   000000AE   0x8C20             LDRH     R0,[R4, #+32]
   \   000000B0   0x4682             MOV      R10,R0
   3078          
   3079            /* Set the encoder Mode */
   3080            tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
   \   000000B2   0xF64F 0x70F8      MOVW     R0,#+65528
   \   000000B6   0xEA10 0x0808      ANDS     R8,R0,R8
   3081            tmpsmcr |= TIM_EncoderMode;
   \   000000BA   0xEA55 0x0808      ORRS     R8,R5,R8
   3082          
   3083            /* Select the Capture Compare 1 and the Capture Compare 2 as input */
   3084            tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
   \   000000BE   0xF64F 0x40FC      MOVW     R0,#+64764
   \   000000C2   0xEA10 0x0909      ANDS     R9,R0,R9
   3085            tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
   \   000000C6   0xF240 0x1001      MOVW     R0,#+257
   \   000000CA   0xEA50 0x0909      ORRS     R9,R0,R9
   3086          
   3087            /* Set the TI1 and the TI2 Polarities */
   3088            tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
   \   000000CE   0xF64F 0x70DD      MOVW     R0,#+65501
   \   000000D2   0xEA10 0x0A0A      ANDS     R10,R0,R10
   3089            tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
   \   000000D6   0xEA56 0x1007      ORRS     R0,R6,R7, LSL #+4
   \   000000DA   0xEA50 0x0A0A      ORRS     R10,R0,R10
   3090          
   3091            /* Write to TIMx SMCR */
   3092            TIMx->SMCR = tmpsmcr;
   \   000000DE   0xF8A4 0x8008      STRH     R8,[R4, #+8]
   3093          
   3094            /* Write to TIMx CCMR1 */
   3095            TIMx->CCMR1 = tmpccmr1;
   \   000000E2   0xF8A4 0x9018      STRH     R9,[R4, #+24]
   3096          
   3097            /* Write to TIMx CCER */
   3098            TIMx->CCER = tmpccer;
   \   000000E6   0xF8A4 0xA020      STRH     R10,[R4, #+32]
   3099          }
   \   000000EA   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   3100          
   3101          /**
   3102            * @brief  Enables or disables the TIMx's Hall sensor interface.
   3103            * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
   3104            *         peripheral.
   3105            * @param  NewState: new state of the TIMx Hall sensor interface.
   3106            *          This parameter can be: ENABLE or DISABLE.
   3107            * @retval None
   3108            */

   \                                 In section .text, align 2, keep-with-next
   3109          void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
   3110          {
   \                     TIM_SelectHallSensor: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   3111            /* Check the parameters */
   3112            assert_param(IS_TIM_LIST2_PERIPH(TIMx));
   \   00000006   0x....             LDR.N    R0,??DataTable83_11  ;; 0x40010000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD019             BEQ.N    ??TIM_SelectHallSensor_0
   \   0000000C   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   00000010   0xD016             BEQ.N    ??TIM_SelectHallSensor_0
   \   00000012   0x....             LDR.N    R0,??DataTable83  ;; 0x40000400
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD013             BEQ.N    ??TIM_SelectHallSensor_0
   \   00000018   0x....             LDR.N    R0,??DataTable83_1  ;; 0x40000800
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD010             BEQ.N    ??TIM_SelectHallSensor_0
   \   0000001E   0x....             LDR.N    R0,??DataTable83_2  ;; 0x40000c00
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD00D             BEQ.N    ??TIM_SelectHallSensor_0
   \   00000024   0x....             LDR.N    R0,??DataTable83_3  ;; 0x40010400
   \   00000026   0x4284             CMP      R4,R0
   \   00000028   0xD00A             BEQ.N    ??TIM_SelectHallSensor_0
   \   0000002A   0x....             LDR.N    R0,??DataTable83_5  ;; 0x40014000
   \   0000002C   0x4284             CMP      R4,R0
   \   0000002E   0xD007             BEQ.N    ??TIM_SelectHallSensor_0
   \   00000030   0x....             LDR.N    R0,??DataTable83_8  ;; 0x40001800
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD004             BEQ.N    ??TIM_SelectHallSensor_0
   \   00000036   0xF640 0x4128      MOVW     R1,#+3112
   \   0000003A   0x....             LDR.N    R0,??DataTable83_4
   \   0000003C   0x.... 0x....      BL       assert_failed
   3113            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \                     ??TIM_SelectHallSensor_0: (+1)
   \   00000040   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000042   0x2D00             CMP      R5,#+0
   \   00000044   0xD007             BEQ.N    ??TIM_SelectHallSensor_1
   \   00000046   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000048   0x2D01             CMP      R5,#+1
   \   0000004A   0xD004             BEQ.N    ??TIM_SelectHallSensor_1
   \   0000004C   0xF640 0x4129      MOVW     R1,#+3113
   \   00000050   0x....             LDR.N    R0,??DataTable83_4
   \   00000052   0x.... 0x....      BL       assert_failed
   3114          
   3115            if (NewState != DISABLE)
   \                     ??TIM_SelectHallSensor_1: (+1)
   \   00000056   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000058   0x2D00             CMP      R5,#+0
   \   0000005A   0xD004             BEQ.N    ??TIM_SelectHallSensor_2
   3116            {
   3117              /* Set the TI1S Bit */
   3118              TIMx->CR2 |= TIM_CR2_TI1S;
   \   0000005C   0x88A0             LDRH     R0,[R4, #+4]
   \   0000005E   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000062   0x80A0             STRH     R0,[R4, #+4]
   \   00000064   0xE004             B.N      ??TIM_SelectHallSensor_3
   3119            }
   3120            else
   3121            {
   3122              /* Reset the TI1S Bit */
   3123              TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
   \                     ??TIM_SelectHallSensor_2: (+1)
   \   00000066   0x88A0             LDRH     R0,[R4, #+4]
   \   00000068   0xF64F 0x717F      MOVW     R1,#+65407
   \   0000006C   0x4008             ANDS     R0,R1,R0
   \   0000006E   0x80A0             STRH     R0,[R4, #+4]
   3124            }
   3125          }
   \                     ??TIM_SelectHallSensor_3: (+1)
   \   00000070   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   3126          /**
   3127            * @}
   3128            */
   3129          
   3130          /** @defgroup TIM_Group9 Specific remapping management function
   3131           *  @brief   Specific remapping management function
   3132           *
   3133          @verbatim   
   3134           ===============================================================================
   3135                               Specific remapping management function
   3136           ===============================================================================  
   3137          
   3138          @endverbatim
   3139            * @{
   3140            */
   3141          
   3142          /**
   3143            * @brief  Configures the TIM2, TIM5 and TIM11 Remapping input capabilities.
   3144            * @param  TIMx: where x can be 2, 5 or 11 to select the TIM peripheral.
   3145            * @param  TIM_Remap: specifies the TIM input remapping source.
   3146            *          This parameter can be one of the following values:
   3147            *            @arg TIM2_TIM8_TRGO: TIM2 ITR1 input is connected to TIM8 Trigger output(default)
   3148            *            @arg TIM2_ETH_PTP:   TIM2 ITR1 input is connected to ETH PTP trogger output.
   3149            *            @arg TIM2_USBFS_SOF: TIM2 ITR1 input is connected to USB FS SOF. 
   3150            *            @arg TIM2_USBHS_SOF: TIM2 ITR1 input is connected to USB HS SOF. 
   3151            *            @arg TIM5_GPIO:      TIM5 CH4 input is connected to dedicated Timer pin(default)
   3152            *            @arg TIM5_LSI:       TIM5 CH4 input is connected to LSI clock.
   3153            *            @arg TIM5_LSE:       TIM5 CH4 input is connected to LSE clock.
   3154            *            @arg TIM5_RTC:       TIM5 CH4 input is connected to RTC Output event.
   3155            *            @arg TIM11_GPIO:     TIM11 CH4 input is connected to dedicated Timer pin(default) 
   3156            *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
   3157            *                                 (HSE divided by a programmable prescaler)  
   3158            * @retval None
   3159            */

   \                                 In section .text, align 2, keep-with-next
   3160          void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
   3161          {
   \                     TIM_RemapConfig: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   3162           /* Check the parameters */
   3163            assert_param(IS_TIM_LIST6_PERIPH(TIMx));
   \   00000006   0xF1B4 0x4F80      CMP      R4,#+1073741824
   \   0000000A   0xD00A             BEQ.N    ??TIM_RemapConfig_0
   \   0000000C   0x....             LDR.N    R0,??DataTable83_2  ;; 0x40000c00
   \   0000000E   0x4284             CMP      R4,R0
   \   00000010   0xD007             BEQ.N    ??TIM_RemapConfig_0
   \   00000012   0x....             LDR.N    R0,??DataTable83_7  ;; 0x40014800
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD004             BEQ.N    ??TIM_RemapConfig_0
   \   00000018   0xF640 0x415B      MOVW     R1,#+3163
   \   0000001C   0x....             LDR.N    R0,??DataTable83_4
   \   0000001E   0x.... 0x....      BL       assert_failed
   3164            assert_param(IS_TIM_REMAP(TIM_Remap));
   \                     ??TIM_RemapConfig_0: (+1)
   \   00000022   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000024   0x2D00             CMP      R5,#+0
   \   00000026   0xD022             BEQ.N    ??TIM_RemapConfig_1
   \   00000028   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000002A   0xF5B5 0x6F80      CMP      R5,#+1024
   \   0000002E   0xD01E             BEQ.N    ??TIM_RemapConfig_1
   \   00000030   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000032   0xF5B5 0x6F00      CMP      R5,#+2048
   \   00000036   0xD01A             BEQ.N    ??TIM_RemapConfig_1
   \   00000038   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000003A   0xF5B5 0x6F40      CMP      R5,#+3072
   \   0000003E   0xD016             BEQ.N    ??TIM_RemapConfig_1
   \   00000040   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000042   0x2D00             CMP      R5,#+0
   \   00000044   0xD013             BEQ.N    ??TIM_RemapConfig_1
   \   00000046   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000048   0x2D40             CMP      R5,#+64
   \   0000004A   0xD010             BEQ.N    ??TIM_RemapConfig_1
   \   0000004C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004E   0x2D80             CMP      R5,#+128
   \   00000050   0xD00D             BEQ.N    ??TIM_RemapConfig_1
   \   00000052   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000054   0x2DC0             CMP      R5,#+192
   \   00000056   0xD00A             BEQ.N    ??TIM_RemapConfig_1
   \   00000058   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000005A   0x2D00             CMP      R5,#+0
   \   0000005C   0xD007             BEQ.N    ??TIM_RemapConfig_1
   \   0000005E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000060   0x2D02             CMP      R5,#+2
   \   00000062   0xD004             BEQ.N    ??TIM_RemapConfig_1
   \   00000064   0xF640 0x415C      MOVW     R1,#+3164
   \   00000068   0x....             LDR.N    R0,??DataTable83_4
   \   0000006A   0x.... 0x....      BL       assert_failed
   3165          
   3166            /* Set the Timer remapping configuration */
   3167            TIMx->OR =  TIM_Remap;
   \                     ??TIM_RemapConfig_1: (+1)
   \   0000006E   0xF8A4 0x5050      STRH     R5,[R4, #+80]
   3168          }
   \   00000072   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   3169          /**
   3170            * @}
   3171            */
   3172          
   3173          /**
   3174            * @brief  Configure the TI1 as Input.
   3175            * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13 or 14 
   3176            *         to select the TIM peripheral.
   3177            * @param  TIM_ICPolarity : The Input Polarity.
   3178            *          This parameter can be one of the following values:
   3179            *            @arg TIM_ICPolarity_Rising
   3180            *            @arg TIM_ICPolarity_Falling
   3181            *            @arg TIM_ICPolarity_BothEdge  
   3182            * @param  TIM_ICSelection: specifies the input to be used.
   3183            *          This parameter can be one of the following values:
   3184            *            @arg TIM_ICSelection_DirectTI: TIM Input 1 is selected to be connected to IC1.
   3185            *            @arg TIM_ICSelection_IndirectTI: TIM Input 1 is selected to be connected to IC2.
   3186            *            @arg TIM_ICSelection_TRC: TIM Input 1 is selected to be connected to TRC.
   3187            * @param  TIM_ICFilter: Specifies the Input Capture Filter.
   3188            *          This parameter must be a value between 0x00 and 0x0F.
   3189            * @retval None
   3190            */

   \                                 In section .text, align 2, keep-with-next
   3191          static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
   3192                                 uint16_t TIM_ICFilter)
   3193          {
   \                     TI1_Config: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
   3194            uint16_t tmpccmr1 = 0, tmpccer = 0;
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0x2500             MOVS     R5,#+0
   3195          
   3196            /* Disable the Channel 1: Reset the CC1E Bit */
   3197            TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
   \   00000006   0x8C06             LDRH     R6,[R0, #+32]
   \   00000008   0xF64F 0x77FE      MOVW     R7,#+65534
   \   0000000C   0x403E             ANDS     R6,R7,R6
   \   0000000E   0x8406             STRH     R6,[R0, #+32]
   3198            tmpccmr1 = TIMx->CCMR1;
   \   00000010   0x8B06             LDRH     R6,[R0, #+24]
   \   00000012   0x0034             MOVS     R4,R6
   3199            tmpccer = TIMx->CCER;
   \   00000014   0x8C06             LDRH     R6,[R0, #+32]
   \   00000016   0x0035             MOVS     R5,R6
   3200          
   3201            /* Select the Input and set the filter */
   3202            tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
   \   00000018   0xF64F 0x760C      MOVW     R6,#+65292
   \   0000001C   0x4034             ANDS     R4,R6,R4
   3203            tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
   \   0000001E   0xEA52 0x1603      ORRS     R6,R2,R3, LSL #+4
   \   00000022   0x4334             ORRS     R4,R6,R4
   3204          
   3205            /* Select the Polarity and set the CC1E Bit */
   3206            tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
   \   00000024   0xF64F 0x76F5      MOVW     R6,#+65525
   \   00000028   0x4035             ANDS     R5,R6,R5
   3207            tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
   \   0000002A   0xF051 0x0601      ORRS     R6,R1,#0x1
   \   0000002E   0x4335             ORRS     R5,R6,R5
   3208          
   3209            /* Write to TIMx CCMR1 and CCER registers */
   3210            TIMx->CCMR1 = tmpccmr1;
   \   00000030   0x8304             STRH     R4,[R0, #+24]
   3211            TIMx->CCER = tmpccer;
   \   00000032   0x8405             STRH     R5,[R0, #+32]
   3212          }
   \   00000034   0xBCF0             POP      {R4-R7}
   \   00000036   0x4770             BX       LR               ;; return
   3213          
   3214          /**
   3215            * @brief  Configure the TI2 as Input.
   3216            * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
   3217            *         peripheral.
   3218            * @param  TIM_ICPolarity : The Input Polarity.
   3219            *          This parameter can be one of the following values:
   3220            *            @arg TIM_ICPolarity_Rising
   3221            *            @arg TIM_ICPolarity_Falling
   3222            *            @arg TIM_ICPolarity_BothEdge   
   3223            * @param  TIM_ICSelection: specifies the input to be used.
   3224            *          This parameter can be one of the following values:
   3225            *            @arg TIM_ICSelection_DirectTI: TIM Input 2 is selected to be connected to IC2.
   3226            *            @arg TIM_ICSelection_IndirectTI: TIM Input 2 is selected to be connected to IC1.
   3227            *            @arg TIM_ICSelection_TRC: TIM Input 2 is selected to be connected to TRC.
   3228            * @param  TIM_ICFilter: Specifies the Input Capture Filter.
   3229            *          This parameter must be a value between 0x00 and 0x0F.
   3230            * @retval None
   3231            */

   \                                 In section .text, align 2, keep-with-next
   3232          static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
   3233                                 uint16_t TIM_ICFilter)
   3234          {
   \                     TI2_Config: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
   3235            uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
   \   00000002   0x2500             MOVS     R5,#+0
   \   00000004   0x2600             MOVS     R6,#+0
   \   00000006   0x2400             MOVS     R4,#+0
   3236          
   3237            /* Disable the Channel 2: Reset the CC2E Bit */
   3238            TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
   \   00000008   0x8C07             LDRH     R7,[R0, #+32]
   \   0000000A   0xF64F 0x7CEF      MOVW     R12,#+65519
   \   0000000E   0xEA1C 0x0707      ANDS     R7,R12,R7
   \   00000012   0x8407             STRH     R7,[R0, #+32]
   3239            tmpccmr1 = TIMx->CCMR1;
   \   00000014   0x8B07             LDRH     R7,[R0, #+24]
   \   00000016   0x003D             MOVS     R5,R7
   3240            tmpccer = TIMx->CCER;
   \   00000018   0x8C07             LDRH     R7,[R0, #+32]
   \   0000001A   0x003E             MOVS     R6,R7
   3241            tmp = (uint16_t)(TIM_ICPolarity << 4);
   \   0000001C   0x010F             LSLS     R7,R1,#+4
   \   0000001E   0x003C             MOVS     R4,R7
   3242          
   3243            /* Select the Input and set the filter */
   3244            tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
   \   00000020   0xF640 0x47FF      MOVW     R7,#+3327
   \   00000024   0x403D             ANDS     R5,R7,R5
   3245            tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
   \   00000026   0xEA55 0x3503      ORRS     R5,R5,R3, LSL #+12
   3246            tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
   \   0000002A   0xEA55 0x2502      ORRS     R5,R5,R2, LSL #+8
   3247          
   3248            /* Select the Polarity and set the CC2E Bit */
   3249            tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
   \   0000002E   0xF64F 0x775F      MOVW     R7,#+65375
   \   00000032   0x403E             ANDS     R6,R7,R6
   3250            tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
   \   00000034   0xF054 0x0710      ORRS     R7,R4,#0x10
   \   00000038   0x433E             ORRS     R6,R7,R6
   3251          
   3252            /* Write to TIMx CCMR1 and CCER registers */
   3253            TIMx->CCMR1 = tmpccmr1 ;
   \   0000003A   0x8305             STRH     R5,[R0, #+24]
   3254            TIMx->CCER = tmpccer;
   \   0000003C   0x8406             STRH     R6,[R0, #+32]
   3255          }
   \   0000003E   0xBCF0             POP      {R4-R7}
   \   00000040   0x4770             BX       LR               ;; return
   3256          
   3257          /**
   3258            * @brief  Configure the TI3 as Input.
   3259            * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
   3260            * @param  TIM_ICPolarity : The Input Polarity.
   3261            *          This parameter can be one of the following values:
   3262            *            @arg TIM_ICPolarity_Rising
   3263            *            @arg TIM_ICPolarity_Falling
   3264            *            @arg TIM_ICPolarity_BothEdge         
   3265            * @param  TIM_ICSelection: specifies the input to be used.
   3266            *          This parameter can be one of the following values:
   3267            *            @arg TIM_ICSelection_DirectTI: TIM Input 3 is selected to be connected to IC3.
   3268            *            @arg TIM_ICSelection_IndirectTI: TIM Input 3 is selected to be connected to IC4.
   3269            *            @arg TIM_ICSelection_TRC: TIM Input 3 is selected to be connected to TRC.
   3270            * @param  TIM_ICFilter: Specifies the Input Capture Filter.
   3271            *          This parameter must be a value between 0x00 and 0x0F.
   3272            * @retval None
   3273            */

   \                                 In section .text, align 2, keep-with-next
   3274          static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
   3275                                 uint16_t TIM_ICFilter)
   3276          {
   \                     TI3_Config: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
   3277            uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
   \   00000002   0x2600             MOVS     R6,#+0
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x2500             MOVS     R5,#+0
   3278          
   3279            /* Disable the Channel 3: Reset the CC3E Bit */
   3280            TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
   \   00000008   0x8C07             LDRH     R7,[R0, #+32]
   \   0000000A   0xF64F 0x6CFF      MOVW     R12,#+65279
   \   0000000E   0xEA1C 0x0707      ANDS     R7,R12,R7
   \   00000012   0x8407             STRH     R7,[R0, #+32]
   3281            tmpccmr2 = TIMx->CCMR2;
   \   00000014   0x8B87             LDRH     R7,[R0, #+28]
   \   00000016   0x003E             MOVS     R6,R7
   3282            tmpccer = TIMx->CCER;
   \   00000018   0x8C07             LDRH     R7,[R0, #+32]
   \   0000001A   0x003C             MOVS     R4,R7
   3283            tmp = (uint16_t)(TIM_ICPolarity << 8);
   \   0000001C   0x020F             LSLS     R7,R1,#+8
   \   0000001E   0x003D             MOVS     R5,R7
   3284          
   3285            /* Select the Input and set the filter */
   3286            tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
   \   00000020   0xF64F 0x770C      MOVW     R7,#+65292
   \   00000024   0x403E             ANDS     R6,R7,R6
   3287            tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
   \   00000026   0xEA52 0x1703      ORRS     R7,R2,R3, LSL #+4
   \   0000002A   0x433E             ORRS     R6,R7,R6
   3288          
   3289            /* Select the Polarity and set the CC3E Bit */
   3290            tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
   \   0000002C   0xF24F 0x57FF      MOVW     R7,#+62975
   \   00000030   0x403C             ANDS     R4,R7,R4
   3291            tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
   \   00000032   0xF455 0x7780      ORRS     R7,R5,#0x100
   \   00000036   0x433C             ORRS     R4,R7,R4
   3292          
   3293            /* Write to TIMx CCMR2 and CCER registers */
   3294            TIMx->CCMR2 = tmpccmr2;
   \   00000038   0x8386             STRH     R6,[R0, #+28]
   3295            TIMx->CCER = tmpccer;
   \   0000003A   0x8404             STRH     R4,[R0, #+32]
   3296          }
   \   0000003C   0xBCF0             POP      {R4-R7}
   \   0000003E   0x4770             BX       LR               ;; return
   3297          
   3298          /**
   3299            * @brief  Configure the TI4 as Input.
   3300            * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
   3301            * @param  TIM_ICPolarity : The Input Polarity.
   3302            *          This parameter can be one of the following values:
   3303            *            @arg TIM_ICPolarity_Rising
   3304            *            @arg TIM_ICPolarity_Falling
   3305            *            @arg TIM_ICPolarity_BothEdge     
   3306            * @param  TIM_ICSelection: specifies the input to be used.
   3307            *          This parameter can be one of the following values:
   3308            *            @arg TIM_ICSelection_DirectTI: TIM Input 4 is selected to be connected to IC4.
   3309            *            @arg TIM_ICSelection_IndirectTI: TIM Input 4 is selected to be connected to IC3.
   3310            *            @arg TIM_ICSelection_TRC: TIM Input 4 is selected to be connected to TRC.
   3311            * @param  TIM_ICFilter: Specifies the Input Capture Filter.
   3312            *          This parameter must be a value between 0x00 and 0x0F.
   3313            * @retval None
   3314            */

   \                                 In section .text, align 2, keep-with-next
   3315          static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
   3316                                 uint16_t TIM_ICFilter)
   3317          {
   \                     TI4_Config: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
   3318            uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
   \   00000002   0x2500             MOVS     R5,#+0
   \   00000004   0x2600             MOVS     R6,#+0
   \   00000006   0x2400             MOVS     R4,#+0
   3319          
   3320            /* Disable the Channel 4: Reset the CC4E Bit */
   3321            TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
   \   00000008   0x8C07             LDRH     R7,[R0, #+32]
   \   0000000A   0xF64E 0x7CFF      MOVW     R12,#+61439
   \   0000000E   0xEA1C 0x0707      ANDS     R7,R12,R7
   \   00000012   0x8407             STRH     R7,[R0, #+32]
   3322            tmpccmr2 = TIMx->CCMR2;
   \   00000014   0x8B87             LDRH     R7,[R0, #+28]
   \   00000016   0x003D             MOVS     R5,R7
   3323            tmpccer = TIMx->CCER;
   \   00000018   0x8C07             LDRH     R7,[R0, #+32]
   \   0000001A   0x003E             MOVS     R6,R7
   3324            tmp = (uint16_t)(TIM_ICPolarity << 12);
   \   0000001C   0x030F             LSLS     R7,R1,#+12
   \   0000001E   0x003C             MOVS     R4,R7
   3325          
   3326            /* Select the Input and set the filter */
   3327            tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
   \   00000020   0xF640 0x47FF      MOVW     R7,#+3327
   \   00000024   0x403D             ANDS     R5,R7,R5
   3328            tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
   \   00000026   0xEA55 0x2502      ORRS     R5,R5,R2, LSL #+8
   3329            tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
   \   0000002A   0xEA55 0x3503      ORRS     R5,R5,R3, LSL #+12
   3330          
   3331            /* Select the Polarity and set the CC4E Bit */
   3332            tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
   \   0000002E   0xF645 0x77FF      MOVW     R7,#+24575
   \   00000032   0x403E             ANDS     R6,R7,R6
   3333            tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
   \   00000034   0xF454 0x5780      ORRS     R7,R4,#0x1000
   \   00000038   0x433E             ORRS     R6,R7,R6
   3334          
   3335            /* Write to TIMx CCMR2 and CCER registers */
   3336            TIMx->CCMR2 = tmpccmr2;
   \   0000003A   0x8385             STRH     R5,[R0, #+28]
   3337            TIMx->CCER = tmpccer ;
   \   0000003C   0x8406             STRH     R6,[R0, #+32]
   3338          }
   \   0000003E   0xBCF0             POP      {R4-R7}
   \   00000040   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x40010000         DC32     0x40010000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x40000400         DC32     0x40000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x40000800         DC32     0x40000800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x40000C00         DC32     0x40000c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x40001000         DC32     0x40001000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x40001400         DC32     0x40001400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0x40010400         DC32     0x40010400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \   00000000   0x40014000         DC32     0x40014000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \   00000000   0x40014400         DC32     0x40014400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_9:
   \   00000000   0x40014800         DC32     0x40014800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_10:
   \   00000000   0x40001800         DC32     0x40001800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_11:
   \   00000000   0x40001C00         DC32     0x40001c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_12:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x40002000         DC32     0x40002000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   0x40010000         DC32     0x40010000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_1:
   \   00000000   0x40000400         DC32     0x40000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_2:
   \   00000000   0x40000800         DC32     0x40000800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_3:
   \   00000000   0x40000C00         DC32     0x40000c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   0x40001000         DC32     0x40001000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_1:
   \   00000000   0x40001400         DC32     0x40001400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_2:
   \   00000000   0x40010400         DC32     0x40010400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_3:
   \   00000000   0x40014000         DC32     0x40014000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_4:
   \   00000000   0x40014400         DC32     0x40014400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_5:
   \   00000000   0x40014800         DC32     0x40014800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_6:
   \   00000000   0x40001800         DC32     0x40001800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_7:
   \   00000000   0x40001C00         DC32     0x40001c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   0x40002000         DC32     0x40002000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37:
   \   00000000   0x40010000         DC32     0x40010000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38:
   \   00000000   0x40000400         DC32     0x40000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_1:
   \   00000000   0x40000800         DC32     0x40000800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_2:
   \   00000000   0x40000C00         DC32     0x40000c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_3:
   \   00000000   0x40010400         DC32     0x40010400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40:
   \   00000000   0x40014000         DC32     0x40014000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40_1:
   \   00000000   0x40014400         DC32     0x40014400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40_2:
   \   00000000   0x40014800         DC32     0x40014800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40_3:
   \   00000000   0x40001800         DC32     0x40001800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40_4:
   \   00000000   0x40001C00         DC32     0x40001c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45:
   \   00000000   0x40002000         DC32     0x40002000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable54:
   \   00000000   0x40010000         DC32     0x40010000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55:
   \   00000000   0x40000400         DC32     0x40000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_1:
   \   00000000   0x40000800         DC32     0x40000800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_2:
   \   00000000   0x40000C00         DC32     0x40000c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_3:
   \   00000000   0x40010400         DC32     0x40010400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable57:
   \   00000000   0x40014000         DC32     0x40014000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable57_1:
   \   00000000   0x40001800         DC32     0x40001800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable61:
   \   00000000   0x40014400         DC32     0x40014400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable61_1:
   \   00000000   0x40014800         DC32     0x40014800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable62:
   \   00000000   0x40001C00         DC32     0x40001c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable62_1:
   \   00000000   0x40002000         DC32     0x40002000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable67:
   \   00000000   0x40010000         DC32     0x40010000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable68:
   \   00000000   0x40000400         DC32     0x40000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable68_1:
   \   00000000   0x40000800         DC32     0x40000800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable68_2:
   \   00000000   0x40000C00         DC32     0x40000c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable69:
   \   00000000   0x40010400         DC32     0x40010400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable72:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74:
   \   00000000   0x40001000         DC32     0x40001000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_1:
   \   00000000   0x40001400         DC32     0x40001400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_2:
   \   00000000   0x40014000         DC32     0x40014000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_3:
   \   00000000   0x40014400         DC32     0x40014400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_4:
   \   00000000   0x40014800         DC32     0x40014800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_5:
   \   00000000   0x40001800         DC32     0x40001800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable76:
   \   00000000   0x40001C00         DC32     0x40001c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable76_1:
   \   00000000   0x40002000         DC32     0x40002000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable81:
   \   00000000   0x40010000         DC32     0x40010000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83:
   \   00000000   0x40000400         DC32     0x40000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_1:
   \   00000000   0x40000800         DC32     0x40000800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_2:
   \   00000000   0x40000C00         DC32     0x40000c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_3:
   \   00000000   0x40010400         DC32     0x40010400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_4:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_5:
   \   00000000   0x40014000         DC32     0x40014000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_6:
   \   00000000   0x40014400         DC32     0x40014400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_7:
   \   00000000   0x40014800         DC32     0x40014800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_8:
   \   00000000   0x40001800         DC32     0x40001800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_9:
   \   00000000   0x40001000         DC32     0x40001000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_10:
   \   00000000   0x40001400         DC32     0x40001400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_11:
   \   00000000   0x40010000         DC32     0x40010000

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x44 0x3A          DC8 44H, 3AH, 5CH, 49H, 41H, 52H, 20H, 57H
   \              0x5C 0x49    
   \              0x41 0x52    
   \              0x20 0x57    
   \   00000008   0x6F 0x72          DC8 6FH, 72H, 6BH, 73H, 70H, 61H, 63H, 65H
   \              0x6B 0x73    
   \              0x70 0x61    
   \              0x63 0x65    
   \   00000010   0x5C 0x53          DC8 5CH, 53H, 54H, 4DH, 33H, 32H, 46H, 34H
   \              0x54 0x4D    
   \              0x33 0x32    
   \              0x46 0x34    
   \   00000018   0x30 0x37          DC8 30H, 37H, 5CH, 53H, 54H, 4DH, 33H, 32H
   \              0x5C 0x53    
   \              0x54 0x4D    
   \              0x33 0x32    
   \   00000020   0x46 0x34          DC8 46H, 34H, 2DH, 44H, 69H, 73H, 63H, 6FH
   \              0x2D 0x44    
   \              0x69 0x73    
   \              0x63 0x6F    
   \   00000028   0x76 0x65          DC8 76H, 65H, 72H, 79H, 5FH, 46H, 57H, 5FH
   \              0x72 0x79    
   \              0x5F 0x46    
   \              0x57 0x5F    
   \   00000030   0x56 0x31          DC8 56H, 31H, 2EH, 31H, 2EH, 30H, 5CH, 4CH
   \              0x2E 0x31    
   \              0x2E 0x30    
   \              0x5C 0x4C    
   \   00000038   0x69 0x62          DC8 69H, 62H, 72H, 61H, 72H, 69H, 65H, 73H
   \              0x72 0x61    
   \              0x72 0x69    
   \              0x65 0x73    
   \   00000040   0x5C 0x53          DC8 5CH, 53H, 54H, 4DH, 33H, 32H, 46H, 34H
   \              0x54 0x4D    
   \              0x33 0x32    
   \              0x46 0x34    
   \   00000048   0x78 0x78          DC8 78H, 78H, 5FH, 53H, 74H, 64H, 50H, 65H
   \              0x5F 0x53    
   \              0x74 0x64    
   \              0x50 0x65    
   \   00000050   0x72 0x69          DC8 72H, 69H, 70H, 68H, 5FH, 44H, 72H, 69H
   \              0x70 0x68    
   \              0x5F 0x44    
   \              0x72 0x69    
   \   00000058   0x76 0x65          DC8 76H, 65H, 72H, 5CH, 73H, 72H, 63H, 5CH
   \              0x72 0x5C    
   \              0x73 0x72    
   \              0x63 0x5C    
   \   00000060   0x73 0x74          DC8 73H, 74H, 6DH, 33H, 32H, 66H, 34H, 78H
   \              0x6D 0x33    
   \              0x32 0x66    
   \              0x34 0x78    
   \   00000068   0x78 0x5F          DC8 78H, 5FH, 74H, 69H, 6DH, 2EH, 63H, 0
   \              0x74 0x69    
   \              0x6D 0x2E    
   \              0x63 0x00    
   3339          
   3340          /**
   3341            * @}
   3342            */
   3343          
   3344          /**
   3345            * @}
   3346            */
   3347          
   3348          /**
   3349            * @}
   3350            */
   3351          
   3352          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   TI1_Config
      16   TI2_Config
      16   TI3_Config
      16   TI4_Config
      16   TIM_ARRPreloadConfig
        16   -> assert_failed
      16   TIM_BDTRConfig
        16   -> assert_failed
       0   TIM_BDTRStructInit
      16   TIM_CCPreloadControl
        16   -> assert_failed
      24   TIM_CCxCmd
        24   -> assert_failed
      24   TIM_CCxNCmd
        24   -> assert_failed
      16   TIM_ClearFlag
        16   -> assert_failed
      16   TIM_ClearITPendingBit
        16   -> assert_failed
      16   TIM_ClearOC1Ref
        16   -> assert_failed
      16   TIM_ClearOC2Ref
        16   -> assert_failed
      16   TIM_ClearOC3Ref
        16   -> assert_failed
      16   TIM_ClearOC4Ref
        16   -> assert_failed
      16   TIM_Cmd
        16   -> assert_failed
      16   TIM_CounterModeConfig
        16   -> assert_failed
      16   TIM_CtrlPWMOutputs
        16   -> assert_failed
      16   TIM_DMACmd
        16   -> assert_failed
      16   TIM_DMAConfig
        16   -> assert_failed
       8   TIM_DeInit
         8   -> RCC_APB1PeriphResetCmd
         8   -> RCC_APB2PeriphResetCmd
         8   -> assert_failed
      24   TIM_ETRClockMode1Config
        24   -> TIM_ETRConfig
        24   -> assert_failed
      24   TIM_ETRClockMode2Config
        24   -> TIM_ETRConfig
        24   -> assert_failed
      24   TIM_ETRConfig
        24   -> assert_failed
      32   TIM_EncoderInterfaceConfig
        32   -> assert_failed
      16   TIM_ForcedOC1Config
        16   -> assert_failed
      16   TIM_ForcedOC2Config
        16   -> assert_failed
      16   TIM_ForcedOC3Config
        16   -> assert_failed
      16   TIM_ForcedOC4Config
        16   -> assert_failed
      16   TIM_GenerateEvent
        16   -> assert_failed
       8   TIM_GetCapture1
         8   -> assert_failed
       8   TIM_GetCapture2
         8   -> assert_failed
       8   TIM_GetCapture3
         8   -> assert_failed
       8   TIM_GetCapture4
         8   -> assert_failed
       8   TIM_GetCounter
         8   -> assert_failed
      16   TIM_GetFlagStatus
        16   -> assert_failed
      24   TIM_GetITStatus
        24   -> assert_failed
       8   TIM_GetPrescaler
         8   -> assert_failed
      16   TIM_ICInit
        16   -> TI1_Config
        16   -> TI2_Config
        16   -> TI3_Config
        16   -> TI4_Config
        16   -> TIM_SetIC1Prescaler
        16   -> TIM_SetIC2Prescaler
        16   -> TIM_SetIC3Prescaler
        16   -> TIM_SetIC4Prescaler
        16   -> assert_failed
       0   TIM_ICStructInit
      16   TIM_ITConfig
        16   -> assert_failed
      16   TIM_ITRxExternalClockConfig
        16   -> TIM_SelectInputTrigger
        16   -> assert_failed
       8   TIM_InternalClockConfig
         8   -> assert_failed
      16   TIM_OC1FastConfig
        16   -> assert_failed
      24   TIM_OC1Init
        24   -> assert_failed
      16   TIM_OC1NPolarityConfig
        16   -> assert_failed
      16   TIM_OC1PolarityConfig
        16   -> assert_failed
      16   TIM_OC1PreloadConfig
        16   -> assert_failed
      16   TIM_OC2FastConfig
        16   -> assert_failed
      24   TIM_OC2Init
        24   -> assert_failed
      16   TIM_OC2NPolarityConfig
        16   -> assert_failed
      16   TIM_OC2PolarityConfig
        16   -> assert_failed
      16   TIM_OC2PreloadConfig
        16   -> assert_failed
      16   TIM_OC3FastConfig
        16   -> assert_failed
      24   TIM_OC3Init
        24   -> assert_failed
      16   TIM_OC3NPolarityConfig
        16   -> assert_failed
      16   TIM_OC3PolarityConfig
        16   -> assert_failed
      16   TIM_OC3PreloadConfig
        16   -> assert_failed
      16   TIM_OC4FastConfig
        16   -> assert_failed
      24   TIM_OC4Init
        24   -> assert_failed
      16   TIM_OC4PolarityConfig
        16   -> assert_failed
      16   TIM_OC4PreloadConfig
        16   -> assert_failed
       0   TIM_OCStructInit
      24   TIM_PWMIConfig
        24   -> TI1_Config
        24   -> TI2_Config
        24   -> TIM_SetIC1Prescaler
        24   -> TIM_SetIC2Prescaler
        24   -> assert_failed
      16   TIM_PrescalerConfig
        16   -> assert_failed
      16   TIM_RemapConfig
        16   -> assert_failed
      16   TIM_SelectCCDMA
        16   -> assert_failed
      16   TIM_SelectCOM
        16   -> assert_failed
      16   TIM_SelectHallSensor
        16   -> assert_failed
      16   TIM_SelectInputTrigger
        16   -> assert_failed
      16   TIM_SelectMasterSlaveMode
        16   -> assert_failed
      24   TIM_SelectOCxM
        24   -> assert_failed
      16   TIM_SelectOnePulseMode
        16   -> assert_failed
      16   TIM_SelectOutputTrigger
        16   -> assert_failed
      16   TIM_SelectSlaveMode
        16   -> assert_failed
      16   TIM_SetAutoreload
        16   -> assert_failed
      16   TIM_SetClockDivision
        16   -> assert_failed
      16   TIM_SetCompare1
        16   -> assert_failed
      16   TIM_SetCompare2
        16   -> assert_failed
      16   TIM_SetCompare3
        16   -> assert_failed
      16   TIM_SetCompare4
        16   -> assert_failed
      16   TIM_SetCounter
        16   -> assert_failed
      16   TIM_SetIC1Prescaler
        16   -> assert_failed
      16   TIM_SetIC2Prescaler
        16   -> assert_failed
      16   TIM_SetIC3Prescaler
        16   -> assert_failed
      16   TIM_SetIC4Prescaler
        16   -> assert_failed
      24   TIM_TIxExternalClockConfig
        24   -> TI1_Config
        24   -> TI2_Config
        24   -> TIM_SelectInputTrigger
        24   -> assert_failed
      16   TIM_TimeBaseInit
        16   -> assert_failed
       0   TIM_TimeBaseStructInit
      16   TIM_UpdateDisableConfig
        16   -> assert_failed
      16   TIM_UpdateRequestConfig
        16   -> assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_10
       4  ??DataTable10_11
       4  ??DataTable10_12
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable10_9
       4  ??DataTable12
       4  ??DataTable19
       4  ??DataTable19_1
       4  ??DataTable19_2
       4  ??DataTable19_3
       4  ??DataTable20
       4  ??DataTable20_1
       4  ??DataTable20_2
       4  ??DataTable20_3
       4  ??DataTable20_4
       4  ??DataTable20_5
       4  ??DataTable20_6
       4  ??DataTable20_7
       4  ??DataTable23
       4  ??DataTable27
       4  ??DataTable37
       4  ??DataTable38
       4  ??DataTable38_1
       4  ??DataTable38_2
       4  ??DataTable38_3
       4  ??DataTable40
       4  ??DataTable40_1
       4  ??DataTable40_2
       4  ??DataTable40_3
       4  ??DataTable40_4
       4  ??DataTable45
       4  ??DataTable51
       4  ??DataTable54
       4  ??DataTable55
       4  ??DataTable55_1
       4  ??DataTable55_2
       4  ??DataTable55_3
       4  ??DataTable57
       4  ??DataTable57_1
       4  ??DataTable61
       4  ??DataTable61_1
       4  ??DataTable62
       4  ??DataTable62_1
       4  ??DataTable67
       4  ??DataTable68
       4  ??DataTable68_1
       4  ??DataTable68_2
       4  ??DataTable69
       4  ??DataTable72
       4  ??DataTable74
       4  ??DataTable74_1
       4  ??DataTable74_2
       4  ??DataTable74_3
       4  ??DataTable74_4
       4  ??DataTable74_5
       4  ??DataTable76
       4  ??DataTable76_1
       4  ??DataTable81
       4  ??DataTable83
       4  ??DataTable83_1
       4  ??DataTable83_10
       4  ??DataTable83_11
       4  ??DataTable83_2
       4  ??DataTable83_3
       4  ??DataTable83_4
       4  ??DataTable83_5
       4  ??DataTable83_6
       4  ??DataTable83_7
       4  ??DataTable83_8
       4  ??DataTable83_9
     112  ?_0
      56  TI1_Config
      66  TI2_Config
      64  TI3_Config
      66  TI4_Config
     150  TIM_ARRPreloadConfig
     238  TIM_BDTRConfig
      30  TIM_BDTRStructInit
      86  TIM_CCPreloadControl
     202  TIM_CCxCmd
     118  TIM_CCxNCmd
     134  TIM_ClearFlag
     126  TIM_ClearITPendingBit
     134  TIM_ClearOC1Ref
     108  TIM_ClearOC2Ref
      96  TIM_ClearOC3Ref
      98  TIM_ClearOC4Ref
     180  TIM_Cmd
     124  TIM_CounterModeConfig
      92  TIM_CtrlPWMOutputs
     146  TIM_DMACmd
     348  TIM_DMAConfig
     502  TIM_DeInit
     214  TIM_ETRClockMode1Config
     182  TIM_ETRClockMode2Config
     168  TIM_ETRConfig
     238  TIM_EncoderInterfaceConfig
     148  TIM_ForcedOC1Config
     120  TIM_ForcedOC2Config
     102  TIM_ForcedOC3Config
     104  TIM_ForcedOC4Config
     158  TIM_GenerateEvent
      98  TIM_GetCapture1
      66  TIM_GetCapture2
      56  TIM_GetCapture3
      56  TIM_GetCapture4
     104  TIM_GetCounter
     242  TIM_GetFlagStatus
     236  TIM_GetITStatus
     104  TIM_GetPrescaler
     504  TIM_ICInit
      22  TIM_ICStructInit
     198  TIM_ITConfig
     128  TIM_ITRxExternalClockConfig
      84  TIM_InternalClockConfig
     154  TIM_OC1FastConfig
     450  TIM_OC1Init
      76  TIM_OC1NPolarityConfig
     142  TIM_OC1PolarityConfig
     150  TIM_OC1PreloadConfig
     114  TIM_OC2FastConfig
     428  TIM_OC2Init
      78  TIM_OC2NPolarityConfig
     124  TIM_OC2PolarityConfig
     124  TIM_OC2PreloadConfig
      96  TIM_OC3FastConfig
     410  TIM_OC3Init
      78  TIM_OC3NPolarityConfig
     108  TIM_OC3PolarityConfig
     106  TIM_OC3PreloadConfig
      98  TIM_OC4FastConfig
     286  TIM_OC4Init
     108  TIM_OC4PolarityConfig
     108  TIM_OC4PreloadConfig
      34  TIM_OCStructInit
     202  TIM_PWMIConfig
     160  TIM_PrescalerConfig
     116  TIM_RemapConfig
     112  TIM_SelectCCDMA
      86  TIM_SelectCOM
     114  TIM_SelectHallSensor
     186  TIM_SelectInputTrigger
     104  TIM_SelectMasterSlaveMode
     290  TIM_SelectOCxM
     168  TIM_SelectOnePulseMode
     156  TIM_SelectOutputTrigger
     132  TIM_SelectSlaveMode
     132  TIM_SetAutoreload
     162  TIM_SetClockDivision
      94  TIM_SetCompare1
      76  TIM_SetCompare2
      66  TIM_SetCompare3
      66  TIM_SetCompare4
     132  TIM_SetCounter
     152  TIM_SetIC1Prescaler
     124  TIM_SetIC2Prescaler
     118  TIM_SetIC3Prescaler
     120  TIM_SetIC4Prescaler
     212  TIM_TIxExternalClockConfig
     328  TIM_TimeBaseInit
      24  TIM_TimeBaseStructInit
     150  TIM_UpdateDisableConfig
     150  TIM_UpdateRequestConfig

 
    112 bytes in section .rodata
 14 012 bytes in section .text
 
 14 012 bytes of CODE  memory
    112 bytes of CONST memory

Errors: none
Warnings: none
