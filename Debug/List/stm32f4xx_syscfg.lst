###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       06/May/2016  23:31:35
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\IAR
#        Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_syscfg.c
#    Command line =  
#        "D:\IAR
#        Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_syscfg.c"
#        -D USE_STDPERIPH_DRIVER -D STM32F4XX -D USE_FULL_ASSERT -lCN "D:\IAR
#        Workspace\STM32F407\VCP_ESP\Debug\List" -o "D:\IAR
#        Workspace\STM32F407\VCP_ESP\Debug\Obj" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\"
#        -I "D:\IAR Workspace\STM32F407\VCP_ESP\..\Libraries\CMSIS\Include\" -I
#        "D:\IAR Workspace\STM32F407\VCP_ESP\..\Utilities\STM32F4-Discovery\"
#        -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\..\Libraries\CMSIS\ST\STM32F4xx\Include\"
#        -I "D:\IAR Workspace\STM32F407\VCP_ESP\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_conf\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\cdc\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\otg\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\core\" -On --use_c++_inline -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        D:\IAR Workspace\STM32F407\VCP_ESP\Debug\List\stm32f4xx_syscfg.lst
#    Object file  =  
#        D:\IAR Workspace\STM32F407\VCP_ESP\Debug\Obj\stm32f4xx_syscfg.o
#
###############################################################################

D:\IAR Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_syscfg.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f4xx_syscfg.c
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    30-September-2011
      7            * @brief   This file provides firmware functions to manage the SYSCFG peripheral.
      8            *
      9            *  @verbatim
     10            *  
     11            *          ===================================================================
     12            *                                 How to use this driver
     13            *          ===================================================================
     14            *                  
     15            *          This driver provides functions for:
     16            *          
     17            *          1. Remapping the memory accessible in the code area using SYSCFG_MemoryRemapConfig()
     18            *              
     19            *          2. Manage the EXTI lines connection to the GPIOs using SYSCFG_EXTILineConfig()
     20            *            
     21            *          3. Select the ETHERNET media interface (RMII/RII) using SYSCFG_ETH_MediaInterfaceConfig()
     22            *
     23            *  @note  SYSCFG APB clock must be enabled to get write access to SYSCFG registers,
     24            *         using RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
     25            *                 
     26            *  @endverbatim
     27            *      
     28            ******************************************************************************
     29            * @attention
     30            *
     31            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     32            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     33            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     34            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     35            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     36            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     37            *
     38            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     39            ******************************************************************************
     40            */
     41          
     42          /* Includes ------------------------------------------------------------------*/
     43          #include "stm32f4xx_syscfg.h"
     44          #include "stm32f4xx_rcc.h"
     45          
     46          /** @addtogroup STM32F4xx_StdPeriph_Driver
     47            * @{
     48            */
     49          
     50          /** @defgroup SYSCFG 
     51            * @brief SYSCFG driver modules
     52            * @{
     53            */ 
     54          
     55          /* Private typedef -----------------------------------------------------------*/
     56          /* Private define ------------------------------------------------------------*/
     57          /* ------------ RCC registers bit address in the alias region ----------- */
     58          #define SYSCFG_OFFSET             (SYSCFG_BASE - PERIPH_BASE)
     59          /* ---  PMC Register ---*/ 
     60          /* Alias word address of MII_RMII_SEL bit */ 
     61          #define PMC_OFFSET                (SYSCFG_OFFSET + 0x04) 
     62          #define MII_RMII_SEL_BitNumber    ((uint8_t)0x17) 
     63          #define PMC_MII_RMII_SEL_BB       (PERIPH_BB_BASE + (PMC_OFFSET * 32) + (MII_RMII_SEL_BitNumber * 4)) 
     64          
     65          /* ---  CMPCR Register ---*/ 
     66          /* Alias word address of CMP_PD bit */ 
     67          #define CMPCR_OFFSET              (SYSCFG_OFFSET + 0x20) 
     68          #define CMP_PD_BitNumber          ((uint8_t)0x00) 
     69          #define CMPCR_CMP_PD_BB           (PERIPH_BB_BASE + (CMPCR_OFFSET * 32) + (CMP_PD_BitNumber * 4)) 
     70          
     71          /* Private macro -------------------------------------------------------------*/
     72          /* Private variables ---------------------------------------------------------*/
     73          /* Private function prototypes -----------------------------------------------*/
     74          /* Private functions ---------------------------------------------------------*/
     75          
     76          /** @defgroup SYSCFG_Private_Functions
     77            * @{
     78            */ 
     79          
     80          /**
     81            * @brief  Deinitializes the Alternate Functions (remap and EXTI configuration)
     82            *   registers to their default reset values.
     83            * @param  None
     84            * @retval None
     85            */

   \                                 In section .text, align 2, keep-with-next
     86          void SYSCFG_DeInit(void)
     87          {
   \                     SYSCFG_DeInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     88             RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0xF44F 0x4080      MOV      R0,#+16384
   \   00000008   0x.... 0x....      BL       RCC_APB2PeriphResetCmd
     89             RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0xF44F 0x4080      MOV      R0,#+16384
   \   00000012   0x.... 0x....      BL       RCC_APB2PeriphResetCmd
     90          }
   \   00000016   0xBD01             POP      {R0,PC}          ;; return
     91          
     92          /**
     93            * @brief  Changes the mapping of the specified pin.
     94            * @param  SYSCFG_Memory: selects the memory remapping.
     95            *         This parameter can be one of the following values:
     96            *            @arg SYSCFG_MemoryRemap_Flash:       Main Flash memory mapped at 0x00000000  
     97            *            @arg SYSCFG_MemoryRemap_SystemFlash: System Flash memory mapped at 0x00000000
     98            *            @arg SYSCFG_MemoryRemap_FSMC:        FSMC (Bank1 (NOR/PSRAM 1 and 2) mapped at 0x00000000
     99            *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000
    100            * @retval None
    101            */

   \                                 In section .text, align 2, keep-with-next
    102          void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
    103          {
   \                     SYSCFG_MemoryRemapConfig: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    104            /* Check the parameters */
    105            assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD00C             BEQ.N    ??SYSCFG_MemoryRemapConfig_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C01             CMP      R4,#+1
   \   0000000E   0xD009             BEQ.N    ??SYSCFG_MemoryRemapConfig_0
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C03             CMP      R4,#+3
   \   00000014   0xD006             BEQ.N    ??SYSCFG_MemoryRemapConfig_0
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x2C02             CMP      R4,#+2
   \   0000001A   0xD003             BEQ.N    ??SYSCFG_MemoryRemapConfig_0
   \   0000001C   0x2169             MOVS     R1,#+105
   \   0000001E   0x....             LDR.N    R0,??DataTable4
   \   00000020   0x.... 0x....      BL       assert_failed
    106          
    107            SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
   \                     ??SYSCFG_MemoryRemapConfig_0: (+1)
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40013800
   \   00000028   0x6004             STR      R4,[R0, #+0]
    108          }
   \   0000002A   0xBD10             POP      {R4,PC}          ;; return
    109          
    110          /**
    111            * @brief  Selects the GPIO pin used as EXTI Line.
    112            * @param  EXTI_PortSourceGPIOx : selects the GPIO port to be used as source for
    113            *          EXTI lines where x can be (A..I).
    114            * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
    115            *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
    116            *           for EXTI_PortSourceGPIOI x can be (0..11).
    117            * @retval None
    118            */

   \                                 In section .text, align 2, keep-with-next
    119          void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
    120          {
   \                     SYSCFG_EXTILineConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    121            uint32_t tmp = 0x00;
   \   00000006   0x2600             MOVS     R6,#+0
    122          
    123            /* Check the parameters */
    124            assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
   \   00000008   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xD01B             BEQ.N    ??SYSCFG_EXTILineConfig_0
   \   0000000E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000010   0x2C01             CMP      R4,#+1
   \   00000012   0xD018             BEQ.N    ??SYSCFG_EXTILineConfig_0
   \   00000014   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000016   0x2C02             CMP      R4,#+2
   \   00000018   0xD015             BEQ.N    ??SYSCFG_EXTILineConfig_0
   \   0000001A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001C   0x2C03             CMP      R4,#+3
   \   0000001E   0xD012             BEQ.N    ??SYSCFG_EXTILineConfig_0
   \   00000020   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000022   0x2C04             CMP      R4,#+4
   \   00000024   0xD00F             BEQ.N    ??SYSCFG_EXTILineConfig_0
   \   00000026   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000028   0x2C05             CMP      R4,#+5
   \   0000002A   0xD00C             BEQ.N    ??SYSCFG_EXTILineConfig_0
   \   0000002C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002E   0x2C06             CMP      R4,#+6
   \   00000030   0xD009             BEQ.N    ??SYSCFG_EXTILineConfig_0
   \   00000032   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000034   0x2C07             CMP      R4,#+7
   \   00000036   0xD006             BEQ.N    ??SYSCFG_EXTILineConfig_0
   \   00000038   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003A   0x2C08             CMP      R4,#+8
   \   0000003C   0xD003             BEQ.N    ??SYSCFG_EXTILineConfig_0
   \   0000003E   0x217C             MOVS     R1,#+124
   \   00000040   0x....             LDR.N    R0,??DataTable4
   \   00000042   0x.... 0x....      BL       assert_failed
    125            assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
   \                     ??SYSCFG_EXTILineConfig_0: (+1)
   \   00000046   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000048   0x2D00             CMP      R5,#+0
   \   0000004A   0xD030             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   0000004C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004E   0x2D01             CMP      R5,#+1
   \   00000050   0xD02D             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   00000052   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000054   0x2D02             CMP      R5,#+2
   \   00000056   0xD02A             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   00000058   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000005A   0x2D03             CMP      R5,#+3
   \   0000005C   0xD027             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   0000005E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000060   0x2D04             CMP      R5,#+4
   \   00000062   0xD024             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   00000064   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000066   0x2D05             CMP      R5,#+5
   \   00000068   0xD021             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   0000006A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000006C   0x2D06             CMP      R5,#+6
   \   0000006E   0xD01E             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   00000070   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000072   0x2D07             CMP      R5,#+7
   \   00000074   0xD01B             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   00000076   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000078   0x2D08             CMP      R5,#+8
   \   0000007A   0xD018             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   0000007C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000007E   0x2D09             CMP      R5,#+9
   \   00000080   0xD015             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   00000082   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000084   0x2D0A             CMP      R5,#+10
   \   00000086   0xD012             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   00000088   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000008A   0x2D0B             CMP      R5,#+11
   \   0000008C   0xD00F             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   0000008E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000090   0x2D0C             CMP      R5,#+12
   \   00000092   0xD00C             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   00000094   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000096   0x2D0D             CMP      R5,#+13
   \   00000098   0xD009             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   0000009A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000009C   0x2D0E             CMP      R5,#+14
   \   0000009E   0xD006             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   000000A0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000A2   0x2D0F             CMP      R5,#+15
   \   000000A4   0xD003             BEQ.N    ??SYSCFG_EXTILineConfig_1
   \   000000A6   0x217D             MOVS     R1,#+125
   \   000000A8   0x....             LDR.N    R0,??DataTable4
   \   000000AA   0x.... 0x....      BL       assert_failed
    126          
    127            tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
   \                     ??SYSCFG_EXTILineConfig_1: (+1)
   \   000000AE   0x200F             MOVS     R0,#+15
   \   000000B0   0xF015 0x0103      ANDS     R1,R5,#0x3
   \   000000B4   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000B6   0x0089             LSLS     R1,R1,#+2
   \   000000B8   0x4088             LSLS     R0,R0,R1
   \   000000BA   0x0006             MOVS     R6,R0
    128            SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
   \   000000BC   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40013808
   \   000000BE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000C0   0x10A9             ASRS     R1,R5,#+2
   \   000000C2   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   000000C6   0x43B0             BICS     R0,R0,R6
   \   000000C8   0x....             LDR.N    R1,??DataTable4_2  ;; 0x40013808
   \   000000CA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000CC   0x10AA             ASRS     R2,R5,#+2
   \   000000CE   0xF841 0x0022      STR      R0,[R1, R2, LSL #+2]
    129            SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
   \   000000D2   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40013808
   \   000000D4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000D6   0x10A9             ASRS     R1,R5,#+2
   \   000000D8   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   000000DC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000DE   0xF015 0x0103      ANDS     R1,R5,#0x3
   \   000000E2   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000E4   0x0089             LSLS     R1,R1,#+2
   \   000000E6   0xFA14 0xF101      LSLS     R1,R4,R1
   \   000000EA   0x4308             ORRS     R0,R1,R0
   \   000000EC   0x....             LDR.N    R1,??DataTable4_2  ;; 0x40013808
   \   000000EE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000F0   0x10AA             ASRS     R2,R5,#+2
   \   000000F2   0xF841 0x0022      STR      R0,[R1, R2, LSL #+2]
    130          }
   \   000000F6   0xBD70             POP      {R4-R6,PC}       ;; return
    131          
    132          /**
    133            * @brief  Selects the ETHERNET media interface 
    134            * @param  SYSCFG_ETH_MediaInterface: specifies the Media Interface mode. 
    135            *          This parameter can be one of the following values: 
    136            *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
    137            *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
    138            * @retval None 
    139            */

   \                                 In section .text, align 2, keep-with-next
    140          void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
    141          { 
   \                     SYSCFG_ETH_MediaInterfaceConfig: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    142            assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
   \   00000004   0x2C00             CMP      R4,#+0
   \   00000006   0xD005             BEQ.N    ??SYSCFG_ETH_MediaInterfaceConfig_0
   \   00000008   0x2C01             CMP      R4,#+1
   \   0000000A   0xD003             BEQ.N    ??SYSCFG_ETH_MediaInterfaceConfig_0
   \   0000000C   0x218E             MOVS     R1,#+142
   \   0000000E   0x....             LDR.N    R0,??DataTable4
   \   00000010   0x.... 0x....      BL       assert_failed
    143            /* Configure MII_RMII selection bit */ 
    144            *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
   \                     ??SYSCFG_ETH_MediaInterfaceConfig_0: (+1)
   \   00000014   0x....             LDR.N    R0,??DataTable4_3  ;; 0x422700dc
   \   00000016   0x6004             STR      R4,[R0, #+0]
    145          }
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    146          
    147          /**
    148            * @brief  Enables or disables the I/O Compensation Cell.
    149            * @note   The I/O compensation cell can be used only when the device supply
    150            *         voltage ranges from 2.4 to 3.6 V.  
    151            * @param  NewState: new state of the I/O Compensation Cell.
    152            *          This parameter can be one of the following values:
    153            *            @arg ENABLE: I/O compensation cell enabled  
    154            *            @arg DISABLE: I/O compensation cell power-down mode  
    155            * @retval None
    156            */

   \                                 In section .text, align 2, keep-with-next
    157          void SYSCFG_CompensationCellCmd(FunctionalState NewState)
    158          {
   \                     SYSCFG_CompensationCellCmd: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    159            /* Check the parameters */
    160            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD006             BEQ.N    ??SYSCFG_CompensationCellCmd_0
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C01             CMP      R4,#+1
   \   0000000E   0xD003             BEQ.N    ??SYSCFG_CompensationCellCmd_0
   \   00000010   0x21A0             MOVS     R1,#+160
   \   00000012   0x....             LDR.N    R0,??DataTable4
   \   00000014   0x.... 0x....      BL       assert_failed
    161          
    162            *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
   \                     ??SYSCFG_CompensationCellCmd_0: (+1)
   \   00000018   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001A   0x....             LDR.N    R0,??DataTable4_4  ;; 0x42270400
   \   0000001C   0x6004             STR      R4,[R0, #+0]
    163          }
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return
    164          
    165          /**
    166            * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
    167            * @param  None
    168            * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
    169            */

   \                                 In section .text, align 2, keep-with-next
    170          FlagStatus SYSCFG_GetCompensationCellStatus(void)
    171          {
    172            FlagStatus bitstatus = RESET;
   \                     SYSCFG_GetCompensationCellStatus: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
    173              
    174            if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
   \   00000002   0x....             LDR.N    R1,??DataTable4_5  ;; 0x40013820
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0x05C9             LSLS     R1,R1,#+23
   \   00000008   0xD502             BPL.N    ??SYSCFG_GetCompensationCellStatus_0
    175            {
    176              bitstatus = SET;
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x0008             MOVS     R0,R1
   \   0000000E   0xE001             B.N      ??SYSCFG_GetCompensationCellStatus_1
    177            }
    178            else
    179            {
    180              bitstatus = RESET;
   \                     ??SYSCFG_GetCompensationCellStatus_0: (+1)
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x0008             MOVS     R0,R1
    181            }
    182            return bitstatus;
   \                     ??SYSCFG_GetCompensationCellStatus_1: (+1)
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x4770             BX       LR               ;; return
    183          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x40013800         DC32     0x40013800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x40013808         DC32     0x40013808

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x422700DC         DC32     0x422700dc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x42270400         DC32     0x42270400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x40013820         DC32     0x40013820

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x44 0x3A          DC8 44H, 3AH, 5CH, 49H, 41H, 52H, 20H, 57H
   \              0x5C 0x49    
   \              0x41 0x52    
   \              0x20 0x57    
   \   00000008   0x6F 0x72          DC8 6FH, 72H, 6BH, 73H, 70H, 61H, 63H, 65H
   \              0x6B 0x73    
   \              0x70 0x61    
   \              0x63 0x65    
   \   00000010   0x5C 0x53          DC8 5CH, 53H, 54H, 4DH, 33H, 32H, 46H, 34H
   \              0x54 0x4D    
   \              0x33 0x32    
   \              0x46 0x34    
   \   00000018   0x30 0x37          DC8 30H, 37H, 5CH, 53H, 54H, 4DH, 33H, 32H
   \              0x5C 0x53    
   \              0x54 0x4D    
   \              0x33 0x32    
   \   00000020   0x46 0x34          DC8 46H, 34H, 2DH, 44H, 69H, 73H, 63H, 6FH
   \              0x2D 0x44    
   \              0x69 0x73    
   \              0x63 0x6F    
   \   00000028   0x76 0x65          DC8 76H, 65H, 72H, 79H, 5FH, 46H, 57H, 5FH
   \              0x72 0x79    
   \              0x5F 0x46    
   \              0x57 0x5F    
   \   00000030   0x56 0x31          DC8 56H, 31H, 2EH, 31H, 2EH, 30H, 5CH, 4CH
   \              0x2E 0x31    
   \              0x2E 0x30    
   \              0x5C 0x4C    
   \   00000038   0x69 0x62          DC8 69H, 62H, 72H, 61H, 72H, 69H, 65H, 73H
   \              0x72 0x61    
   \              0x72 0x69    
   \              0x65 0x73    
   \   00000040   0x5C 0x53          DC8 5CH, 53H, 54H, 4DH, 33H, 32H, 46H, 34H
   \              0x54 0x4D    
   \              0x33 0x32    
   \              0x46 0x34    
   \   00000048   0x78 0x78          DC8 78H, 78H, 5FH, 53H, 74H, 64H, 50H, 65H
   \              0x5F 0x53    
   \              0x74 0x64    
   \              0x50 0x65    
   \   00000050   0x72 0x69          DC8 72H, 69H, 70H, 68H, 5FH, 44H, 72H, 69H
   \              0x70 0x68    
   \              0x5F 0x44    
   \              0x72 0x69    
   \   00000058   0x76 0x65          DC8 76H, 65H, 72H, 5CH, 73H, 72H, 63H, 5CH
   \              0x72 0x5C    
   \              0x73 0x72    
   \              0x63 0x5C    
   \   00000060   0x73 0x74          DC8 73H, 74H, 6DH, 33H, 32H, 66H, 34H, 78H
   \              0x6D 0x33    
   \              0x32 0x66    
   \              0x34 0x78    
   \   00000068   0x78 0x5F          DC8 78H, 5FH, 73H, 79H, 73H, 63H, 66H, 67H
   \              0x73 0x79    
   \              0x73 0x63    
   \              0x66 0x67    
   \   00000070   0x2E 0x63          DC8 2EH, 63H, 0
   \              0x00         
   \   00000073   0x00               DC8 0
    184          
    185          /**
    186            * @}
    187            */
    188          
    189          /**
    190            * @}
    191            */
    192          
    193          /**
    194            * @}
    195            */
    196          
    197          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/   

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SYSCFG_CompensationCellCmd
         8   -> assert_failed
       8   SYSCFG_DeInit
         8   -> RCC_APB2PeriphResetCmd
       8   SYSCFG_ETH_MediaInterfaceConfig
         8   -> assert_failed
      16   SYSCFG_EXTILineConfig
        16   -> assert_failed
       0   SYSCFG_GetCompensationCellStatus
       8   SYSCFG_MemoryRemapConfig
         8   -> assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
     116  ?_0
      32  SYSCFG_CompensationCellCmd
      24  SYSCFG_DeInit
      26  SYSCFG_ETH_MediaInterfaceConfig
     248  SYSCFG_EXTILineConfig
      24  SYSCFG_GetCompensationCellStatus
      44  SYSCFG_MemoryRemapConfig

 
 116 bytes in section .rodata
 422 bytes in section .text
 
 422 bytes of CODE  memory
 116 bytes of CONST memory

Errors: none
Warnings: none
