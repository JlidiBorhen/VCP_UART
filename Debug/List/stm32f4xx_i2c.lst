###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       06/May/2016  23:31:34
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\IAR
#        Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_i2c.c
#    Command line =  
#        "D:\IAR
#        Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_i2c.c"
#        -D USE_STDPERIPH_DRIVER -D STM32F4XX -D USE_FULL_ASSERT -lCN "D:\IAR
#        Workspace\STM32F407\VCP_ESP\Debug\List" -o "D:\IAR
#        Workspace\STM32F407\VCP_ESP\Debug\Obj" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\"
#        -I "D:\IAR Workspace\STM32F407\VCP_ESP\..\Libraries\CMSIS\Include\" -I
#        "D:\IAR Workspace\STM32F407\VCP_ESP\..\Utilities\STM32F4-Discovery\"
#        -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\..\Libraries\CMSIS\ST\STM32F4xx\Include\"
#        -I "D:\IAR Workspace\STM32F407\VCP_ESP\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_conf\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\cdc\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\otg\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\core\" -On --use_c++_inline -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        D:\IAR Workspace\STM32F407\VCP_ESP\Debug\List\stm32f4xx_i2c.lst
#    Object file  =  
#        D:\IAR Workspace\STM32F407\VCP_ESP\Debug\Obj\stm32f4xx_i2c.o
#
###############################################################################

D:\IAR Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_i2c.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f4xx_i2c.c
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    30-September-2011
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionalities of the Inter-integrated circuit (I2C)
      9            *           - Initialization and Configuration
     10            *           - Data transfers
     11            *           - PEC management
     12            *           - DMA transfers management
     13            *           - Interrupts, events and flags management 
     14            *           
     15            *  @verbatim
     16            *    
     17            *          ===================================================================
     18            *                                 How to use this driver
     19            *          ===================================================================
     20            *          1. Enable peripheral clock using RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2Cx, ENABLE)
     21            *             function for I2C1, I2C2 or I2C3.
     22            *
     23            *          2. Enable SDA, SCL  and SMBA (when used) GPIO clocks using 
     24            *             RCC_AHBPeriphClockCmd() function. 
     25            *
     26            *          3. Peripherals alternate function: 
     27            *                 - Connect the pin to the desired peripherals' Alternate 
     28            *                   Function (AF) using GPIO_PinAFConfig() function
     29            *                 - Configure the desired pin in alternate function by:
     30            *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
     31            *                 - Select the type, pull-up/pull-down and output speed via 
     32            *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
     33            *                 - Call GPIO_Init() function
     34            *                 Recommended configuration is Push-Pull, Pull-up, Open-Drain.
     35            *                 Add an external pull up if necessary (typically 4.7 KOhm).      
     36            *        
     37            *          4. Program the Mode, duty cycle , Own address, Ack, Speed and Acknowledged
     38            *             Address using the I2C_Init() function.
     39            *
     40            *          5. Optionally you can enable/configure the following parameters without
     41            *             re-initialization (i.e there is no need to call again I2C_Init() function):
     42            *              - Enable the acknowledge feature using I2C_AcknowledgeConfig() function
     43            *              - Enable the dual addressing mode using I2C_DualAddressCmd() function
     44            *              - Enable the general call using the I2C_GeneralCallCmd() function
     45            *              - Enable the clock stretching using I2C_StretchClockCmd() function
     46            *              - Enable the fast mode duty cycle using the I2C_FastModeDutyCycleConfig()
     47            *                function.
     48            *              - Configure the NACK position for Master Receiver mode in case of 
     49            *                2 bytes reception using the function I2C_NACKPositionConfig().  
     50            *              - Enable the PEC Calculation using I2C_CalculatePEC() function
     51            *              - For SMBus Mode: 
     52            *                   - Enable the Address Resolution Protocol (ARP) using I2C_ARPCmd() function
     53            *                   - Configure the SMBusAlert pin using I2C_SMBusAlertConfig() function
     54            *
     55            *          6. Enable the NVIC and the corresponding interrupt using the function 
     56            *             I2C_ITConfig() if you need to use interrupt mode. 
     57            *
     58            *          7. When using the DMA mode 
     59            *                   - Configure the DMA using DMA_Init() function
     60            *                   - Active the needed channel Request using I2C_DMACmd() or
     61            *                     I2C_DMALastTransferCmd() function.
     62            *              @note When using DMA mode, I2C interrupts may be used at the same time to
     63            *                    control the communication flow (Start/Stop/Ack... events and errors).
     64            * 
     65            *          8. Enable the I2C using the I2C_Cmd() function.
     66            * 
     67            *          9. Enable the DMA using the DMA_Cmd() function when using DMA mode in the 
     68            *             transfers. 
     69            *
     70            *  @endverbatim
     71            *  
     72            ******************************************************************************
     73            * @attention
     74            *
     75            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     76            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     77            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     78            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     79            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     80            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     81            *
     82            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     83            ******************************************************************************  
     84            */ 
     85          
     86          /* Includes ------------------------------------------------------------------*/
     87          #include "stm32f4xx_i2c.h"
     88          #include "stm32f4xx_rcc.h"
     89          
     90          /** @addtogroup STM32F4xx_StdPeriph_Driver
     91            * @{
     92            */
     93          
     94          /** @defgroup I2C 
     95            * @brief I2C driver modules
     96            * @{
     97            */ 
     98          
     99          /* Private typedef -----------------------------------------------------------*/
    100          /* Private define ------------------------------------------------------------*/
    101          
    102          #define CR1_CLEAR_MASK    ((uint16_t)0xFBF5)      /*<! I2C registers Masks */
    103          #define FLAG_MASK         ((uint32_t)0x00FFFFFF)  /*<! I2C FLAG mask */
    104          #define ITEN_MASK         ((uint32_t)0x07000000)  /*<! I2C Interrupt Enable mask */
    105          
    106          /* Private macro -------------------------------------------------------------*/
    107          /* Private variables ---------------------------------------------------------*/
    108          /* Private function prototypes -----------------------------------------------*/
    109          /* Private functions ---------------------------------------------------------*/
    110          
    111          /** @defgroup I2C_Private_Functions
    112            * @{
    113            */
    114          
    115          /** @defgroup I2C_Group1 Initialization and Configuration functions
    116           *  @brief   Initialization and Configuration functions 
    117           *
    118          @verbatim   
    119           ===============================================================================
    120                             Initialization and Configuration functions
    121           ===============================================================================  
    122          
    123          @endverbatim
    124            * @{
    125            */
    126          
    127          /**
    128            * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
    129            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
    130            * @retval None
    131            */

   \                                 In section .text, align 2, keep-with-next
    132          void I2C_DeInit(I2C_TypeDef* I2Cx)
    133          {
   \                     I2C_DeInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    134            /* Check the parameters */
    135            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable24  ;; 0x40005400
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD00C             BEQ.N    ??I2C_DeInit_0
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable24_1  ;; 0x40005800
   \   00000010   0x4284             CMP      R4,R0
   \   00000012   0xD008             BEQ.N    ??I2C_DeInit_0
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable25  ;; 0x40005c00
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD004             BEQ.N    ??I2C_DeInit_0
   \   0000001C   0x2187             MOVS     R1,#+135
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   00000022   0x.... 0x....      BL       assert_failed
    136          
    137            if (I2Cx == I2C1)
   \                     ??I2C_DeInit_0: (+1)
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable24  ;; 0x40005400
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD10A             BNE.N    ??I2C_DeInit_1
    138            {
    139              /* Enable I2C1 reset state */
    140              RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
   \   0000002E   0x2101             MOVS     R1,#+1
   \   00000030   0xF45F 0x1000      MOVS     R0,#+2097152
   \   00000034   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
    141              /* Release I2C1 from reset state */
    142              RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
   \   00000038   0x2100             MOVS     R1,#+0
   \   0000003A   0xF45F 0x1000      MOVS     R0,#+2097152
   \   0000003E   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
   \   00000042   0xE01C             B.N      ??I2C_DeInit_2
    143            }
    144            else if (I2Cx == I2C2)
   \                     ??I2C_DeInit_1: (+1)
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable24_1  ;; 0x40005800
   \   00000048   0x4284             CMP      R4,R0
   \   0000004A   0xD10A             BNE.N    ??I2C_DeInit_3
    145            {
    146              /* Enable I2C2 reset state */
    147              RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
   \   0000004C   0x2101             MOVS     R1,#+1
   \   0000004E   0xF45F 0x0080      MOVS     R0,#+4194304
   \   00000052   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
    148              /* Release I2C2 from reset state */
    149              RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
   \   00000056   0x2100             MOVS     R1,#+0
   \   00000058   0xF45F 0x0080      MOVS     R0,#+4194304
   \   0000005C   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
   \   00000060   0xE00D             B.N      ??I2C_DeInit_2
    150            }
    151            else 
    152            {
    153              if (I2Cx == I2C3)
   \                     ??I2C_DeInit_3: (+1)
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable25  ;; 0x40005c00
   \   00000066   0x4284             CMP      R4,R0
   \   00000068   0xD109             BNE.N    ??I2C_DeInit_2
    154              {
    155                /* Enable I2C3 reset state */
    156                RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
   \   0000006A   0x2101             MOVS     R1,#+1
   \   0000006C   0xF45F 0x0000      MOVS     R0,#+8388608
   \   00000070   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
    157                /* Release I2C3 from reset state */
    158                RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
   \   00000074   0x2100             MOVS     R1,#+0
   \   00000076   0xF45F 0x0000      MOVS     R0,#+8388608
   \   0000007A   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
    159              }
    160            }
    161          }
   \                     ??I2C_DeInit_2: (+1)
   \   0000007E   0xBD10             POP      {R4,PC}          ;; return
    162          
    163          /**
    164            * @brief  Initializes the I2Cx peripheral according to the specified 
    165            *         parameters in the I2C_InitStruct.
    166            *           
    167            * @note   To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency 
    168            *         (I2C peripheral input clock) must be a multiple of 10 MHz.  
    169            *           
    170            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
    171            * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
    172            *         the configuration information for the specified I2C peripheral.
    173            * @retval None
    174            */

   \                                 In section .text, align 2, keep-with-next
    175          void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
    176          {
   \                     I2C_Init: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
    177            uint16_t tmpreg = 0, freqrange = 0;
   \   0000000A   0x2600             MOVS     R6,#+0
   \   0000000C   0x2700             MOVS     R7,#+0
    178            uint16_t result = 0x04;
   \   0000000E   0xF05F 0x0804      MOVS     R8,#+4
    179            uint32_t pclk1 = 8000000;
   \   00000012   0x.... 0x....      LDR.W    R9,??DataTable25_1  ;; 0x7a1200
    180            RCC_ClocksTypeDef  rcc_clocks;
    181            /* Check the parameters */
    182            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable24  ;; 0x40005400
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD00C             BEQ.N    ??I2C_Init_0
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable24_1  ;; 0x40005800
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD008             BEQ.N    ??I2C_Init_0
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable25  ;; 0x40005c00
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD004             BEQ.N    ??I2C_Init_0
   \   0000002E   0x21B6             MOVS     R1,#+182
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   00000034   0x.... 0x....      BL       assert_failed
    183            assert_param(IS_I2C_CLOCK_SPEED(I2C_InitStruct->I2C_ClockSpeed));
   \                     ??I2C_Init_0: (+1)
   \   00000038   0x6828             LDR      R0,[R5, #+0]
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD004             BEQ.N    ??I2C_Init_1
   \   0000003E   0x6828             LDR      R0,[R5, #+0]
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable25_2  ;; 0x61a81
   \   00000044   0x4288             CMP      R0,R1
   \   00000046   0xD304             BCC.N    ??I2C_Init_2
   \                     ??I2C_Init_1: (+1)
   \   00000048   0x21B7             MOVS     R1,#+183
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   0000004E   0x.... 0x....      BL       assert_failed
    184            assert_param(IS_I2C_MODE(I2C_InitStruct->I2C_Mode));
   \                     ??I2C_Init_2: (+1)
   \   00000052   0x88A8             LDRH     R0,[R5, #+4]
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD00A             BEQ.N    ??I2C_Init_3
   \   00000058   0x88A8             LDRH     R0,[R5, #+4]
   \   0000005A   0x2802             CMP      R0,#+2
   \   0000005C   0xD007             BEQ.N    ??I2C_Init_3
   \   0000005E   0x88A8             LDRH     R0,[R5, #+4]
   \   00000060   0x280A             CMP      R0,#+10
   \   00000062   0xD004             BEQ.N    ??I2C_Init_3
   \   00000064   0x21B8             MOVS     R1,#+184
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   0000006A   0x.... 0x....      BL       assert_failed
    185            assert_param(IS_I2C_DUTY_CYCLE(I2C_InitStruct->I2C_DutyCycle));
   \                     ??I2C_Init_3: (+1)
   \   0000006E   0x88E8             LDRH     R0,[R5, #+6]
   \   00000070   0xF5B0 0x4F80      CMP      R0,#+16384
   \   00000074   0xD009             BEQ.N    ??I2C_Init_4
   \   00000076   0x88E8             LDRH     R0,[R5, #+6]
   \   00000078   0xF64B 0x71FF      MOVW     R1,#+49151
   \   0000007C   0x4288             CMP      R0,R1
   \   0000007E   0xD004             BEQ.N    ??I2C_Init_4
   \   00000080   0x21B9             MOVS     R1,#+185
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   00000086   0x.... 0x....      BL       assert_failed
    186            assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
   \                     ??I2C_Init_4: (+1)
   \   0000008A   0x8928             LDRH     R0,[R5, #+8]
   \   0000008C   0xF5B0 0x6F80      CMP      R0,#+1024
   \   00000090   0xDB04             BLT.N    ??I2C_Init_5
   \   00000092   0x21BA             MOVS     R1,#+186
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   00000098   0x.... 0x....      BL       assert_failed
    187            assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
   \                     ??I2C_Init_5: (+1)
   \   0000009C   0x8968             LDRH     R0,[R5, #+10]
   \   0000009E   0xF5B0 0x6F80      CMP      R0,#+1024
   \   000000A2   0xD007             BEQ.N    ??I2C_Init_6
   \   000000A4   0x8968             LDRH     R0,[R5, #+10]
   \   000000A6   0x2800             CMP      R0,#+0
   \   000000A8   0xD004             BEQ.N    ??I2C_Init_6
   \   000000AA   0x21BB             MOVS     R1,#+187
   \   000000AC   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   000000B0   0x.... 0x....      BL       assert_failed
    188            assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));
   \                     ??I2C_Init_6: (+1)
   \   000000B4   0x89A8             LDRH     R0,[R5, #+12]
   \   000000B6   0xF5B0 0x4F80      CMP      R0,#+16384
   \   000000BA   0xD008             BEQ.N    ??I2C_Init_7
   \   000000BC   0x89A8             LDRH     R0,[R5, #+12]
   \   000000BE   0xF5B0 0x4F40      CMP      R0,#+49152
   \   000000C2   0xD004             BEQ.N    ??I2C_Init_7
   \   000000C4   0x21BC             MOVS     R1,#+188
   \   000000C6   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   000000CA   0x.... 0x....      BL       assert_failed
    189          
    190          /*---------------------------- I2Cx CR2 Configuration ------------------------*/
    191            /* Get the I2Cx CR2 value */
    192            tmpreg = I2Cx->CR2;
   \                     ??I2C_Init_7: (+1)
   \   000000CE   0x88A0             LDRH     R0,[R4, #+4]
   \   000000D0   0x0006             MOVS     R6,R0
    193            /* Clear frequency FREQ[5:0] bits */
    194            tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
   \   000000D2   0xF64F 0x70C0      MOVW     R0,#+65472
   \   000000D6   0x4006             ANDS     R6,R0,R6
    195            /* Get pclk1 frequency value */
    196            RCC_GetClocksFreq(&rcc_clocks);
   \   000000D8   0x4668             MOV      R0,SP
   \   000000DA   0x.... 0x....      BL       RCC_GetClocksFreq
    197            pclk1 = rcc_clocks.PCLK1_Frequency;
   \   000000DE   0x9802             LDR      R0,[SP, #+8]
   \   000000E0   0x4681             MOV      R9,R0
    198            /* Set frequency bits depending on pclk1 value */
    199            freqrange = (uint16_t)(pclk1 / 1000000);
   \   000000E2   0x.... 0x....      LDR.W    R0,??DataTable25_3  ;; 0xf4240
   \   000000E6   0xFBB9 0xF0F0      UDIV     R0,R9,R0
   \   000000EA   0x0007             MOVS     R7,R0
    200            tmpreg |= freqrange;
   \   000000EC   0x433E             ORRS     R6,R7,R6
    201            /* Write to I2Cx CR2 */
    202            I2Cx->CR2 = tmpreg;
   \   000000EE   0x80A6             STRH     R6,[R4, #+4]
    203          
    204          /*---------------------------- I2Cx CCR Configuration ------------------------*/
    205            /* Disable the selected I2C peripheral to configure TRISE */
    206            I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
   \   000000F0   0x8820             LDRH     R0,[R4, #+0]
   \   000000F2   0xF64F 0x71FE      MOVW     R1,#+65534
   \   000000F6   0x4008             ANDS     R0,R1,R0
   \   000000F8   0x8020             STRH     R0,[R4, #+0]
    207            /* Reset tmpreg value */
    208            /* Clear F/S, DUTY and CCR[11:0] bits */
    209            tmpreg = 0;
   \   000000FA   0x2000             MOVS     R0,#+0
   \   000000FC   0x0006             MOVS     R6,R0
    210          
    211            /* Configure speed in standard mode */
    212            if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
   \   000000FE   0x6828             LDR      R0,[R5, #+0]
   \   00000100   0x.... 0x....      LDR.W    R1,??DataTable30  ;; 0x186a1
   \   00000104   0x4288             CMP      R0,R1
   \   00000106   0xD210             BCS.N    ??I2C_Init_8
    213            {
    214              /* Standard mode speed calculate */
    215              result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
   \   00000108   0x6828             LDR      R0,[R5, #+0]
   \   0000010A   0x0040             LSLS     R0,R0,#+1
   \   0000010C   0xFBB9 0xF0F0      UDIV     R0,R9,R0
   \   00000110   0x4680             MOV      R8,R0
    216              /* Test if CCR value is under 0x4*/
    217              if (result < 0x04)
   \   00000112   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000116   0xF1B8 0x0F04      CMP      R8,#+4
   \   0000011A   0xDA01             BGE.N    ??I2C_Init_9
    218              {
    219                /* Set minimum allowed value */
    220                result = 0x04;  
   \   0000011C   0x2004             MOVS     R0,#+4
   \   0000011E   0x4680             MOV      R8,R0
    221              }
    222              /* Set speed value for standard mode */
    223              tmpreg |= result;	  
   \                     ??I2C_Init_9: (+1)
   \   00000120   0xEA58 0x0606      ORRS     R6,R8,R6
    224              /* Set Maximum Rise Time for standard mode */
    225              I2Cx->TRISE = freqrange + 1; 
   \   00000124   0x1C78             ADDS     R0,R7,#+1
   \   00000126   0x8420             STRH     R0,[R4, #+32]
   \   00000128   0xE026             B.N      ??I2C_Init_10
    226            }
    227            /* Configure speed in fast mode */
    228            /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
    229               input clock) must be a multiple of 10 MHz */
    230            else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
    231            {
    232              if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
   \                     ??I2C_Init_8: (+1)
   \   0000012A   0x88E8             LDRH     R0,[R5, #+6]
   \   0000012C   0xF64B 0x71FF      MOVW     R1,#+49151
   \   00000130   0x4288             CMP      R0,R1
   \   00000132   0xD106             BNE.N    ??I2C_Init_11
    233              {
    234                /* Fast mode speed calculate: Tlow/Thigh = 2 */
    235                result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
   \   00000134   0x6828             LDR      R0,[R5, #+0]
   \   00000136   0x2103             MOVS     R1,#+3
   \   00000138   0x4348             MULS     R0,R1,R0
   \   0000013A   0xFBB9 0xF0F0      UDIV     R0,R9,R0
   \   0000013E   0x4680             MOV      R8,R0
   \   00000140   0xE007             B.N      ??I2C_Init_12
    236              }
    237              else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    238              {
    239                /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
    240                result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
   \                     ??I2C_Init_11: (+1)
   \   00000142   0x6828             LDR      R0,[R5, #+0]
   \   00000144   0x2119             MOVS     R1,#+25
   \   00000146   0x4348             MULS     R0,R1,R0
   \   00000148   0xFBB9 0xF0F0      UDIV     R0,R9,R0
   \   0000014C   0x4680             MOV      R8,R0
    241                /* Set DUTY bit */
    242                result |= I2C_DutyCycle_16_9;
   \   0000014E   0xF458 0x4880      ORRS     R8,R8,#0x4000
    243              }
    244          
    245              /* Test if CCR value is under 0x1*/
    246              if ((result & I2C_CCR_CCR) == 0)
   \                     ??I2C_Init_12: (+1)
   \   00000152   0xEA5F 0x5008      LSLS     R0,R8,#+20
   \   00000156   0xD101             BNE.N    ??I2C_Init_13
    247              {
    248                /* Set minimum allowed value */
    249                result |= (uint16_t)0x0001;  
   \   00000158   0xF058 0x0801      ORRS     R8,R8,#0x1
    250              }
    251              /* Set speed value and set F/S bit for fast mode */
    252              tmpreg |= (uint16_t)(result | I2C_CCR_FS);
   \                     ??I2C_Init_13: (+1)
   \   0000015C   0xF458 0x4000      ORRS     R0,R8,#0x8000
   \   00000160   0x4306             ORRS     R6,R0,R6
    253              /* Set Maximum Rise Time for fast mode */
    254              I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
   \   00000162   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000164   0xF44F 0x7096      MOV      R0,#+300
   \   00000168   0xFB00 0xF007      MUL      R0,R0,R7
   \   0000016C   0xF44F 0x717A      MOV      R1,#+1000
   \   00000170   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000174   0x1C40             ADDS     R0,R0,#+1
   \   00000176   0x8420             STRH     R0,[R4, #+32]
    255            }
    256          
    257            /* Write to I2Cx CCR */
    258            I2Cx->CCR = tmpreg;
   \                     ??I2C_Init_10: (+1)
   \   00000178   0x83A6             STRH     R6,[R4, #+28]
    259            /* Enable the selected I2C peripheral */
    260            I2Cx->CR1 |= I2C_CR1_PE;
   \   0000017A   0x8820             LDRH     R0,[R4, #+0]
   \   0000017C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000180   0x8020             STRH     R0,[R4, #+0]
    261          
    262          /*---------------------------- I2Cx CR1 Configuration ------------------------*/
    263            /* Get the I2Cx CR1 value */
    264            tmpreg = I2Cx->CR1;
   \   00000182   0x8820             LDRH     R0,[R4, #+0]
   \   00000184   0x0006             MOVS     R6,R0
    265            /* Clear ACK, SMBTYPE and  SMBUS bits */
    266            tmpreg &= CR1_CLEAR_MASK;
   \   00000186   0xF64F 0x30F5      MOVW     R0,#+64501
   \   0000018A   0x4006             ANDS     R6,R0,R6
    267            /* Configure I2Cx: mode and acknowledgement */
    268            /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
    269            /* Set ACK bit according to I2C_Ack value */
    270            tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
   \   0000018C   0x88A8             LDRH     R0,[R5, #+4]
   \   0000018E   0x8969             LDRH     R1,[R5, #+10]
   \   00000190   0x4308             ORRS     R0,R1,R0
   \   00000192   0x4306             ORRS     R6,R0,R6
    271            /* Write to I2Cx CR1 */
    272            I2Cx->CR1 = tmpreg;
   \   00000194   0x8026             STRH     R6,[R4, #+0]
    273          
    274          /*---------------------------- I2Cx OAR1 Configuration -----------------------*/
    275            /* Set I2Cx Own Address1 and acknowledged address */
    276            I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
   \   00000196   0x89A8             LDRH     R0,[R5, #+12]
   \   00000198   0x8929             LDRH     R1,[R5, #+8]
   \   0000019A   0x4308             ORRS     R0,R1,R0
   \   0000019C   0x8120             STRH     R0,[R4, #+8]
    277          }
   \   0000019E   0xB005             ADD      SP,SP,#+20
   \   000001A0   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
    278          
    279          /**
    280            * @brief  Fills each I2C_InitStruct member with its default value.
    281            * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
    282            * @retval None
    283            */

   \                                 In section .text, align 2, keep-with-next
    284          void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
    285          {
    286          /*---------------- Reset I2C init structure parameters values ----------------*/
    287            /* initialize the I2C_ClockSpeed member */
    288            I2C_InitStruct->I2C_ClockSpeed = 5000;
   \                     I2C_StructInit: (+1)
   \   00000000   0xF241 0x3188      MOVW     R1,#+5000
   \   00000004   0x6001             STR      R1,[R0, #+0]
    289            /* Initialize the I2C_Mode member */
    290            I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x8081             STRH     R1,[R0, #+4]
    291            /* Initialize the I2C_DutyCycle member */
    292            I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
   \   0000000A   0xF64B 0x71FF      MOVW     R1,#+49151
   \   0000000E   0x80C1             STRH     R1,[R0, #+6]
    293            /* Initialize the I2C_OwnAddress1 member */
    294            I2C_InitStruct->I2C_OwnAddress1 = 0;
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x8101             STRH     R1,[R0, #+8]
    295            /* Initialize the I2C_Ack member */
    296            I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x8141             STRH     R1,[R0, #+10]
    297            /* Initialize the I2C_AcknowledgedAddress member */
    298            I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
   \   00000018   0xF44F 0x4180      MOV      R1,#+16384
   \   0000001C   0x8181             STRH     R1,[R0, #+12]
    299          }
   \   0000001E   0x4770             BX       LR               ;; return
    300          
    301          /**
    302            * @brief  Enables or disables the specified I2C peripheral.
    303            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
    304            * @param  NewState: new state of the I2Cx peripheral. 
    305            *          This parameter can be: ENABLE or DISABLE.
    306            * @retval None
    307            */

   \                                 In section .text, align 2, keep-with-next
    308          void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
    309          {
   \                     I2C_Cmd: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    310            /* Check the parameters */
    311            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable24  ;; 0x40005400
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD00D             BEQ.N    ??I2C_Cmd_0
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable24_1  ;; 0x40005800
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD009             BEQ.N    ??I2C_Cmd_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable25  ;; 0x40005c00
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD005             BEQ.N    ??I2C_Cmd_0
   \   0000001E   0xF240 0x1137      MOVW     R1,#+311
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   00000026   0x.... 0x....      BL       assert_failed
    312            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \                     ??I2C_Cmd_0: (+1)
   \   0000002A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002C   0x2D00             CMP      R5,#+0
   \   0000002E   0xD008             BEQ.N    ??I2C_Cmd_1
   \   00000030   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000032   0x2D01             CMP      R5,#+1
   \   00000034   0xD005             BEQ.N    ??I2C_Cmd_1
   \   00000036   0xF44F 0x719C      MOV      R1,#+312
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   0000003E   0x.... 0x....      BL       assert_failed
    313            if (NewState != DISABLE)
   \                     ??I2C_Cmd_1: (+1)
   \   00000042   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000044   0x2D00             CMP      R5,#+0
   \   00000046   0xD004             BEQ.N    ??I2C_Cmd_2
    314            {
    315              /* Enable the selected I2C peripheral */
    316              I2Cx->CR1 |= I2C_CR1_PE;
   \   00000048   0x8820             LDRH     R0,[R4, #+0]
   \   0000004A   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000004E   0x8020             STRH     R0,[R4, #+0]
   \   00000050   0xE004             B.N      ??I2C_Cmd_3
    317            }
    318            else
    319            {
    320              /* Disable the selected I2C peripheral */
    321              I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
   \                     ??I2C_Cmd_2: (+1)
   \   00000052   0x8820             LDRH     R0,[R4, #+0]
   \   00000054   0xF64F 0x71FE      MOVW     R1,#+65534
   \   00000058   0x4008             ANDS     R0,R1,R0
   \   0000005A   0x8020             STRH     R0,[R4, #+0]
    322            }
    323          }
   \                     ??I2C_Cmd_3: (+1)
   \   0000005C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    324          
    325          /**
    326            * @brief  Generates I2Cx communication START condition.
    327            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
    328            * @param  NewState: new state of the I2C START condition generation.
    329            *          This parameter can be: ENABLE or DISABLE.
    330            * @retval None.
    331            */

   \                                 In section .text, align 2, keep-with-next
    332          void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
    333          {
   \                     I2C_GenerateSTART: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    334            /* Check the parameters */
    335            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable24  ;; 0x40005400
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD00D             BEQ.N    ??I2C_GenerateSTART_0
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable24_1  ;; 0x40005800
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD009             BEQ.N    ??I2C_GenerateSTART_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable25  ;; 0x40005c00
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD005             BEQ.N    ??I2C_GenerateSTART_0
   \   0000001E   0xF240 0x114F      MOVW     R1,#+335
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   00000026   0x.... 0x....      BL       assert_failed
    336            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \                     ??I2C_GenerateSTART_0: (+1)
   \   0000002A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002C   0x2D00             CMP      R5,#+0
   \   0000002E   0xD008             BEQ.N    ??I2C_GenerateSTART_1
   \   00000030   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000032   0x2D01             CMP      R5,#+1
   \   00000034   0xD005             BEQ.N    ??I2C_GenerateSTART_1
   \   00000036   0xF44F 0x71A8      MOV      R1,#+336
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   0000003E   0x.... 0x....      BL       assert_failed
    337            if (NewState != DISABLE)
   \                     ??I2C_GenerateSTART_1: (+1)
   \   00000042   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000044   0x2D00             CMP      R5,#+0
   \   00000046   0xD004             BEQ.N    ??I2C_GenerateSTART_2
    338            {
    339              /* Generate a START condition */
    340              I2Cx->CR1 |= I2C_CR1_START;
   \   00000048   0x8820             LDRH     R0,[R4, #+0]
   \   0000004A   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   0000004E   0x8020             STRH     R0,[R4, #+0]
   \   00000050   0xE004             B.N      ??I2C_GenerateSTART_3
    341            }
    342            else
    343            {
    344              /* Disable the START condition generation */
    345              I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
   \                     ??I2C_GenerateSTART_2: (+1)
   \   00000052   0x8820             LDRH     R0,[R4, #+0]
   \   00000054   0xF64F 0x61FF      MOVW     R1,#+65279
   \   00000058   0x4008             ANDS     R0,R1,R0
   \   0000005A   0x8020             STRH     R0,[R4, #+0]
    346            }
    347          }
   \                     ??I2C_GenerateSTART_3: (+1)
   \   0000005C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    348          
    349          /**
    350            * @brief  Generates I2Cx communication STOP condition.
    351            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
    352            * @param  NewState: new state of the I2C STOP condition generation.
    353            *          This parameter can be: ENABLE or DISABLE.
    354            * @retval None.
    355            */

   \                                 In section .text, align 2, keep-with-next
    356          void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
    357          {
   \                     I2C_GenerateSTOP: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    358            /* Check the parameters */
    359            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable24  ;; 0x40005400
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD00D             BEQ.N    ??I2C_GenerateSTOP_0
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable24_1  ;; 0x40005800
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD009             BEQ.N    ??I2C_GenerateSTOP_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable25  ;; 0x40005c00
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD005             BEQ.N    ??I2C_GenerateSTOP_0
   \   0000001E   0xF240 0x1167      MOVW     R1,#+359
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   00000026   0x.... 0x....      BL       assert_failed
    360            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \                     ??I2C_GenerateSTOP_0: (+1)
   \   0000002A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002C   0x2D00             CMP      R5,#+0
   \   0000002E   0xD008             BEQ.N    ??I2C_GenerateSTOP_1
   \   00000030   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000032   0x2D01             CMP      R5,#+1
   \   00000034   0xD005             BEQ.N    ??I2C_GenerateSTOP_1
   \   00000036   0xF44F 0x71B4      MOV      R1,#+360
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   0000003E   0x.... 0x....      BL       assert_failed
    361            if (NewState != DISABLE)
   \                     ??I2C_GenerateSTOP_1: (+1)
   \   00000042   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000044   0x2D00             CMP      R5,#+0
   \   00000046   0xD004             BEQ.N    ??I2C_GenerateSTOP_2
    362            {
    363              /* Generate a STOP condition */
    364              I2Cx->CR1 |= I2C_CR1_STOP;
   \   00000048   0x8820             LDRH     R0,[R4, #+0]
   \   0000004A   0xF450 0x7000      ORRS     R0,R0,#0x200
   \   0000004E   0x8020             STRH     R0,[R4, #+0]
   \   00000050   0xE004             B.N      ??I2C_GenerateSTOP_3
    365            }
    366            else
    367            {
    368              /* Disable the STOP condition generation */
    369              I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
   \                     ??I2C_GenerateSTOP_2: (+1)
   \   00000052   0x8820             LDRH     R0,[R4, #+0]
   \   00000054   0xF64F 0x51FF      MOVW     R1,#+65023
   \   00000058   0x4008             ANDS     R0,R1,R0
   \   0000005A   0x8020             STRH     R0,[R4, #+0]
    370            }
    371          }
   \                     ??I2C_GenerateSTOP_3: (+1)
   \   0000005C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    372          
    373          /**
    374            * @brief  Transmits the address byte to select the slave device.
    375            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
    376            * @param  Address: specifies the slave address which will be transmitted
    377            * @param  I2C_Direction: specifies whether the I2C device will be a Transmitter
    378            *         or a Receiver. 
    379            *          This parameter can be one of the following values
    380            *            @arg I2C_Direction_Transmitter: Transmitter mode
    381            *            @arg I2C_Direction_Receiver: Receiver mode
    382            * @retval None.
    383            */

   \                                 In section .text, align 2, keep-with-next
    384          void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
    385          {
   \                     I2C_Send7bitAddress: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    386            /* Check the parameters */
    387            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable24  ;; 0x40005400
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD00D             BEQ.N    ??I2C_Send7bitAddress_0
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable24_1  ;; 0x40005800
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD009             BEQ.N    ??I2C_Send7bitAddress_0
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable25  ;; 0x40005c00
   \   0000001C   0x4284             CMP      R4,R0
   \   0000001E   0xD005             BEQ.N    ??I2C_Send7bitAddress_0
   \   00000020   0xF240 0x1183      MOVW     R1,#+387
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   00000028   0x.... 0x....      BL       assert_failed
    388            assert_param(IS_I2C_DIRECTION(I2C_Direction));
   \                     ??I2C_Send7bitAddress_0: (+1)
   \   0000002C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000002E   0x2E00             CMP      R6,#+0
   \   00000030   0xD008             BEQ.N    ??I2C_Send7bitAddress_1
   \   00000032   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000034   0x2E01             CMP      R6,#+1
   \   00000036   0xD005             BEQ.N    ??I2C_Send7bitAddress_1
   \   00000038   0xF44F 0x71C2      MOV      R1,#+388
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   00000040   0x.... 0x....      BL       assert_failed
    389            /* Test on the direction to set/reset the read/write bit */
    390            if (I2C_Direction != I2C_Direction_Transmitter)
   \                     ??I2C_Send7bitAddress_1: (+1)
   \   00000044   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000046   0x2E00             CMP      R6,#+0
   \   00000048   0xD002             BEQ.N    ??I2C_Send7bitAddress_2
    391            {
    392              /* Set the address bit0 for read */
    393              Address |= I2C_OAR1_ADD0;
   \   0000004A   0xF055 0x0501      ORRS     R5,R5,#0x1
   \   0000004E   0xE001             B.N      ??I2C_Send7bitAddress_3
    394            }
    395            else
    396            {
    397              /* Reset the address bit0 for write */
    398              Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
   \                     ??I2C_Send7bitAddress_2: (+1)
   \   00000050   0xF015 0x05FE      ANDS     R5,R5,#0xFE
    399            }
    400            /* Send the address */
    401            I2Cx->DR = Address;
   \                     ??I2C_Send7bitAddress_3: (+1)
   \   00000054   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000056   0x8225             STRH     R5,[R4, #+16]
    402          }
   \   00000058   0xBD70             POP      {R4-R6,PC}       ;; return
    403          
    404          /**
    405            * @brief  Enables or disables the specified I2C acknowledge feature.
    406            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
    407            * @param  NewState: new state of the I2C Acknowledgement.
    408            *          This parameter can be: ENABLE or DISABLE.
    409            * @retval None.
    410            */

   \                                 In section .text, align 2, keep-with-next
    411          void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
    412          {
   \                     I2C_AcknowledgeConfig: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    413            /* Check the parameters */
    414            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable24  ;; 0x40005400
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD00D             BEQ.N    ??I2C_AcknowledgeConfig_0
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable24_1  ;; 0x40005800
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD009             BEQ.N    ??I2C_AcknowledgeConfig_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable25  ;; 0x40005c00
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD005             BEQ.N    ??I2C_AcknowledgeConfig_0
   \   0000001E   0xF44F 0x71CF      MOV      R1,#+414
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   00000026   0x.... 0x....      BL       assert_failed
    415            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \                     ??I2C_AcknowledgeConfig_0: (+1)
   \   0000002A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002C   0x2D00             CMP      R5,#+0
   \   0000002E   0xD008             BEQ.N    ??I2C_AcknowledgeConfig_1
   \   00000030   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000032   0x2D01             CMP      R5,#+1
   \   00000034   0xD005             BEQ.N    ??I2C_AcknowledgeConfig_1
   \   00000036   0xF240 0x119F      MOVW     R1,#+415
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   0000003E   0x.... 0x....      BL       assert_failed
    416            if (NewState != DISABLE)
   \                     ??I2C_AcknowledgeConfig_1: (+1)
   \   00000042   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000044   0x2D00             CMP      R5,#+0
   \   00000046   0xD004             BEQ.N    ??I2C_AcknowledgeConfig_2
    417            {
    418              /* Enable the acknowledgement */
    419              I2Cx->CR1 |= I2C_CR1_ACK;
   \   00000048   0x8820             LDRH     R0,[R4, #+0]
   \   0000004A   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   0000004E   0x8020             STRH     R0,[R4, #+0]
   \   00000050   0xE004             B.N      ??I2C_AcknowledgeConfig_3
    420            }
    421            else
    422            {
    423              /* Disable the acknowledgement */
    424              I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
   \                     ??I2C_AcknowledgeConfig_2: (+1)
   \   00000052   0x8820             LDRH     R0,[R4, #+0]
   \   00000054   0xF64F 0x31FF      MOVW     R1,#+64511
   \   00000058   0x4008             ANDS     R0,R1,R0
   \   0000005A   0x8020             STRH     R0,[R4, #+0]
    425            }
    426          }
   \                     ??I2C_AcknowledgeConfig_3: (+1)
   \   0000005C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    427          
    428          /**
    429            * @brief  Configures the specified I2C own address2.
    430            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
    431            * @param  Address: specifies the 7bit I2C own address2.
    432            * @retval None.
    433            */

   \                                 In section .text, align 2, keep-with-next
    434          void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
    435          {
   \                     I2C_OwnAddress2Config: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    436            uint16_t tmpreg = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    437          
    438            /* Check the parameters */
    439            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable24  ;; 0x40005400
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD00D             BEQ.N    ??I2C_OwnAddress2Config_0
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable24_1  ;; 0x40005800
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD009             BEQ.N    ??I2C_OwnAddress2Config_0
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable25  ;; 0x40005c00
   \   0000001C   0x4284             CMP      R4,R0
   \   0000001E   0xD005             BEQ.N    ??I2C_OwnAddress2Config_0
   \   00000020   0xF240 0x11B7      MOVW     R1,#+439
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   00000028   0x.... 0x....      BL       assert_failed
    440          
    441            /* Get the old register value */
    442            tmpreg = I2Cx->OAR2;
   \                     ??I2C_OwnAddress2Config_0: (+1)
   \   0000002C   0x89A0             LDRH     R0,[R4, #+12]
   \   0000002E   0x0006             MOVS     R6,R0
    443          
    444            /* Reset I2Cx Own address2 bit [7:1] */
    445            tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
   \   00000030   0xF64F 0x7001      MOVW     R0,#+65281
   \   00000034   0x4006             ANDS     R6,R0,R6
    446          
    447            /* Set I2Cx Own address2 */
    448            tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
   \   00000036   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000038   0xF015 0x00FE      ANDS     R0,R5,#0xFE
   \   0000003C   0x4306             ORRS     R6,R0,R6
    449          
    450            /* Store the new register value */
    451            I2Cx->OAR2 = tmpreg;
   \   0000003E   0x81A6             STRH     R6,[R4, #+12]
    452          }
   \   00000040   0xBD70             POP      {R4-R6,PC}       ;; return
    453          
    454          /**
    455            * @brief  Enables or disables the specified I2C dual addressing mode.
    456            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
    457            * @param  NewState: new state of the I2C dual addressing mode.
    458            *          This parameter can be: ENABLE or DISABLE.
    459            * @retval None
    460            */

   \                                 In section .text, align 2, keep-with-next
    461          void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
    462          {
   \                     I2C_DualAddressCmd: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    463            /* Check the parameters */
    464            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable24  ;; 0x40005400
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD00D             BEQ.N    ??I2C_DualAddressCmd_0
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable24_1  ;; 0x40005800
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD009             BEQ.N    ??I2C_DualAddressCmd_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable25  ;; 0x40005c00
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD005             BEQ.N    ??I2C_DualAddressCmd_0
   \   0000001E   0xF44F 0x71E8      MOV      R1,#+464
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   00000026   0x.... 0x....      BL       assert_failed
    465            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \                     ??I2C_DualAddressCmd_0: (+1)
   \   0000002A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002C   0x2D00             CMP      R5,#+0
   \   0000002E   0xD008             BEQ.N    ??I2C_DualAddressCmd_1
   \   00000030   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000032   0x2D01             CMP      R5,#+1
   \   00000034   0xD005             BEQ.N    ??I2C_DualAddressCmd_1
   \   00000036   0xF240 0x11D1      MOVW     R1,#+465
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   0000003E   0x.... 0x....      BL       assert_failed
    466            if (NewState != DISABLE)
   \                     ??I2C_DualAddressCmd_1: (+1)
   \   00000042   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000044   0x2D00             CMP      R5,#+0
   \   00000046   0xD004             BEQ.N    ??I2C_DualAddressCmd_2
    467            {
    468              /* Enable dual addressing mode */
    469              I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
   \   00000048   0x89A0             LDRH     R0,[R4, #+12]
   \   0000004A   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000004E   0x81A0             STRH     R0,[R4, #+12]
   \   00000050   0xE004             B.N      ??I2C_DualAddressCmd_3
    470            }
    471            else
    472            {
    473              /* Disable dual addressing mode */
    474              I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
   \                     ??I2C_DualAddressCmd_2: (+1)
   \   00000052   0x89A0             LDRH     R0,[R4, #+12]
   \   00000054   0xF64F 0x71FE      MOVW     R1,#+65534
   \   00000058   0x4008             ANDS     R0,R1,R0
   \   0000005A   0x81A0             STRH     R0,[R4, #+12]
    475            }
    476          }
   \                     ??I2C_DualAddressCmd_3: (+1)
   \   0000005C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    477          
    478          /**
    479            * @brief  Enables or disables the specified I2C general call feature.
    480            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
    481            * @param  NewState: new state of the I2C General call.
    482            *          This parameter can be: ENABLE or DISABLE.
    483            * @retval None
    484            */

   \                                 In section .text, align 2, keep-with-next
    485          void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
    486          {
   \                     I2C_GeneralCallCmd: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    487            /* Check the parameters */
    488            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable24  ;; 0x40005400
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD00D             BEQ.N    ??I2C_GeneralCallCmd_0
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable24_1  ;; 0x40005800
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD009             BEQ.N    ??I2C_GeneralCallCmd_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable25  ;; 0x40005c00
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD005             BEQ.N    ??I2C_GeneralCallCmd_0
   \   0000001E   0xF44F 0x71F4      MOV      R1,#+488
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   00000026   0x.... 0x....      BL       assert_failed
    489            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \                     ??I2C_GeneralCallCmd_0: (+1)
   \   0000002A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002C   0x2D00             CMP      R5,#+0
   \   0000002E   0xD008             BEQ.N    ??I2C_GeneralCallCmd_1
   \   00000030   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000032   0x2D01             CMP      R5,#+1
   \   00000034   0xD005             BEQ.N    ??I2C_GeneralCallCmd_1
   \   00000036   0xF240 0x11E9      MOVW     R1,#+489
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   0000003E   0x.... 0x....      BL       assert_failed
    490            if (NewState != DISABLE)
   \                     ??I2C_GeneralCallCmd_1: (+1)
   \   00000042   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000044   0x2D00             CMP      R5,#+0
   \   00000046   0xD004             BEQ.N    ??I2C_GeneralCallCmd_2
    491            {
    492              /* Enable generall call */
    493              I2Cx->CR1 |= I2C_CR1_ENGC;
   \   00000048   0x8820             LDRH     R0,[R4, #+0]
   \   0000004A   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   0000004E   0x8020             STRH     R0,[R4, #+0]
   \   00000050   0xE004             B.N      ??I2C_GeneralCallCmd_3
    494            }
    495            else
    496            {
    497              /* Disable generall call */
    498              I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
   \                     ??I2C_GeneralCallCmd_2: (+1)
   \   00000052   0x8820             LDRH     R0,[R4, #+0]
   \   00000054   0xF64F 0x71BF      MOVW     R1,#+65471
   \   00000058   0x4008             ANDS     R0,R1,R0
   \   0000005A   0x8020             STRH     R0,[R4, #+0]
    499            }
    500          }
   \                     ??I2C_GeneralCallCmd_3: (+1)
   \   0000005C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    501          
    502          /**
    503            * @brief  Enables or disables the specified I2C software reset.
    504            * @note   When software reset is enabled, the I2C IOs are released (this can
    505            *         be useful to recover from bus errors).  
    506            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
    507            * @param  NewState: new state of the I2C software reset.
    508            *          This parameter can be: ENABLE or DISABLE.
    509            * @retval None
    510            */

   \                                 In section .text, align 2, keep-with-next
    511          void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
    512          {
   \                     I2C_SoftwareResetCmd: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    513            /* Check the parameters */
    514            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable24  ;; 0x40005400
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD00D             BEQ.N    ??I2C_SoftwareResetCmd_0
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable24_1  ;; 0x40005800
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD009             BEQ.N    ??I2C_SoftwareResetCmd_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable25  ;; 0x40005c00
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD005             BEQ.N    ??I2C_SoftwareResetCmd_0
   \   0000001E   0xF240 0x2102      MOVW     R1,#+514
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   00000026   0x.... 0x....      BL       assert_failed
    515            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \                     ??I2C_SoftwareResetCmd_0: (+1)
   \   0000002A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002C   0x2D00             CMP      R5,#+0
   \   0000002E   0xD008             BEQ.N    ??I2C_SoftwareResetCmd_1
   \   00000030   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000032   0x2D01             CMP      R5,#+1
   \   00000034   0xD005             BEQ.N    ??I2C_SoftwareResetCmd_1
   \   00000036   0xF240 0x2103      MOVW     R1,#+515
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   0000003E   0x.... 0x....      BL       assert_failed
    516            if (NewState != DISABLE)
   \                     ??I2C_SoftwareResetCmd_1: (+1)
   \   00000042   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000044   0x2D00             CMP      R5,#+0
   \   00000046   0xD004             BEQ.N    ??I2C_SoftwareResetCmd_2
    517            {
    518              /* Peripheral under reset */
    519              I2Cx->CR1 |= I2C_CR1_SWRST;
   \   00000048   0x8820             LDRH     R0,[R4, #+0]
   \   0000004A   0xF450 0x4000      ORRS     R0,R0,#0x8000
   \   0000004E   0x8020             STRH     R0,[R4, #+0]
   \   00000050   0xE003             B.N      ??I2C_SoftwareResetCmd_3
    520            }
    521            else
    522            {
    523              /* Peripheral not under reset */
    524              I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
   \                     ??I2C_SoftwareResetCmd_2: (+1)
   \   00000052   0x8820             LDRH     R0,[R4, #+0]
   \   00000054   0x0440             LSLS     R0,R0,#+17       ;; ZeroExtS R0,R0,#+17,#+17
   \   00000056   0x0C40             LSRS     R0,R0,#+17
   \   00000058   0x8020             STRH     R0,[R4, #+0]
    525            }
    526          }
   \                     ??I2C_SoftwareResetCmd_3: (+1)
   \   0000005A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    527          
    528          /**
    529            * @brief  Enables or disables the specified I2C Clock stretching.
    530            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
    531            * @param  NewState: new state of the I2Cx Clock stretching.
    532            *          This parameter can be: ENABLE or DISABLE.
    533            * @retval None
    534            */

   \                                 In section .text, align 2, keep-with-next
    535          void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
    536          {
   \                     I2C_StretchClockCmd: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    537            /* Check the parameters */
    538            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable24  ;; 0x40005400
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD00D             BEQ.N    ??I2C_StretchClockCmd_0
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable24_1  ;; 0x40005800
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD009             BEQ.N    ??I2C_StretchClockCmd_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable25  ;; 0x40005c00
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD005             BEQ.N    ??I2C_StretchClockCmd_0
   \   0000001E   0xF240 0x211A      MOVW     R1,#+538
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   00000026   0x.... 0x....      BL       assert_failed
    539            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \                     ??I2C_StretchClockCmd_0: (+1)
   \   0000002A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002C   0x2D00             CMP      R5,#+0
   \   0000002E   0xD008             BEQ.N    ??I2C_StretchClockCmd_1
   \   00000030   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000032   0x2D01             CMP      R5,#+1
   \   00000034   0xD005             BEQ.N    ??I2C_StretchClockCmd_1
   \   00000036   0xF240 0x211B      MOVW     R1,#+539
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   0000003E   0x.... 0x....      BL       assert_failed
    540            if (NewState == DISABLE)
   \                     ??I2C_StretchClockCmd_1: (+1)
   \   00000042   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000044   0x2D00             CMP      R5,#+0
   \   00000046   0xD104             BNE.N    ??I2C_StretchClockCmd_2
    541            {
    542              /* Enable the selected I2C Clock stretching */
    543              I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
   \   00000048   0x8820             LDRH     R0,[R4, #+0]
   \   0000004A   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   0000004E   0x8020             STRH     R0,[R4, #+0]
   \   00000050   0xE004             B.N      ??I2C_StretchClockCmd_3
    544            }
    545            else
    546            {
    547              /* Disable the selected I2C Clock stretching */
    548              I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
   \                     ??I2C_StretchClockCmd_2: (+1)
   \   00000052   0x8820             LDRH     R0,[R4, #+0]
   \   00000054   0xF64F 0x717F      MOVW     R1,#+65407
   \   00000058   0x4008             ANDS     R0,R1,R0
   \   0000005A   0x8020             STRH     R0,[R4, #+0]
    549            }
    550          }
   \                     ??I2C_StretchClockCmd_3: (+1)
   \   0000005C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    551          
    552          /**
    553            * @brief  Selects the specified I2C fast mode duty cycle.
    554            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
    555            * @param  I2C_DutyCycle: specifies the fast mode duty cycle.
    556            *          This parameter can be one of the following values:
    557            *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
    558            *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
    559            * @retval None
    560            */

   \                                 In section .text, align 2, keep-with-next
    561          void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
    562          {
   \                     I2C_FastModeDutyCycleConfig: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    563            /* Check the parameters */
    564            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable24  ;; 0x40005400
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD00D             BEQ.N    ??I2C_FastModeDutyCycleConfig_0
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable24_1  ;; 0x40005800
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD009             BEQ.N    ??I2C_FastModeDutyCycleConfig_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable25  ;; 0x40005c00
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD005             BEQ.N    ??I2C_FastModeDutyCycleConfig_0
   \   0000001E   0xF44F 0x710D      MOV      R1,#+564
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   00000026   0x.... 0x....      BL       assert_failed
    565            assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
   \                     ??I2C_FastModeDutyCycleConfig_0: (+1)
   \   0000002A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000002C   0xF5B5 0x4F80      CMP      R5,#+16384
   \   00000030   0xD00A             BEQ.N    ??I2C_FastModeDutyCycleConfig_1
   \   00000032   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000034   0xF64B 0x70FF      MOVW     R0,#+49151
   \   00000038   0x4285             CMP      R5,R0
   \   0000003A   0xD005             BEQ.N    ??I2C_FastModeDutyCycleConfig_1
   \   0000003C   0xF240 0x2135      MOVW     R1,#+565
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   00000044   0x.... 0x....      BL       assert_failed
    566            if (I2C_DutyCycle != I2C_DutyCycle_16_9)
   \                     ??I2C_FastModeDutyCycleConfig_1: (+1)
   \   00000048   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004A   0xF5B5 0x4F80      CMP      R5,#+16384
   \   0000004E   0xD005             BEQ.N    ??I2C_FastModeDutyCycleConfig_2
    567            {
    568              /* I2C fast mode Tlow/Thigh=2 */
    569              I2Cx->CCR &= I2C_DutyCycle_2;
   \   00000050   0x8BA0             LDRH     R0,[R4, #+28]
   \   00000052   0xF64B 0x71FF      MOVW     R1,#+49151
   \   00000056   0x4008             ANDS     R0,R1,R0
   \   00000058   0x83A0             STRH     R0,[R4, #+28]
   \   0000005A   0xE003             B.N      ??I2C_FastModeDutyCycleConfig_3
    570            }
    571            else
    572            {
    573              /* I2C fast mode Tlow/Thigh=16/9 */
    574              I2Cx->CCR |= I2C_DutyCycle_16_9;
   \                     ??I2C_FastModeDutyCycleConfig_2: (+1)
   \   0000005C   0x8BA0             LDRH     R0,[R4, #+28]
   \   0000005E   0xF450 0x4080      ORRS     R0,R0,#0x4000
   \   00000062   0x83A0             STRH     R0,[R4, #+28]
    575            }
    576          }
   \                     ??I2C_FastModeDutyCycleConfig_3: (+1)
   \   00000064   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    577          
    578          /**
    579            * @brief  Selects the specified I2C NACK position in master receiver mode.
    580            * @note   This function is useful in I2C Master Receiver mode when the number
    581            *         of data to be received is equal to 2. In this case, this function 
    582            *         should be called (with parameter I2C_NACKPosition_Next) before data 
    583            *         reception starts,as described in the 2-byte reception procedure 
    584            *         recommended in Reference Manual in Section: Master receiver.                
    585            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
    586            * @param  I2C_NACKPosition: specifies the NACK position. 
    587            *          This parameter can be one of the following values:
    588            *            @arg I2C_NACKPosition_Next: indicates that the next byte will be the last
    589            *                                        received byte.  
    590            *            @arg I2C_NACKPosition_Current: indicates that current byte is the last 
    591            *                                           received byte.
    592            *            
    593            * @note    This function configures the same bit (POS) as I2C_PECPositionConfig() 
    594            *          but is intended to be used in I2C mode while I2C_PECPositionConfig() 
    595            *          is intended to used in SMBUS mode. 
    596            *            
    597            * @retval None
    598            */

   \                                 In section .text, align 2, keep-with-next
    599          void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
    600          {
   \                     I2C_NACKPositionConfig: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    601            /* Check the parameters */
    602            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable24  ;; 0x40005400
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD00D             BEQ.N    ??I2C_NACKPositionConfig_0
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable24_1  ;; 0x40005800
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD009             BEQ.N    ??I2C_NACKPositionConfig_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable25  ;; 0x40005c00
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD005             BEQ.N    ??I2C_NACKPositionConfig_0
   \   0000001E   0xF240 0x215A      MOVW     R1,#+602
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   00000026   0x.... 0x....      BL       assert_failed
    603            assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
   \                     ??I2C_NACKPositionConfig_0: (+1)
   \   0000002A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000002C   0xF5B5 0x6F00      CMP      R5,#+2048
   \   00000030   0xD00A             BEQ.N    ??I2C_NACKPositionConfig_1
   \   00000032   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000034   0xF24F 0x70FF      MOVW     R0,#+63487
   \   00000038   0x4285             CMP      R5,R0
   \   0000003A   0xD005             BEQ.N    ??I2C_NACKPositionConfig_1
   \   0000003C   0xF240 0x215B      MOVW     R1,#+603
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   00000044   0x.... 0x....      BL       assert_failed
    604            
    605            /* Check the input parameter */
    606            if (I2C_NACKPosition == I2C_NACKPosition_Next)
   \                     ??I2C_NACKPositionConfig_1: (+1)
   \   00000048   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004A   0xF5B5 0x6F00      CMP      R5,#+2048
   \   0000004E   0xD104             BNE.N    ??I2C_NACKPositionConfig_2
    607            {
    608              /* Next byte in shift register is the last received byte */
    609              I2Cx->CR1 |= I2C_NACKPosition_Next;
   \   00000050   0x8820             LDRH     R0,[R4, #+0]
   \   00000052   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   00000056   0x8020             STRH     R0,[R4, #+0]
   \   00000058   0xE004             B.N      ??I2C_NACKPositionConfig_3
    610            }
    611            else
    612            {
    613              /* Current byte in shift register is the last received byte */
    614              I2Cx->CR1 &= I2C_NACKPosition_Current;
   \                     ??I2C_NACKPositionConfig_2: (+1)
   \   0000005A   0x8820             LDRH     R0,[R4, #+0]
   \   0000005C   0xF24F 0x71FF      MOVW     R1,#+63487
   \   00000060   0x4008             ANDS     R0,R1,R0
   \   00000062   0x8020             STRH     R0,[R4, #+0]
    615            }
    616          }
   \                     ??I2C_NACKPositionConfig_3: (+1)
   \   00000064   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    617          
    618          /**
    619            * @brief  Drives the SMBusAlert pin high or low for the specified I2C.
    620            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
    621            * @param  I2C_SMBusAlert: specifies SMBAlert pin level. 
    622            *          This parameter can be one of the following values:
    623            *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
    624            *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
    625            * @retval None
    626            */

   \                                 In section .text, align 2, keep-with-next
    627          void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
    628          {
   \                     I2C_SMBusAlertConfig: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    629            /* Check the parameters */
    630            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable24  ;; 0x40005400
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD00D             BEQ.N    ??I2C_SMBusAlertConfig_0
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable24_1  ;; 0x40005800
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD009             BEQ.N    ??I2C_SMBusAlertConfig_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable25  ;; 0x40005c00
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD005             BEQ.N    ??I2C_SMBusAlertConfig_0
   \   0000001E   0xF240 0x2176      MOVW     R1,#+630
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   00000026   0x.... 0x....      BL       assert_failed
    631            assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
   \                     ??I2C_SMBusAlertConfig_0: (+1)
   \   0000002A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000002C   0xF5B5 0x5F00      CMP      R5,#+8192
   \   00000030   0xD00A             BEQ.N    ??I2C_SMBusAlertConfig_1
   \   00000032   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000034   0xF64D 0x70FF      MOVW     R0,#+57343
   \   00000038   0x4285             CMP      R5,R0
   \   0000003A   0xD005             BEQ.N    ??I2C_SMBusAlertConfig_1
   \   0000003C   0xF240 0x2177      MOVW     R1,#+631
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable24_2
   \   00000044   0x.... 0x....      BL       assert_failed
    632            if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
   \                     ??I2C_SMBusAlertConfig_1: (+1)
   \   00000048   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004A   0xF5B5 0x5F00      CMP      R5,#+8192
   \   0000004E   0xD104             BNE.N    ??I2C_SMBusAlertConfig_2
    633            {
    634              /* Drive the SMBusAlert pin Low */
    635              I2Cx->CR1 |= I2C_SMBusAlert_Low;
   \   00000050   0x8820             LDRH     R0,[R4, #+0]
   \   00000052   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   00000056   0x8020             STRH     R0,[R4, #+0]
   \   00000058   0xE004             B.N      ??I2C_SMBusAlertConfig_3
    636            }
    637            else
    638            {
    639              /* Drive the SMBusAlert pin High  */
    640              I2Cx->CR1 &= I2C_SMBusAlert_High;
   \                     ??I2C_SMBusAlertConfig_2: (+1)
   \   0000005A   0x8820             LDRH     R0,[R4, #+0]
   \   0000005C   0xF64D 0x71FF      MOVW     R1,#+57343
   \   00000060   0x4008             ANDS     R0,R1,R0
   \   00000062   0x8020             STRH     R0,[R4, #+0]
    641            }
    642          }
   \                     ??I2C_SMBusAlertConfig_3: (+1)
   \   00000064   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    643          
    644          /**
    645            * @brief  Enables or disables the specified I2C ARP.
    646            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
    647            * @param  NewState: new state of the I2Cx ARP. 
    648            *          This parameter can be: ENABLE or DISABLE.
    649            * @retval None
    650            */

   \                                 In section .text, align 2, keep-with-next
    651          void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
    652          {
   \                     I2C_ARPCmd: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    653            /* Check the parameters */
    654            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   00000006   0x....             LDR.N    R0,??DataTable24  ;; 0x40005400
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD00B             BEQ.N    ??I2C_ARPCmd_0
   \   0000000C   0x....             LDR.N    R0,??DataTable24_1  ;; 0x40005800
   \   0000000E   0x4284             CMP      R4,R0
   \   00000010   0xD008             BEQ.N    ??I2C_ARPCmd_0
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable25  ;; 0x40005c00
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xD004             BEQ.N    ??I2C_ARPCmd_0
   \   0000001A   0xF240 0x218E      MOVW     R1,#+654
   \   0000001E   0x....             LDR.N    R0,??DataTable24_2
   \   00000020   0x.... 0x....      BL       assert_failed
    655            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \                     ??I2C_ARPCmd_0: (+1)
   \   00000024   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000026   0x2D00             CMP      R5,#+0
   \   00000028   0xD007             BEQ.N    ??I2C_ARPCmd_1
   \   0000002A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002C   0x2D01             CMP      R5,#+1
   \   0000002E   0xD004             BEQ.N    ??I2C_ARPCmd_1
   \   00000030   0xF240 0x218F      MOVW     R1,#+655
   \   00000034   0x....             LDR.N    R0,??DataTable24_2
   \   00000036   0x.... 0x....      BL       assert_failed
    656            if (NewState != DISABLE)
   \                     ??I2C_ARPCmd_1: (+1)
   \   0000003A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003C   0x2D00             CMP      R5,#+0
   \   0000003E   0xD004             BEQ.N    ??I2C_ARPCmd_2
    657            {
    658              /* Enable the selected I2C ARP */
    659              I2Cx->CR1 |= I2C_CR1_ENARP;
   \   00000040   0x8820             LDRH     R0,[R4, #+0]
   \   00000042   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000046   0x8020             STRH     R0,[R4, #+0]
   \   00000048   0xE004             B.N      ??I2C_ARPCmd_3
    660            }
    661            else
    662            {
    663              /* Disable the selected I2C ARP */
    664              I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
   \                     ??I2C_ARPCmd_2: (+1)
   \   0000004A   0x8820             LDRH     R0,[R4, #+0]
   \   0000004C   0xF64F 0x71EF      MOVW     R1,#+65519
   \   00000050   0x4008             ANDS     R0,R1,R0
   \   00000052   0x8020             STRH     R0,[R4, #+0]
    665            }
    666          }
   \                     ??I2C_ARPCmd_3: (+1)
   \   00000054   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    667          /**
    668            * @}
    669            */
    670          
    671          /** @defgroup I2C_Group2 Data transfers functions
    672           *  @brief   Data transfers functions 
    673           *
    674          @verbatim   
    675           ===============================================================================
    676                                  Data transfers functions
    677           ===============================================================================  
    678          
    679          @endverbatim
    680            * @{
    681            */
    682          
    683          /**
    684            * @brief  Sends a data byte through the I2Cx peripheral.
    685            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
    686            * @param  Data: Byte to be transmitted..
    687            * @retval None
    688            */

   \                                 In section .text, align 2, keep-with-next
    689          void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
    690          {
   \                     I2C_SendData: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    691            /* Check the parameters */
    692            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   00000006   0x....             LDR.N    R0,??DataTable24  ;; 0x40005400
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD00A             BEQ.N    ??I2C_SendData_0
   \   0000000C   0x....             LDR.N    R0,??DataTable24_1  ;; 0x40005800
   \   0000000E   0x4284             CMP      R4,R0
   \   00000010   0xD007             BEQ.N    ??I2C_SendData_0
   \   00000012   0x....             LDR.N    R0,??DataTable25  ;; 0x40005c00
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD004             BEQ.N    ??I2C_SendData_0
   \   00000018   0xF44F 0x712D      MOV      R1,#+692
   \   0000001C   0x....             LDR.N    R0,??DataTable24_2
   \   0000001E   0x.... 0x....      BL       assert_failed
    693            /* Write in the DR register the data to be sent */
    694            I2Cx->DR = Data;
   \                     ??I2C_SendData_0: (+1)
   \   00000022   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000024   0x8225             STRH     R5,[R4, #+16]
    695          }
   \   00000026   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    696          
    697          /**
    698            * @brief  Returns the most recent received data by the I2Cx peripheral.
    699            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
    700            * @retval The value of the received data.
    701            */

   \                                 In section .text, align 2, keep-with-next
    702          uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
    703          {
   \                     I2C_ReceiveData: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    704            /* Check the parameters */
    705            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   00000004   0x....             LDR.N    R0,??DataTable24  ;; 0x40005400
   \   00000006   0x4284             CMP      R4,R0
   \   00000008   0xD00A             BEQ.N    ??I2C_ReceiveData_0
   \   0000000A   0x....             LDR.N    R0,??DataTable24_1  ;; 0x40005800
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD007             BEQ.N    ??I2C_ReceiveData_0
   \   00000010   0x....             LDR.N    R0,??DataTable25  ;; 0x40005c00
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD004             BEQ.N    ??I2C_ReceiveData_0
   \   00000016   0xF240 0x21C1      MOVW     R1,#+705
   \   0000001A   0x....             LDR.N    R0,??DataTable24_2
   \   0000001C   0x.... 0x....      BL       assert_failed
    706            /* Return the data in the DR register */
    707            return (uint8_t)I2Cx->DR;
   \                     ??I2C_ReceiveData_0: (+1)
   \   00000020   0x8A20             LDRH     R0,[R4, #+16]
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0xBD10             POP      {R4,PC}          ;; return
    708          }
    709          
    710          /**
    711            * @}
    712            */
    713          
    714          /** @defgroup I2C_Group3 PEC management functions
    715           *  @brief   PEC management functions 
    716           *
    717          @verbatim   
    718           ===============================================================================
    719                                   PEC management functions
    720           ===============================================================================  
    721          
    722          @endverbatim
    723            * @{
    724            */
    725          
    726          /**
    727            * @brief  Enables or disables the specified I2C PEC transfer.
    728            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
    729            * @param  NewState: new state of the I2C PEC transmission.
    730            *          This parameter can be: ENABLE or DISABLE.
    731            * @retval None
    732            */

   \                                 In section .text, align 2, keep-with-next
    733          void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
    734          {
   \                     I2C_TransmitPEC: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    735            /* Check the parameters */
    736            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   00000006   0x....             LDR.N    R0,??DataTable24  ;; 0x40005400
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD00A             BEQ.N    ??I2C_TransmitPEC_0
   \   0000000C   0x....             LDR.N    R0,??DataTable24_1  ;; 0x40005800
   \   0000000E   0x4284             CMP      R4,R0
   \   00000010   0xD007             BEQ.N    ??I2C_TransmitPEC_0
   \   00000012   0x....             LDR.N    R0,??DataTable25  ;; 0x40005c00
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD004             BEQ.N    ??I2C_TransmitPEC_0
   \   00000018   0xF44F 0x7138      MOV      R1,#+736
   \   0000001C   0x....             LDR.N    R0,??DataTable24_2
   \   0000001E   0x.... 0x....      BL       assert_failed
    737            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \                     ??I2C_TransmitPEC_0: (+1)
   \   00000022   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000024   0x2D00             CMP      R5,#+0
   \   00000026   0xD007             BEQ.N    ??I2C_TransmitPEC_1
   \   00000028   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002A   0x2D01             CMP      R5,#+1
   \   0000002C   0xD004             BEQ.N    ??I2C_TransmitPEC_1
   \   0000002E   0xF240 0x21E1      MOVW     R1,#+737
   \   00000032   0x....             LDR.N    R0,??DataTable24_2
   \   00000034   0x.... 0x....      BL       assert_failed
    738            if (NewState != DISABLE)
   \                     ??I2C_TransmitPEC_1: (+1)
   \   00000038   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003A   0x2D00             CMP      R5,#+0
   \   0000003C   0xD004             BEQ.N    ??I2C_TransmitPEC_2
    739            {
    740              /* Enable the selected I2C PEC transmission */
    741              I2Cx->CR1 |= I2C_CR1_PEC;
   \   0000003E   0x8820             LDRH     R0,[R4, #+0]
   \   00000040   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   00000044   0x8020             STRH     R0,[R4, #+0]
   \   00000046   0xE004             B.N      ??I2C_TransmitPEC_3
    742            }
    743            else
    744            {
    745              /* Disable the selected I2C PEC transmission */
    746              I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
   \                     ??I2C_TransmitPEC_2: (+1)
   \   00000048   0x8820             LDRH     R0,[R4, #+0]
   \   0000004A   0xF64E 0x71FF      MOVW     R1,#+61439
   \   0000004E   0x4008             ANDS     R0,R1,R0
   \   00000050   0x8020             STRH     R0,[R4, #+0]
    747            }
    748          }
   \                     ??I2C_TransmitPEC_3: (+1)
   \   00000052   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    749          
    750          /**
    751            * @brief  Selects the specified I2C PEC position.
    752            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
    753            * @param  I2C_PECPosition: specifies the PEC position. 
    754            *          This parameter can be one of the following values:
    755            *            @arg I2C_PECPosition_Next: indicates that the next byte is PEC
    756            *            @arg I2C_PECPosition_Current: indicates that current byte is PEC
    757            *       
    758            * @note    This function configures the same bit (POS) as I2C_NACKPositionConfig()
    759            *          but is intended to be used in SMBUS mode while I2C_NACKPositionConfig() 
    760            *          is intended to used in I2C mode.
    761            *                
    762            * @retval None
    763            */

   \                                 In section .text, align 2, keep-with-next
    764          void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
    765          {
   \                     I2C_PECPositionConfig: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    766            /* Check the parameters */
    767            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   00000006   0x....             LDR.N    R0,??DataTable24  ;; 0x40005400
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD00A             BEQ.N    ??I2C_PECPositionConfig_0
   \   0000000C   0x....             LDR.N    R0,??DataTable24_1  ;; 0x40005800
   \   0000000E   0x4284             CMP      R4,R0
   \   00000010   0xD007             BEQ.N    ??I2C_PECPositionConfig_0
   \   00000012   0x....             LDR.N    R0,??DataTable25  ;; 0x40005c00
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD004             BEQ.N    ??I2C_PECPositionConfig_0
   \   00000018   0xF240 0x21FF      MOVW     R1,#+767
   \   0000001C   0x....             LDR.N    R0,??DataTable24_2
   \   0000001E   0x.... 0x....      BL       assert_failed
    768            assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
   \                     ??I2C_PECPositionConfig_0: (+1)
   \   00000022   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000024   0xF5B5 0x6F00      CMP      R5,#+2048
   \   00000028   0xD009             BEQ.N    ??I2C_PECPositionConfig_1
   \   0000002A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000002C   0xF24F 0x70FF      MOVW     R0,#+63487
   \   00000030   0x4285             CMP      R5,R0
   \   00000032   0xD004             BEQ.N    ??I2C_PECPositionConfig_1
   \   00000034   0xF44F 0x7140      MOV      R1,#+768
   \   00000038   0x....             LDR.N    R0,??DataTable24_2
   \   0000003A   0x.... 0x....      BL       assert_failed
    769            if (I2C_PECPosition == I2C_PECPosition_Next)
   \                     ??I2C_PECPositionConfig_1: (+1)
   \   0000003E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000040   0xF5B5 0x6F00      CMP      R5,#+2048
   \   00000044   0xD104             BNE.N    ??I2C_PECPositionConfig_2
    770            {
    771              /* Next byte in shift register is PEC */
    772              I2Cx->CR1 |= I2C_PECPosition_Next;
   \   00000046   0x8820             LDRH     R0,[R4, #+0]
   \   00000048   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   0000004C   0x8020             STRH     R0,[R4, #+0]
   \   0000004E   0xE004             B.N      ??I2C_PECPositionConfig_3
    773            }
    774            else
    775            {
    776              /* Current byte in shift register is PEC */
    777              I2Cx->CR1 &= I2C_PECPosition_Current;
   \                     ??I2C_PECPositionConfig_2: (+1)
   \   00000050   0x8820             LDRH     R0,[R4, #+0]
   \   00000052   0xF24F 0x71FF      MOVW     R1,#+63487
   \   00000056   0x4008             ANDS     R0,R1,R0
   \   00000058   0x8020             STRH     R0,[R4, #+0]
    778            }
    779          }
   \                     ??I2C_PECPositionConfig_3: (+1)
   \   0000005A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    780          
    781          /**
    782            * @brief  Enables or disables the PEC value calculation of the transferred bytes.
    783            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
    784            * @param  NewState: new state of the I2Cx PEC value calculation.
    785            *          This parameter can be: ENABLE or DISABLE.
    786            * @retval None
    787            */

   \                                 In section .text, align 2, keep-with-next
    788          void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
    789          {
   \                     I2C_CalculatePEC: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    790            /* Check the parameters */
    791            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   00000006   0x....             LDR.N    R0,??DataTable24  ;; 0x40005400
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD00A             BEQ.N    ??I2C_CalculatePEC_0
   \   0000000C   0x....             LDR.N    R0,??DataTable24_1  ;; 0x40005800
   \   0000000E   0x4284             CMP      R4,R0
   \   00000010   0xD007             BEQ.N    ??I2C_CalculatePEC_0
   \   00000012   0x....             LDR.N    R0,??DataTable25  ;; 0x40005c00
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD004             BEQ.N    ??I2C_CalculatePEC_0
   \   00000018   0xF240 0x3117      MOVW     R1,#+791
   \   0000001C   0x....             LDR.N    R0,??DataTable24_2
   \   0000001E   0x.... 0x....      BL       assert_failed
    792            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \                     ??I2C_CalculatePEC_0: (+1)
   \   00000022   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000024   0x2D00             CMP      R5,#+0
   \   00000026   0xD007             BEQ.N    ??I2C_CalculatePEC_1
   \   00000028   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002A   0x2D01             CMP      R5,#+1
   \   0000002C   0xD004             BEQ.N    ??I2C_CalculatePEC_1
   \   0000002E   0xF44F 0x7146      MOV      R1,#+792
   \   00000032   0x....             LDR.N    R0,??DataTable24_2
   \   00000034   0x.... 0x....      BL       assert_failed
    793            if (NewState != DISABLE)
   \                     ??I2C_CalculatePEC_1: (+1)
   \   00000038   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003A   0x2D00             CMP      R5,#+0
   \   0000003C   0xD004             BEQ.N    ??I2C_CalculatePEC_2
    794            {
    795              /* Enable the selected I2C PEC calculation */
    796              I2Cx->CR1 |= I2C_CR1_ENPEC;
   \   0000003E   0x8820             LDRH     R0,[R4, #+0]
   \   00000040   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   00000044   0x8020             STRH     R0,[R4, #+0]
   \   00000046   0xE004             B.N      ??I2C_CalculatePEC_3
    797            }
    798            else
    799            {
    800              /* Disable the selected I2C PEC calculation */
    801              I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
   \                     ??I2C_CalculatePEC_2: (+1)
   \   00000048   0x8820             LDRH     R0,[R4, #+0]
   \   0000004A   0xF64F 0x71DF      MOVW     R1,#+65503
   \   0000004E   0x4008             ANDS     R0,R1,R0
   \   00000050   0x8020             STRH     R0,[R4, #+0]
    802            }
    803          }
   \                     ??I2C_CalculatePEC_3: (+1)
   \   00000052   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    804          
    805          /**
    806            * @brief  Returns the PEC value for the specified I2C.
    807            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
    808            * @retval The PEC value.
    809            */

   \                                 In section .text, align 2, keep-with-next
    810          uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
    811          {
   \                     I2C_GetPEC: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    812            /* Check the parameters */
    813            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   00000004   0x....             LDR.N    R0,??DataTable24  ;; 0x40005400
   \   00000006   0x4284             CMP      R4,R0
   \   00000008   0xD00A             BEQ.N    ??I2C_GetPEC_0
   \   0000000A   0x....             LDR.N    R0,??DataTable24_1  ;; 0x40005800
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD007             BEQ.N    ??I2C_GetPEC_0
   \   00000010   0x....             LDR.N    R0,??DataTable25  ;; 0x40005c00
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD004             BEQ.N    ??I2C_GetPEC_0
   \   00000016   0xF240 0x312D      MOVW     R1,#+813
   \   0000001A   0x....             LDR.N    R0,??DataTable24_2
   \   0000001C   0x.... 0x....      BL       assert_failed
    814            /* Return the selected I2C PEC value */
    815            return ((I2Cx->SR2) >> 8);
   \                     ??I2C_GetPEC_0: (+1)
   \   00000020   0x8B20             LDRH     R0,[R4, #+24]
   \   00000022   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000024   0x0A00             LSRS     R0,R0,#+8
   \   00000026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000028   0xBD10             POP      {R4,PC}          ;; return
    816          }
    817          
    818          /**
    819            * @}
    820            */
    821          
    822          /** @defgroup I2C_Group4 DMA transfers management functions
    823           *  @brief   DMA transfers management functions 
    824           *
    825          @verbatim   
    826           ===============================================================================
    827                                   DMA transfers management functions
    828           ===============================================================================  
    829            This section provides functions allowing to configure the I2C DMA channels 
    830            requests.
    831            
    832          @endverbatim
    833            * @{
    834            */
    835          
    836          /**
    837            * @brief  Enables or disables the specified I2C DMA requests.
    838            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
    839            * @param  NewState: new state of the I2C DMA transfer.
    840            *          This parameter can be: ENABLE or DISABLE.
    841            * @retval None
    842            */

   \                                 In section .text, align 2, keep-with-next
    843          void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
    844          {
   \                     I2C_DMACmd: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    845            /* Check the parameters */
    846            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   00000006   0x....             LDR.N    R0,??DataTable24  ;; 0x40005400
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD00A             BEQ.N    ??I2C_DMACmd_0
   \   0000000C   0x....             LDR.N    R0,??DataTable24_1  ;; 0x40005800
   \   0000000E   0x4284             CMP      R4,R0
   \   00000010   0xD007             BEQ.N    ??I2C_DMACmd_0
   \   00000012   0x....             LDR.N    R0,??DataTable25  ;; 0x40005c00
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD004             BEQ.N    ??I2C_DMACmd_0
   \   00000018   0xF240 0x314E      MOVW     R1,#+846
   \   0000001C   0x....             LDR.N    R0,??DataTable24_2
   \   0000001E   0x.... 0x....      BL       assert_failed
    847            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \                     ??I2C_DMACmd_0: (+1)
   \   00000022   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000024   0x2D00             CMP      R5,#+0
   \   00000026   0xD007             BEQ.N    ??I2C_DMACmd_1
   \   00000028   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002A   0x2D01             CMP      R5,#+1
   \   0000002C   0xD004             BEQ.N    ??I2C_DMACmd_1
   \   0000002E   0xF240 0x314F      MOVW     R1,#+847
   \   00000032   0x....             LDR.N    R0,??DataTable24_2
   \   00000034   0x.... 0x....      BL       assert_failed
    848            if (NewState != DISABLE)
   \                     ??I2C_DMACmd_1: (+1)
   \   00000038   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003A   0x2D00             CMP      R5,#+0
   \   0000003C   0xD004             BEQ.N    ??I2C_DMACmd_2
    849            {
    850              /* Enable the selected I2C DMA requests */
    851              I2Cx->CR2 |= I2C_CR2_DMAEN;
   \   0000003E   0x88A0             LDRH     R0,[R4, #+4]
   \   00000040   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   00000044   0x80A0             STRH     R0,[R4, #+4]
   \   00000046   0xE004             B.N      ??I2C_DMACmd_3
    852            }
    853            else
    854            {
    855              /* Disable the selected I2C DMA requests */
    856              I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
   \                     ??I2C_DMACmd_2: (+1)
   \   00000048   0x88A0             LDRH     R0,[R4, #+4]
   \   0000004A   0xF24F 0x71FF      MOVW     R1,#+63487
   \   0000004E   0x4008             ANDS     R0,R1,R0
   \   00000050   0x80A0             STRH     R0,[R4, #+4]
    857            }
    858          }
   \                     ??I2C_DMACmd_3: (+1)
   \   00000052   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    859          
    860          /**
    861            * @brief  Specifies that the next DMA transfer is the last one.
    862            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
    863            * @param  NewState: new state of the I2C DMA last transfer.
    864            *          This parameter can be: ENABLE or DISABLE.
    865            * @retval None
    866            */

   \                                 In section .text, align 2, keep-with-next
    867          void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
    868          {
   \                     I2C_DMALastTransferCmd: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    869            /* Check the parameters */
    870            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   00000006   0x....             LDR.N    R0,??DataTable24  ;; 0x40005400
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD00A             BEQ.N    ??I2C_DMALastTransferCmd_0
   \   0000000C   0x....             LDR.N    R0,??DataTable24_1  ;; 0x40005800
   \   0000000E   0x4284             CMP      R4,R0
   \   00000010   0xD007             BEQ.N    ??I2C_DMALastTransferCmd_0
   \   00000012   0x....             LDR.N    R0,??DataTable25  ;; 0x40005c00
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD004             BEQ.N    ??I2C_DMALastTransferCmd_0
   \   00000018   0xF240 0x3166      MOVW     R1,#+870
   \   0000001C   0x....             LDR.N    R0,??DataTable24_2
   \   0000001E   0x.... 0x....      BL       assert_failed
    871            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \                     ??I2C_DMALastTransferCmd_0: (+1)
   \   00000022   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000024   0x2D00             CMP      R5,#+0
   \   00000026   0xD007             BEQ.N    ??I2C_DMALastTransferCmd_1
   \   00000028   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002A   0x2D01             CMP      R5,#+1
   \   0000002C   0xD004             BEQ.N    ??I2C_DMALastTransferCmd_1
   \   0000002E   0xF240 0x3167      MOVW     R1,#+871
   \   00000032   0x....             LDR.N    R0,??DataTable24_2
   \   00000034   0x.... 0x....      BL       assert_failed
    872            if (NewState != DISABLE)
   \                     ??I2C_DMALastTransferCmd_1: (+1)
   \   00000038   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003A   0x2D00             CMP      R5,#+0
   \   0000003C   0xD004             BEQ.N    ??I2C_DMALastTransferCmd_2
    873            {
    874              /* Next DMA transfer is the last transfer */
    875              I2Cx->CR2 |= I2C_CR2_LAST;
   \   0000003E   0x88A0             LDRH     R0,[R4, #+4]
   \   00000040   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   00000044   0x80A0             STRH     R0,[R4, #+4]
   \   00000046   0xE004             B.N      ??I2C_DMALastTransferCmd_3
    876            }
    877            else
    878            {
    879              /* Next DMA transfer is not the last transfer */
    880              I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
   \                     ??I2C_DMALastTransferCmd_2: (+1)
   \   00000048   0x88A0             LDRH     R0,[R4, #+4]
   \   0000004A   0xF64E 0x71FF      MOVW     R1,#+61439
   \   0000004E   0x4008             ANDS     R0,R1,R0
   \   00000050   0x80A0             STRH     R0,[R4, #+4]
    881            }
    882          }
   \                     ??I2C_DMALastTransferCmd_3: (+1)
   \   00000052   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    883          
    884          /**
    885            * @}
    886            */
    887          
    888          /** @defgroup I2C_Group5 Interrupts events and flags management functions
    889           *  @brief   Interrupts, events and flags management functions
    890           *
    891          @verbatim   
    892           ===============================================================================
    893                          Interrupts, events and flags management functions
    894           ===============================================================================  
    895            This section provides functions allowing to configure the I2C Interrupts 
    896            sources and check or clear the flags or pending bits status.
    897            The user should identify which mode will be used in his application to manage 
    898            the communication: Polling mode, Interrupt mode or DMA mode. 
    899          
    900           ===============================================================================
    901                                    I2C State Monitoring Functions                    
    902           ===============================================================================   
    903            This I2C driver provides three different ways for I2C state monitoring
    904            depending on the application requirements and constraints:
    905                   
    906             
    907               1. Basic state monitoring (Using I2C_CheckEvent() function)
    908               -----------------------------------------------------------
    909                  It compares the status registers (SR1 and SR2) content to a given event
    910                  (can be the combination of one or more flags).
    911                  It returns SUCCESS if the current status includes the given flags 
    912                  and returns ERROR if one or more flags are missing in the current status.
    913          
    914                    - When to use
    915                       - This function is suitable for most applications as well as for startup 
    916                         activity since the events are fully described in the product reference 
    917                         manual (RM0090).
    918                       - It is also suitable for users who need to define their own events.
    919          
    920                    - Limitations
    921                       - If an error occurs (ie. error flags are set besides to the monitored 
    922                         flags), the I2C_CheckEvent() function may return SUCCESS despite 
    923                         the communication hold or corrupted real state. 
    924                         In this case, it is advised to use error interrupts to monitor 
    925                         the error events and handle them in the interrupt IRQ handler.
    926                   
    927               @note 
    928                   For error management, it is advised to use the following functions:
    929                     - I2C_ITConfig() to configure and enable the error interrupts (I2C_IT_ERR).
    930                     - I2Cx_ER_IRQHandler() which is called when the error interrupt occurs.
    931                       Where x is the peripheral instance (I2C1, I2C2 ...)
    932                     - I2C_GetFlagStatus() or I2C_GetITStatus()  to be called into the 
    933                       I2Cx_ER_IRQHandler() function in order to determine which error occurred.
    934                     - I2C_ClearFlag() or I2C_ClearITPendingBit() and/or I2C_SoftwareResetCmd() 
    935                       and/or I2C_GenerateStop() in order to clear the error flag and source 
    936                       and return to correct  communication status.
    937                       
    938           
    939               2. Advanced state monitoring (Using the function I2C_GetLastEvent())
    940               -------------------------------------------------------------------- 
    941                  Using the function I2C_GetLastEvent() which returns the image of both status 
    942                  registers in a single word (uint32_t) (Status Register 2 value is shifted left 
    943                  by 16 bits and concatenated to Status Register 1).
    944          
    945                    - When to use
    946                       - This function is suitable for the same applications above but it 
    947                         allows to overcome the mentioned limitation of I2C_GetFlagStatus() 
    948                         function.
    949                       - The returned value could be compared to events already defined in 
    950                         the library (stm32f4xx_i2c.h) or to custom values defined by user.
    951                         This function is suitable when multiple flags are monitored at the 
    952                         same time.
    953                       - At the opposite of I2C_CheckEvent() function, this function allows 
    954                         user to choose when an event is accepted (when all events flags are 
    955                         set and no other flags are set or just when the needed flags are set 
    956                         like I2C_CheckEvent() function.
    957          
    958                    - Limitations
    959                       - User may need to define his own events.
    960                       - Same remark concerning the error management is applicable for this 
    961                         function if user decides to check only regular communication flags 
    962                         (and ignores error flags).
    963                
    964           
    965               3. Flag-based state monitoring (Using the function I2C_GetFlagStatus())
    966               -----------------------------------------------------------------------
    967               
    968                Using the function I2C_GetFlagStatus() which simply returns the status of 
    969                one single flag (ie. I2C_FLAG_RXNE ...). 
    970          
    971                    - When to use
    972                       - This function could be used for specific applications or in debug 
    973                         phase.
    974                       - It is suitable when only one flag checking is needed (most I2C 
    975                         events are monitored through multiple flags).
    976                    - Limitations: 
    977                       - When calling this function, the Status register is accessed. 
    978                         Some flags are cleared when the status register is accessed. 
    979                         So checking the status of one Flag, may clear other ones.
    980                       - Function may need to be called twice or more in order to monitor 
    981                         one single event.
    982           
    983             For detailed description of Events, please refer to section I2C_Events in 
    984             stm32f4xx_i2c.h file.
    985                 
    986          @endverbatim
    987            * @{
    988            */
    989             
    990          /**
    991            * @brief  Reads the specified I2C register and returns its value.
    992            * @param  I2C_Register: specifies the register to read.
    993            *          This parameter can be one of the following values:
    994            *            @arg I2C_Register_CR1:  CR1 register.
    995            *            @arg I2C_Register_CR2:   CR2 register.
    996            *            @arg I2C_Register_OAR1:  OAR1 register.
    997            *            @arg I2C_Register_OAR2:  OAR2 register.
    998            *            @arg I2C_Register_DR:    DR register.
    999            *            @arg I2C_Register_SR1:   SR1 register.
   1000            *            @arg I2C_Register_SR2:   SR2 register.
   1001            *            @arg I2C_Register_CCR:   CCR register.
   1002            *            @arg I2C_Register_TRISE: TRISE register.
   1003            * @retval The value of the read register.
   1004            */

   \                                 In section .text, align 2, keep-with-next
   1005          uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
   1006          {
   \                     I2C_ReadRegister: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1007            __IO uint32_t tmp = 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9000             STR      R0,[SP, #+0]
   1008          
   1009            /* Check the parameters */
   1010            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   0000000A   0x....             LDR.N    R0,??DataTable24  ;; 0x40005400
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD00A             BEQ.N    ??I2C_ReadRegister_0
   \   00000010   0x....             LDR.N    R0,??DataTable24_1  ;; 0x40005800
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD007             BEQ.N    ??I2C_ReadRegister_0
   \   00000016   0x....             LDR.N    R0,??DataTable25  ;; 0x40005c00
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD004             BEQ.N    ??I2C_ReadRegister_0
   \   0000001C   0xF240 0x31F2      MOVW     R1,#+1010
   \   00000020   0x....             LDR.N    R0,??DataTable24_2
   \   00000022   0x.... 0x....      BL       assert_failed
   1011            assert_param(IS_I2C_REGISTER(I2C_Register));
   \                     ??I2C_ReadRegister_0: (+1)
   \   00000026   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000028   0x2D00             CMP      R5,#+0
   \   0000002A   0xD01C             BEQ.N    ??I2C_ReadRegister_1
   \   0000002C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002E   0x2D04             CMP      R5,#+4
   \   00000030   0xD019             BEQ.N    ??I2C_ReadRegister_1
   \   00000032   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000034   0x2D08             CMP      R5,#+8
   \   00000036   0xD016             BEQ.N    ??I2C_ReadRegister_1
   \   00000038   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003A   0x2D0C             CMP      R5,#+12
   \   0000003C   0xD013             BEQ.N    ??I2C_ReadRegister_1
   \   0000003E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000040   0x2D10             CMP      R5,#+16
   \   00000042   0xD010             BEQ.N    ??I2C_ReadRegister_1
   \   00000044   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000046   0x2D14             CMP      R5,#+20
   \   00000048   0xD00D             BEQ.N    ??I2C_ReadRegister_1
   \   0000004A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004C   0x2D18             CMP      R5,#+24
   \   0000004E   0xD00A             BEQ.N    ??I2C_ReadRegister_1
   \   00000050   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000052   0x2D1C             CMP      R5,#+28
   \   00000054   0xD007             BEQ.N    ??I2C_ReadRegister_1
   \   00000056   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000058   0x2D20             CMP      R5,#+32
   \   0000005A   0xD004             BEQ.N    ??I2C_ReadRegister_1
   \   0000005C   0xF240 0x31F3      MOVW     R1,#+1011
   \   00000060   0x....             LDR.N    R0,??DataTable24_2
   \   00000062   0x.... 0x....      BL       assert_failed
   1012          
   1013            tmp = (uint32_t) I2Cx;
   \                     ??I2C_ReadRegister_1: (+1)
   \   00000066   0x9400             STR      R4,[SP, #+0]
   1014            tmp += I2C_Register;
   \   00000068   0x9800             LDR      R0,[SP, #+0]
   \   0000006A   0xFA50 0xF085      UXTAB    R0,R0,R5
   \   0000006E   0x9000             STR      R0,[SP, #+0]
   1015          
   1016            /* Return the selected register value */
   1017            return (*(__IO uint16_t *) tmp);
   \   00000070   0x9800             LDR      R0,[SP, #+0]
   \   00000072   0x8800             LDRH     R0,[R0, #+0]
   \   00000074   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   1018          }
   1019          
   1020          /**
   1021            * @brief  Enables or disables the specified I2C interrupts.
   1022            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
   1023            * @param  I2C_IT: specifies the I2C interrupts sources to be enabled or disabled. 
   1024            *          This parameter can be any combination of the following values:
   1025            *            @arg I2C_IT_BUF: Buffer interrupt mask
   1026            *            @arg I2C_IT_EVT: Event interrupt mask
   1027            *            @arg I2C_IT_ERR: Error interrupt mask
   1028            * @param  NewState: new state of the specified I2C interrupts.
   1029            *          This parameter can be: ENABLE or DISABLE.
   1030            * @retval None
   1031            */

   \                                 In section .text, align 2, keep-with-next
   1032          void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
   1033          {
   \                     I2C_ITConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   1034            /* Check the parameters */
   1035            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable31  ;; 0x40005400
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD00C             BEQ.N    ??I2C_ITConfig_0
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable31_1  ;; 0x40005800
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD008             BEQ.N    ??I2C_ITConfig_0
   \   00000018   0x....             LDR.N    R0,??DataTable25  ;; 0x40005c00
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD005             BEQ.N    ??I2C_ITConfig_0
   \   0000001E   0xF240 0x410B      MOVW     R1,#+1035
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable31_2
   \   00000026   0x.... 0x....      BL       assert_failed
   1036            assert_param(IS_FUNCTIONAL_STATE(NewState));
   \                     ??I2C_ITConfig_0: (+1)
   \   0000002A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000002C   0x2E00             CMP      R6,#+0
   \   0000002E   0xD008             BEQ.N    ??I2C_ITConfig_1
   \   00000030   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000032   0x2E01             CMP      R6,#+1
   \   00000034   0xD005             BEQ.N    ??I2C_ITConfig_1
   \   00000036   0xF240 0x410C      MOVW     R1,#+1036
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable31_2
   \   0000003E   0x.... 0x....      BL       assert_failed
   1037            assert_param(IS_I2C_CONFIG_IT(I2C_IT));
   \                     ??I2C_ITConfig_1: (+1)
   \   00000042   0xF64F 0x00FF      MOVW     R0,#+63743
   \   00000046   0x4205             TST      R5,R0
   \   00000048   0xD102             BNE.N    ??I2C_ITConfig_2
   \   0000004A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004C   0x2D00             CMP      R5,#+0
   \   0000004E   0xD105             BNE.N    ??I2C_ITConfig_3
   \                     ??I2C_ITConfig_2: (+1)
   \   00000050   0xF240 0x410D      MOVW     R1,#+1037
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable31_2
   \   00000058   0x.... 0x....      BL       assert_failed
   1038            
   1039            if (NewState != DISABLE)
   \                     ??I2C_ITConfig_3: (+1)
   \   0000005C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000005E   0x2E00             CMP      R6,#+0
   \   00000060   0xD003             BEQ.N    ??I2C_ITConfig_4
   1040            {
   1041              /* Enable the selected I2C interrupts */
   1042              I2Cx->CR2 |= I2C_IT;
   \   00000062   0x88A0             LDRH     R0,[R4, #+4]
   \   00000064   0x4328             ORRS     R0,R5,R0
   \   00000066   0x80A0             STRH     R0,[R4, #+4]
   \   00000068   0xE002             B.N      ??I2C_ITConfig_5
   1043            }
   1044            else
   1045            {
   1046              /* Disable the selected I2C interrupts */
   1047              I2Cx->CR2 &= (uint16_t)~I2C_IT;
   \                     ??I2C_ITConfig_4: (+1)
   \   0000006A   0x88A0             LDRH     R0,[R4, #+4]
   \   0000006C   0x43A8             BICS     R0,R0,R5
   \   0000006E   0x80A0             STRH     R0,[R4, #+4]
   1048            }
   1049          }
   \                     ??I2C_ITConfig_5: (+1)
   \   00000070   0xBD70             POP      {R4-R6,PC}       ;; return
   1050          
   1051          /*
   1052           ===============================================================================
   1053                                    1. Basic state monitoring                    
   1054           ===============================================================================  
   1055           */
   1056          
   1057          /**
   1058            * @brief  Checks whether the last I2Cx Event is equal to the one passed
   1059            *         as parameter.
   1060            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
   1061            * @param  I2C_EVENT: specifies the event to be checked. 
   1062            *          This parameter can be one of the following values:
   1063            *            @arg I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED: EV1
   1064            *            @arg I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED: EV1
   1065            *            @arg I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED: EV1
   1066            *            @arg I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED: EV1
   1067            *            @arg I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED: EV1
   1068            *            @arg I2C_EVENT_SLAVE_BYTE_RECEIVED: EV2
   1069            *            @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_DUALF): EV2
   1070            *            @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_GENCALL): EV2
   1071            *            @arg I2C_EVENT_SLAVE_BYTE_TRANSMITTED: EV3
   1072            *            @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_DUALF): EV3
   1073            *            @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_GENCALL): EV3
   1074            *            @arg I2C_EVENT_SLAVE_ACK_FAILURE: EV3_2
   1075            *            @arg I2C_EVENT_SLAVE_STOP_DETECTED: EV4
   1076            *            @arg I2C_EVENT_MASTER_MODE_SELECT: EV5
   1077            *            @arg I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED: EV6     
   1078            *            @arg I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED: EV6
   1079            *            @arg I2C_EVENT_MASTER_BYTE_RECEIVED: EV7
   1080            *            @arg I2C_EVENT_MASTER_BYTE_TRANSMITTING: EV8
   1081            *            @arg I2C_EVENT_MASTER_BYTE_TRANSMITTED: EV8_2
   1082            *            @arg I2C_EVENT_MASTER_MODE_ADDRESS10: EV9
   1083            *     
   1084            * @note   For detailed description of Events, please refer to section I2C_Events
   1085            *         in stm32f4xx_i2c.h file.
   1086            *    
   1087            * @retval An ErrorStatus enumeration value:
   1088            *           - SUCCESS: Last event is equal to the I2C_EVENT
   1089            *           - ERROR: Last event is different from the I2C_EVENT
   1090            */

   \                                 In section .text, align 2, keep-with-next
   1091          ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
   1092          {
   \                     I2C_CheckEvent: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   1093            uint32_t lastevent = 0;
   \   00000008   0x2600             MOVS     R6,#+0
   1094            uint32_t flag1 = 0, flag2 = 0;
   \   0000000A   0x2700             MOVS     R7,#+0
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
   1095            ErrorStatus status = ERROR;
   \   00000010   0xF05F 0x0900      MOVS     R9,#+0
   1096          
   1097            /* Check the parameters */
   1098            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable31  ;; 0x40005400
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD00D             BEQ.N    ??I2C_CheckEvent_0
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable31_1  ;; 0x40005800
   \   00000020   0x4284             CMP      R4,R0
   \   00000022   0xD009             BEQ.N    ??I2C_CheckEvent_0
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable31_3  ;; 0x40005c00
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xD005             BEQ.N    ??I2C_CheckEvent_0
   \   0000002C   0xF240 0x414A      MOVW     R1,#+1098
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable31_2
   \   00000034   0x.... 0x....      BL       assert_failed
   1099            assert_param(IS_I2C_EVENT(I2C_EVENT));
   \                     ??I2C_CheckEvent_0: (+1)
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable31_4  ;; 0x60082
   \   0000003C   0x4285             CMP      R5,R0
   \   0000003E   0xD049             BEQ.N    ??I2C_CheckEvent_1
   \   00000040   0xF1B5 0x1F02      CMP      R5,#+131074
   \   00000044   0xD046             BEQ.N    ??I2C_CheckEvent_1
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable31_5  ;; 0x860080
   \   0000004A   0x4285             CMP      R5,R0
   \   0000004C   0xD042             BEQ.N    ??I2C_CheckEvent_1
   \   0000004E   0xF5B5 0x0F02      CMP      R5,#+8519680
   \   00000052   0xD03F             BEQ.N    ??I2C_CheckEvent_1
   \   00000054   0xF5B5 0x1F90      CMP      R5,#+1179648
   \   00000058   0xD03C             BEQ.N    ??I2C_CheckEvent_1
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable31_6  ;; 0x20040
   \   0000005E   0x4285             CMP      R5,R0
   \   00000060   0xD038             BEQ.N    ??I2C_CheckEvent_1
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable31_7  ;; 0x820040
   \   00000066   0x4285             CMP      R5,R0
   \   00000068   0xD034             BEQ.N    ??I2C_CheckEvent_1
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable31_8  ;; 0x120040
   \   0000006E   0x4285             CMP      R5,R0
   \   00000070   0xD030             BEQ.N    ??I2C_CheckEvent_1
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable31_9  ;; 0x60084
   \   00000076   0x4285             CMP      R5,R0
   \   00000078   0xD02C             BEQ.N    ??I2C_CheckEvent_1
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable31_10  ;; 0x860084
   \   0000007E   0x4285             CMP      R5,R0
   \   00000080   0xD028             BEQ.N    ??I2C_CheckEvent_1
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable31_11  ;; 0x160084
   \   00000086   0x4285             CMP      R5,R0
   \   00000088   0xD024             BEQ.N    ??I2C_CheckEvent_1
   \   0000008A   0x2D10             CMP      R5,#+16
   \   0000008C   0xD022             BEQ.N    ??I2C_CheckEvent_1
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable31_12  ;; 0x30001
   \   00000092   0x4285             CMP      R5,R0
   \   00000094   0xD01E             BEQ.N    ??I2C_CheckEvent_1
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable31_13  ;; 0x70082
   \   0000009A   0x4285             CMP      R5,R0
   \   0000009C   0xD01A             BEQ.N    ??I2C_CheckEvent_1
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable31_14  ;; 0x30002
   \   000000A2   0x4285             CMP      R5,R0
   \   000000A4   0xD016             BEQ.N    ??I2C_CheckEvent_1
   \   000000A6   0x.... 0x....      LDR.W    R0,??DataTable31_15  ;; 0x30040
   \   000000AA   0x4285             CMP      R5,R0
   \   000000AC   0xD012             BEQ.N    ??I2C_CheckEvent_1
   \   000000AE   0x.... 0x....      LDR.W    R0,??DataTable31_16  ;; 0x70084
   \   000000B2   0x4285             CMP      R5,R0
   \   000000B4   0xD00E             BEQ.N    ??I2C_CheckEvent_1
   \   000000B6   0x.... 0x....      LDR.W    R0,??DataTable31_17  ;; 0x70080
   \   000000BA   0x4285             CMP      R5,R0
   \   000000BC   0xD00A             BEQ.N    ??I2C_CheckEvent_1
   \   000000BE   0x....             LDR.N    R0,??DataTable31_18  ;; 0x30008
   \   000000C0   0x4285             CMP      R5,R0
   \   000000C2   0xD007             BEQ.N    ??I2C_CheckEvent_1
   \   000000C4   0xF5B5 0x6F80      CMP      R5,#+1024
   \   000000C8   0xD004             BEQ.N    ??I2C_CheckEvent_1
   \   000000CA   0xF240 0x414B      MOVW     R1,#+1099
   \   000000CE   0x....             LDR.N    R0,??DataTable31_2
   \   000000D0   0x.... 0x....      BL       assert_failed
   1100          
   1101            /* Read the I2Cx status register */
   1102            flag1 = I2Cx->SR1;
   \                     ??I2C_CheckEvent_1: (+1)
   \   000000D4   0x8AA0             LDRH     R0,[R4, #+20]
   \   000000D6   0x0007             MOVS     R7,R0
   1103            flag2 = I2Cx->SR2;
   \   000000D8   0x8B20             LDRH     R0,[R4, #+24]
   \   000000DA   0x4680             MOV      R8,R0
   1104            flag2 = flag2 << 16;
   \   000000DC   0xEA5F 0x4808      LSLS     R8,R8,#+16
   1105          
   1106            /* Get the last event value from I2C status register */
   1107            lastevent = (flag1 | flag2) & FLAG_MASK;
   \   000000E0   0xEA58 0x0007      ORRS     R0,R8,R7
   \   000000E4   0x0200             LSLS     R0,R0,#+8        ;; ZeroExtS R0,R0,#+8,#+8
   \   000000E6   0x0A00             LSRS     R0,R0,#+8
   \   000000E8   0x0006             MOVS     R6,R0
   1108          
   1109            /* Check whether the last event contains the I2C_EVENT */
   1110            if ((lastevent & I2C_EVENT) == I2C_EVENT)
   \   000000EA   0xEA15 0x0006      ANDS     R0,R5,R6
   \   000000EE   0x42A8             CMP      R0,R5
   \   000000F0   0xD102             BNE.N    ??I2C_CheckEvent_2
   1111            {
   1112              /* SUCCESS: last event is equal to I2C_EVENT */
   1113              status = SUCCESS;
   \   000000F2   0x2001             MOVS     R0,#+1
   \   000000F4   0x4681             MOV      R9,R0
   \   000000F6   0xE001             B.N      ??I2C_CheckEvent_3
   1114            }
   1115            else
   1116            {
   1117              /* ERROR: last event is different from I2C_EVENT */
   1118              status = ERROR;
   \                     ??I2C_CheckEvent_2: (+1)
   \   000000F8   0x2000             MOVS     R0,#+0
   \   000000FA   0x4681             MOV      R9,R0
   1119            }
   1120            /* Return status */
   1121            return status;
   \                     ??I2C_CheckEvent_3: (+1)
   \   000000FC   0x4648             MOV      R0,R9
   \   000000FE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000100   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
   1122          }
   1123          
   1124          /*
   1125           ===============================================================================
   1126                                    2. Advanced state monitoring                   
   1127           ===============================================================================  
   1128           */
   1129          
   1130          /**
   1131            * @brief  Returns the last I2Cx Event.
   1132            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
   1133            *     
   1134            * @note   For detailed description of Events, please refer to section I2C_Events
   1135            *         in stm32f4xx_i2c.h file.
   1136            *    
   1137            * @retval The last event
   1138            */

   \                                 In section .text, align 2, keep-with-next
   1139          uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
   1140          {
   \                     I2C_GetLastEvent: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1141            uint32_t lastevent = 0;
   \   00000004   0x2500             MOVS     R5,#+0
   1142            uint32_t flag1 = 0, flag2 = 0;
   \   00000006   0x2600             MOVS     R6,#+0
   \   00000008   0x2700             MOVS     R7,#+0
   1143          
   1144            /* Check the parameters */
   1145            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   0000000A   0x....             LDR.N    R0,??DataTable31  ;; 0x40005400
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD00A             BEQ.N    ??I2C_GetLastEvent_0
   \   00000010   0x....             LDR.N    R0,??DataTable31_1  ;; 0x40005800
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD007             BEQ.N    ??I2C_GetLastEvent_0
   \   00000016   0x....             LDR.N    R0,??DataTable31_3  ;; 0x40005c00
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD004             BEQ.N    ??I2C_GetLastEvent_0
   \   0000001C   0xF240 0x4179      MOVW     R1,#+1145
   \   00000020   0x....             LDR.N    R0,??DataTable31_2
   \   00000022   0x.... 0x....      BL       assert_failed
   1146          
   1147            /* Read the I2Cx status register */
   1148            flag1 = I2Cx->SR1;
   \                     ??I2C_GetLastEvent_0: (+1)
   \   00000026   0x8AA0             LDRH     R0,[R4, #+20]
   \   00000028   0x0006             MOVS     R6,R0
   1149            flag2 = I2Cx->SR2;
   \   0000002A   0x8B20             LDRH     R0,[R4, #+24]
   \   0000002C   0x0007             MOVS     R7,R0
   1150            flag2 = flag2 << 16;
   \   0000002E   0x043F             LSLS     R7,R7,#+16
   1151          
   1152            /* Get the last event value from I2C status register */
   1153            lastevent = (flag1 | flag2) & FLAG_MASK;
   \   00000030   0xEA57 0x0006      ORRS     R0,R7,R6
   \   00000034   0x0200             LSLS     R0,R0,#+8        ;; ZeroExtS R0,R0,#+8,#+8
   \   00000036   0x0A00             LSRS     R0,R0,#+8
   \   00000038   0x0005             MOVS     R5,R0
   1154          
   1155            /* Return status */
   1156            return lastevent;
   \   0000003A   0x0028             MOVS     R0,R5
   \   0000003C   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   1157          }
   1158          
   1159          /*
   1160           ===============================================================================
   1161                                    3. Flag-based state monitoring                   
   1162           ===============================================================================  
   1163           */
   1164          
   1165          /**
   1166            * @brief  Checks whether the specified I2C flag is set or not.
   1167            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
   1168            * @param  I2C_FLAG: specifies the flag to check. 
   1169            *          This parameter can be one of the following values:
   1170            *            @arg I2C_FLAG_DUALF: Dual flag (Slave mode)
   1171            *            @arg I2C_FLAG_SMBHOST: SMBus host header (Slave mode)
   1172            *            @arg I2C_FLAG_SMBDEFAULT: SMBus default header (Slave mode)
   1173            *            @arg I2C_FLAG_GENCALL: General call header flag (Slave mode)
   1174            *            @arg I2C_FLAG_TRA: Transmitter/Receiver flag
   1175            *            @arg I2C_FLAG_BUSY: Bus busy flag
   1176            *            @arg I2C_FLAG_MSL: Master/Slave flag
   1177            *            @arg I2C_FLAG_SMBALERT: SMBus Alert flag
   1178            *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
   1179            *            @arg I2C_FLAG_PECERR: PEC error in reception flag
   1180            *            @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
   1181            *            @arg I2C_FLAG_AF: Acknowledge failure flag
   1182            *            @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
   1183            *            @arg I2C_FLAG_BERR: Bus error flag
   1184            *            @arg I2C_FLAG_TXE: Data register empty flag (Transmitter)
   1185            *            @arg I2C_FLAG_RXNE: Data register not empty (Receiver) flag
   1186            *            @arg I2C_FLAG_STOPF: Stop detection flag (Slave mode)
   1187            *            @arg I2C_FLAG_ADD10: 10-bit header sent flag (Master mode)
   1188            *            @arg I2C_FLAG_BTF: Byte transfer finished flag
   1189            *            @arg I2C_FLAG_ADDR: Address sent flag (Master mode) "ADSL"
   1190            *                                Address matched flag (Slave mode)"ENDAD"
   1191            *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
   1192            * @retval The new state of I2C_FLAG (SET or RESET).
   1193            */

   \                                 In section .text, align 2, keep-with-next
   1194          FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
   1195          {
   \                     I2C_GetFlagStatus: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1196            FlagStatus bitstatus = RESET;
   \   00000006   0x2600             MOVS     R6,#+0
   1197            __IO uint32_t i2creg = 0, i2cxbase = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x9001             STR      R0,[SP, #+4]
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x9000             STR      R0,[SP, #+0]
   1198          
   1199            /* Check the parameters */
   1200            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   00000010   0x....             LDR.N    R0,??DataTable31  ;; 0x40005400
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD00A             BEQ.N    ??I2C_GetFlagStatus_0
   \   00000016   0x....             LDR.N    R0,??DataTable31_1  ;; 0x40005800
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD007             BEQ.N    ??I2C_GetFlagStatus_0
   \   0000001C   0x....             LDR.N    R0,??DataTable31_3  ;; 0x40005c00
   \   0000001E   0x4284             CMP      R4,R0
   \   00000020   0xD004             BEQ.N    ??I2C_GetFlagStatus_0
   \   00000022   0xF44F 0x6196      MOV      R1,#+1200
   \   00000026   0x....             LDR.N    R0,??DataTable31_2
   \   00000028   0x.... 0x....      BL       assert_failed
   1201            assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
   \                     ??I2C_GetFlagStatus_0: (+1)
   \   0000002C   0xF5B5 0x0F00      CMP      R5,#+8388608
   \   00000030   0xD040             BEQ.N    ??I2C_GetFlagStatus_1
   \   00000032   0xF5B5 0x0F80      CMP      R5,#+4194304
   \   00000036   0xD03D             BEQ.N    ??I2C_GetFlagStatus_1
   \   00000038   0xF5B5 0x1F00      CMP      R5,#+2097152
   \   0000003C   0xD03A             BEQ.N    ??I2C_GetFlagStatus_1
   \   0000003E   0xF5B5 0x1F80      CMP      R5,#+1048576
   \   00000042   0xD037             BEQ.N    ??I2C_GetFlagStatus_1
   \   00000044   0xF5B5 0x2F80      CMP      R5,#+262144
   \   00000048   0xD034             BEQ.N    ??I2C_GetFlagStatus_1
   \   0000004A   0xF5B5 0x3F00      CMP      R5,#+131072
   \   0000004E   0xD031             BEQ.N    ??I2C_GetFlagStatus_1
   \   00000050   0xF5B5 0x3F80      CMP      R5,#+65536
   \   00000054   0xD02E             BEQ.N    ??I2C_GetFlagStatus_1
   \   00000056   0x....             LDR.N    R0,??DataTable31_19  ;; 0x10008000
   \   00000058   0x4285             CMP      R5,R0
   \   0000005A   0xD02B             BEQ.N    ??I2C_GetFlagStatus_1
   \   0000005C   0x....             LDR.N    R0,??DataTable31_20  ;; 0x10004000
   \   0000005E   0x4285             CMP      R5,R0
   \   00000060   0xD028             BEQ.N    ??I2C_GetFlagStatus_1
   \   00000062   0xF1B5 0x2F10      CMP      R5,#+268439552
   \   00000066   0xD025             BEQ.N    ??I2C_GetFlagStatus_1
   \   00000068   0x....             LDR.N    R0,??DataTable31_21  ;; 0x10000800
   \   0000006A   0x4285             CMP      R5,R0
   \   0000006C   0xD022             BEQ.N    ??I2C_GetFlagStatus_1
   \   0000006E   0x....             LDR.N    R0,??DataTable31_22  ;; 0x10000400
   \   00000070   0x4285             CMP      R5,R0
   \   00000072   0xD01F             BEQ.N    ??I2C_GetFlagStatus_1
   \   00000074   0x....             LDR.N    R0,??DataTable31_23  ;; 0x10000200
   \   00000076   0x4285             CMP      R5,R0
   \   00000078   0xD01C             BEQ.N    ??I2C_GetFlagStatus_1
   \   0000007A   0x....             LDR.N    R0,??DataTable31_24  ;; 0x10000100
   \   0000007C   0x4285             CMP      R5,R0
   \   0000007E   0xD019             BEQ.N    ??I2C_GetFlagStatus_1
   \   00000080   0x....             LDR.N    R0,??DataTable31_25  ;; 0x10000080
   \   00000082   0x4285             CMP      R5,R0
   \   00000084   0xD016             BEQ.N    ??I2C_GetFlagStatus_1
   \   00000086   0x....             LDR.N    R0,??DataTable31_26  ;; 0x10000040
   \   00000088   0x4285             CMP      R5,R0
   \   0000008A   0xD013             BEQ.N    ??I2C_GetFlagStatus_1
   \   0000008C   0x....             LDR.N    R0,??DataTable31_27  ;; 0x10000010
   \   0000008E   0x4285             CMP      R5,R0
   \   00000090   0xD010             BEQ.N    ??I2C_GetFlagStatus_1
   \   00000092   0x....             LDR.N    R0,??DataTable31_28  ;; 0x10000008
   \   00000094   0x4285             CMP      R5,R0
   \   00000096   0xD00D             BEQ.N    ??I2C_GetFlagStatus_1
   \   00000098   0x....             LDR.N    R0,??DataTable31_29  ;; 0x10000004
   \   0000009A   0x4285             CMP      R5,R0
   \   0000009C   0xD00A             BEQ.N    ??I2C_GetFlagStatus_1
   \   0000009E   0x....             LDR.N    R0,??DataTable31_30  ;; 0x10000002
   \   000000A0   0x4285             CMP      R5,R0
   \   000000A2   0xD007             BEQ.N    ??I2C_GetFlagStatus_1
   \   000000A4   0x....             LDR.N    R0,??DataTable31_31  ;; 0x10000001
   \   000000A6   0x4285             CMP      R5,R0
   \   000000A8   0xD004             BEQ.N    ??I2C_GetFlagStatus_1
   \   000000AA   0xF240 0x41B1      MOVW     R1,#+1201
   \   000000AE   0x....             LDR.N    R0,??DataTable31_2
   \   000000B0   0x.... 0x....      BL       assert_failed
   1202          
   1203            /* Get the I2Cx peripheral base address */
   1204            i2cxbase = (uint32_t)I2Cx;
   \                     ??I2C_GetFlagStatus_1: (+1)
   \   000000B4   0x9400             STR      R4,[SP, #+0]
   1205            
   1206            /* Read flag register index */
   1207            i2creg = I2C_FLAG >> 28;
   \   000000B6   0x0F28             LSRS     R0,R5,#+28
   \   000000B8   0x9001             STR      R0,[SP, #+4]
   1208            
   1209            /* Get bit[23:0] of the flag */
   1210            I2C_FLAG &= FLAG_MASK;
   \   000000BA   0x022D             LSLS     R5,R5,#+8        ;; ZeroExtS R5,R5,#+8,#+8
   \   000000BC   0x0A2D             LSRS     R5,R5,#+8
   1211            
   1212            if(i2creg != 0)
   \   000000BE   0x9801             LDR      R0,[SP, #+4]
   \   000000C0   0x2800             CMP      R0,#+0
   \   000000C2   0xD003             BEQ.N    ??I2C_GetFlagStatus_2
   1213            {
   1214              /* Get the I2Cx SR1 register address */
   1215              i2cxbase += 0x14;
   \   000000C4   0x9800             LDR      R0,[SP, #+0]
   \   000000C6   0x3014             ADDS     R0,R0,#+20
   \   000000C8   0x9000             STR      R0,[SP, #+0]
   \   000000CA   0xE003             B.N      ??I2C_GetFlagStatus_3
   1216            }
   1217            else
   1218            {
   1219              /* Flag in I2Cx SR2 Register */
   1220              I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
   \                     ??I2C_GetFlagStatus_2: (+1)
   \   000000CC   0x0C2D             LSRS     R5,R5,#+16
   1221              /* Get the I2Cx SR2 register address */
   1222              i2cxbase += 0x18;
   \   000000CE   0x9800             LDR      R0,[SP, #+0]
   \   000000D0   0x3018             ADDS     R0,R0,#+24
   \   000000D2   0x9000             STR      R0,[SP, #+0]
   1223            }
   1224            
   1225            if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
   \                     ??I2C_GetFlagStatus_3: (+1)
   \   000000D4   0x9800             LDR      R0,[SP, #+0]
   \   000000D6   0x6800             LDR      R0,[R0, #+0]
   \   000000D8   0x4228             TST      R0,R5
   \   000000DA   0xD002             BEQ.N    ??I2C_GetFlagStatus_4
   1226            {
   1227              /* I2C_FLAG is set */
   1228              bitstatus = SET;
   \   000000DC   0x2001             MOVS     R0,#+1
   \   000000DE   0x0006             MOVS     R6,R0
   \   000000E0   0xE001             B.N      ??I2C_GetFlagStatus_5
   1229            }
   1230            else
   1231            {
   1232              /* I2C_FLAG is reset */
   1233              bitstatus = RESET;
   \                     ??I2C_GetFlagStatus_4: (+1)
   \   000000E2   0x2000             MOVS     R0,#+0
   \   000000E4   0x0006             MOVS     R6,R0
   1234            }
   1235            
   1236            /* Return the I2C_FLAG status */
   1237            return  bitstatus;
   \                     ??I2C_GetFlagStatus_5: (+1)
   \   000000E6   0x0030             MOVS     R0,R6
   \   000000E8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000EA   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
   1238          }
   1239          
   1240          /**
   1241            * @brief  Clears the I2Cx's pending flags.
   1242            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
   1243            * @param  I2C_FLAG: specifies the flag to clear. 
   1244            *          This parameter can be any combination of the following values:
   1245            *            @arg I2C_FLAG_SMBALERT: SMBus Alert flag
   1246            *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
   1247            *            @arg I2C_FLAG_PECERR: PEC error in reception flag
   1248            *            @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
   1249            *            @arg I2C_FLAG_AF: Acknowledge failure flag
   1250            *            @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
   1251            *            @arg I2C_FLAG_BERR: Bus error flag
   1252            *   
   1253            * @note   STOPF (STOP detection) is cleared by software sequence: a read operation 
   1254            *          to I2C_SR1 register (I2C_GetFlagStatus()) followed by a write operation 
   1255            *          to I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
   1256            * @note   ADD10 (10-bit header sent) is cleared by software sequence: a read 
   1257            *          operation to I2C_SR1 (I2C_GetFlagStatus()) followed by writing the 
   1258            *          second byte of the address in DR register.
   1259            * @note   BTF (Byte Transfer Finished) is cleared by software sequence: a read 
   1260            *          operation to I2C_SR1 register (I2C_GetFlagStatus()) followed by a 
   1261            *          read/write to I2C_DR register (I2C_SendData()).
   1262            * @note   ADDR (Address sent) is cleared by software sequence: a read operation to 
   1263            *          I2C_SR1 register (I2C_GetFlagStatus()) followed by a read operation to 
   1264            *          I2C_SR2 register ((void)(I2Cx->SR2)).
   1265            * @note   SB (Start Bit) is cleared software sequence: a read operation to I2C_SR1
   1266            *          register (I2C_GetFlagStatus()) followed by a write operation to I2C_DR
   1267            *          register (I2C_SendData()).
   1268            *  
   1269            * @retval None
   1270            */

   \                                 In section .text, align 2, keep-with-next
   1271          void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
   1272          {
   \                     I2C_ClearFlag: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1273            uint32_t flagpos = 0;
   \   00000006   0x2600             MOVS     R6,#+0
   1274            /* Check the parameters */
   1275            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   00000008   0x....             LDR.N    R0,??DataTable31  ;; 0x40005400
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD00A             BEQ.N    ??I2C_ClearFlag_0
   \   0000000E   0x....             LDR.N    R0,??DataTable31_1  ;; 0x40005800
   \   00000010   0x4284             CMP      R4,R0
   \   00000012   0xD007             BEQ.N    ??I2C_ClearFlag_0
   \   00000014   0x....             LDR.N    R0,??DataTable31_3  ;; 0x40005c00
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xD004             BEQ.N    ??I2C_ClearFlag_0
   \   0000001A   0xF240 0x41FB      MOVW     R1,#+1275
   \   0000001E   0x....             LDR.N    R0,??DataTable31_2
   \   00000020   0x.... 0x....      BL       assert_failed
   1276            assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
   \                     ??I2C_ClearFlag_0: (+1)
   \   00000024   0xF242 0x00FF      MOVW     R0,#+8447
   \   00000028   0x4205             TST      R5,R0
   \   0000002A   0xD101             BNE.N    ??I2C_ClearFlag_1
   \   0000002C   0x2D00             CMP      R5,#+0
   \   0000002E   0xD104             BNE.N    ??I2C_ClearFlag_2
   \                     ??I2C_ClearFlag_1: (+1)
   \   00000030   0xF240 0x41FC      MOVW     R1,#+1276
   \   00000034   0x....             LDR.N    R0,??DataTable31_2
   \   00000036   0x.... 0x....      BL       assert_failed
   1277            /* Get the I2C flag position */
   1278            flagpos = I2C_FLAG & FLAG_MASK;
   \                     ??I2C_ClearFlag_2: (+1)
   \   0000003A   0x0228             LSLS     R0,R5,#+8        ;; ZeroExtS R0,R5,#+8,#+8
   \   0000003C   0x0A00             LSRS     R0,R0,#+8
   \   0000003E   0x0006             MOVS     R6,R0
   1279            /* Clear the selected I2C flag */
   1280            I2Cx->SR1 = (uint16_t)~flagpos;
   \   00000040   0x43F0             MVNS     R0,R6
   \   00000042   0x82A0             STRH     R0,[R4, #+20]
   1281          }
   \   00000044   0xBD70             POP      {R4-R6,PC}       ;; return
   1282          
   1283          /**
   1284            * @brief  Checks whether the specified I2C interrupt has occurred or not.
   1285            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
   1286            * @param  I2C_IT: specifies the interrupt source to check. 
   1287            *          This parameter can be one of the following values:
   1288            *            @arg I2C_IT_SMBALERT: SMBus Alert flag
   1289            *            @arg I2C_IT_TIMEOUT: Timeout or Tlow error flag
   1290            *            @arg I2C_IT_PECERR: PEC error in reception flag
   1291            *            @arg I2C_IT_OVR: Overrun/Underrun flag (Slave mode)
   1292            *            @arg I2C_IT_AF: Acknowledge failure flag
   1293            *            @arg I2C_IT_ARLO: Arbitration lost flag (Master mode)
   1294            *            @arg I2C_IT_BERR: Bus error flag
   1295            *            @arg I2C_IT_TXE: Data register empty flag (Transmitter)
   1296            *            @arg I2C_IT_RXNE: Data register not empty (Receiver) flag
   1297            *            @arg I2C_IT_STOPF: Stop detection flag (Slave mode)
   1298            *            @arg I2C_IT_ADD10: 10-bit header sent flag (Master mode)
   1299            *            @arg I2C_IT_BTF: Byte transfer finished flag
   1300            *            @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
   1301            *                              Address matched flag (Slave mode)"ENDAD"
   1302            *            @arg I2C_IT_SB: Start bit flag (Master mode)
   1303            * @retval The new state of I2C_IT (SET or RESET).
   1304            */

   \                                 In section .text, align 2, keep-with-next
   1305          ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
   1306          {
   \                     I2C_GetITStatus: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1307            ITStatus bitstatus = RESET;
   \   00000006   0x2600             MOVS     R6,#+0
   1308            uint32_t enablestatus = 0;
   \   00000008   0x2700             MOVS     R7,#+0
   1309          
   1310            /* Check the parameters */
   1311            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   0000000A   0x....             LDR.N    R0,??DataTable31  ;; 0x40005400
   \   0000000C   0x4284             CMP      R4,R0
   \   0000000E   0xD00A             BEQ.N    ??I2C_GetITStatus_0
   \   00000010   0x....             LDR.N    R0,??DataTable31_1  ;; 0x40005800
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD007             BEQ.N    ??I2C_GetITStatus_0
   \   00000016   0x....             LDR.N    R0,??DataTable31_3  ;; 0x40005c00
   \   00000018   0x4284             CMP      R4,R0
   \   0000001A   0xD004             BEQ.N    ??I2C_GetITStatus_0
   \   0000001C   0xF240 0x511F      MOVW     R1,#+1311
   \   00000020   0x....             LDR.N    R0,??DataTable31_2
   \   00000022   0x.... 0x....      BL       assert_failed
   1312            assert_param(IS_I2C_GET_IT(I2C_IT));
   \                     ??I2C_GetITStatus_0: (+1)
   \   00000026   0x....             LDR.N    R0,??DataTable31_32  ;; 0x1008000
   \   00000028   0x4285             CMP      R5,R0
   \   0000002A   0xD02B             BEQ.N    ??I2C_GetITStatus_1
   \   0000002C   0x....             LDR.N    R0,??DataTable31_33  ;; 0x1004000
   \   0000002E   0x4285             CMP      R5,R0
   \   00000030   0xD028             BEQ.N    ??I2C_GetITStatus_1
   \   00000032   0x....             LDR.N    R0,??DataTable31_34  ;; 0x1001000
   \   00000034   0x4285             CMP      R5,R0
   \   00000036   0xD025             BEQ.N    ??I2C_GetITStatus_1
   \   00000038   0x....             LDR.N    R0,??DataTable31_35  ;; 0x1000800
   \   0000003A   0x4285             CMP      R5,R0
   \   0000003C   0xD022             BEQ.N    ??I2C_GetITStatus_1
   \   0000003E   0x....             LDR.N    R0,??DataTable31_36  ;; 0x1000400
   \   00000040   0x4285             CMP      R5,R0
   \   00000042   0xD01F             BEQ.N    ??I2C_GetITStatus_1
   \   00000044   0x....             LDR.N    R0,??DataTable31_37  ;; 0x1000200
   \   00000046   0x4285             CMP      R5,R0
   \   00000048   0xD01C             BEQ.N    ??I2C_GetITStatus_1
   \   0000004A   0xF1B5 0x2F01      CMP      R5,#+16777472
   \   0000004E   0xD019             BEQ.N    ??I2C_GetITStatus_1
   \   00000050   0x....             LDR.N    R0,??DataTable31_38  ;; 0x6000080
   \   00000052   0x4285             CMP      R5,R0
   \   00000054   0xD016             BEQ.N    ??I2C_GetITStatus_1
   \   00000056   0x....             LDR.N    R0,??DataTable31_39  ;; 0x6000040
   \   00000058   0x4285             CMP      R5,R0
   \   0000005A   0xD013             BEQ.N    ??I2C_GetITStatus_1
   \   0000005C   0x....             LDR.N    R0,??DataTable31_40  ;; 0x2000010
   \   0000005E   0x4285             CMP      R5,R0
   \   00000060   0xD010             BEQ.N    ??I2C_GetITStatus_1
   \   00000062   0x....             LDR.N    R0,??DataTable31_41  ;; 0x2000008
   \   00000064   0x4285             CMP      R5,R0
   \   00000066   0xD00D             BEQ.N    ??I2C_GetITStatus_1
   \   00000068   0x....             LDR.N    R0,??DataTable31_42  ;; 0x2000004
   \   0000006A   0x4285             CMP      R5,R0
   \   0000006C   0xD00A             BEQ.N    ??I2C_GetITStatus_1
   \   0000006E   0x....             LDR.N    R0,??DataTable31_43  ;; 0x2000002
   \   00000070   0x4285             CMP      R5,R0
   \   00000072   0xD007             BEQ.N    ??I2C_GetITStatus_1
   \   00000074   0x....             LDR.N    R0,??DataTable31_44  ;; 0x2000001
   \   00000076   0x4285             CMP      R5,R0
   \   00000078   0xD004             BEQ.N    ??I2C_GetITStatus_1
   \   0000007A   0xF44F 0x61A4      MOV      R1,#+1312
   \   0000007E   0x....             LDR.N    R0,??DataTable31_2
   \   00000080   0x.... 0x....      BL       assert_failed
   1313          
   1314            /* Check if the interrupt source is enabled or not */
   1315            enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
   \                     ??I2C_GetITStatus_1: (+1)
   \   00000084   0x88A0             LDRH     R0,[R4, #+4]
   \   00000086   0xEA10 0x4015      ANDS     R0,R0,R5, LSR #+16
   \   0000008A   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   0000008E   0x0007             MOVS     R7,R0
   1316            
   1317            /* Get bit[23:0] of the flag */
   1318            I2C_IT &= FLAG_MASK;
   \   00000090   0x022D             LSLS     R5,R5,#+8        ;; ZeroExtS R5,R5,#+8,#+8
   \   00000092   0x0A2D             LSRS     R5,R5,#+8
   1319          
   1320            /* Check the status of the specified I2C flag */
   1321            if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
   \   00000094   0x8AA0             LDRH     R0,[R4, #+20]
   \   00000096   0x4228             TST      R0,R5
   \   00000098   0xD004             BEQ.N    ??I2C_GetITStatus_2
   \   0000009A   0x2F00             CMP      R7,#+0
   \   0000009C   0xD002             BEQ.N    ??I2C_GetITStatus_2
   1322            {
   1323              /* I2C_IT is set */
   1324              bitstatus = SET;
   \   0000009E   0x2001             MOVS     R0,#+1
   \   000000A0   0x0006             MOVS     R6,R0
   \   000000A2   0xE001             B.N      ??I2C_GetITStatus_3
   1325            }
   1326            else
   1327            {
   1328              /* I2C_IT is reset */
   1329              bitstatus = RESET;
   \                     ??I2C_GetITStatus_2: (+1)
   \   000000A4   0x2000             MOVS     R0,#+0
   \   000000A6   0x0006             MOVS     R6,R0
   1330            }
   1331            /* Return the I2C_IT status */
   1332            return  bitstatus;
   \                     ??I2C_GetITStatus_3: (+1)
   \   000000A8   0x0030             MOVS     R0,R6
   \   000000AA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AC   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   1333          }
   1334          
   1335          /**
   1336            * @brief  Clears the I2Cx's interrupt pending bits.
   1337            * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
   1338            * @param  I2C_IT: specifies the interrupt pending bit to clear. 
   1339            *          This parameter can be any combination of the following values:
   1340            *            @arg I2C_IT_SMBALERT: SMBus Alert interrupt
   1341            *            @arg I2C_IT_TIMEOUT: Timeout or Tlow error interrupt
   1342            *            @arg I2C_IT_PECERR: PEC error in reception  interrupt
   1343            *            @arg I2C_IT_OVR: Overrun/Underrun interrupt (Slave mode)
   1344            *            @arg I2C_IT_AF: Acknowledge failure interrupt
   1345            *            @arg I2C_IT_ARLO: Arbitration lost interrupt (Master mode)
   1346            *            @arg I2C_IT_BERR: Bus error interrupt
   1347            * 
   1348            * @note   STOPF (STOP detection) is cleared by software sequence: a read operation 
   1349            *          to I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
   1350            *          I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
   1351            * @note   ADD10 (10-bit header sent) is cleared by software sequence: a read 
   1352            *          operation to I2C_SR1 (I2C_GetITStatus()) followed by writing the second 
   1353            *          byte of the address in I2C_DR register.
   1354            * @note   BTF (Byte Transfer Finished) is cleared by software sequence: a read 
   1355            *          operation to I2C_SR1 register (I2C_GetITStatus()) followed by a 
   1356            *          read/write to I2C_DR register (I2C_SendData()).
   1357            * @note   ADDR (Address sent) is cleared by software sequence: a read operation to 
   1358            *          I2C_SR1 register (I2C_GetITStatus()) followed by a read operation to 
   1359            *          I2C_SR2 register ((void)(I2Cx->SR2)).
   1360            * @note   SB (Start Bit) is cleared by software sequence: a read operation to 
   1361            *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
   1362            *          I2C_DR register (I2C_SendData()).
   1363            * @retval None
   1364            */

   \                                 In section .text, align 2, keep-with-next
   1365          void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
   1366          {
   \                     I2C_ClearITPendingBit: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1367            uint32_t flagpos = 0;
   \   00000006   0x2600             MOVS     R6,#+0
   1368            /* Check the parameters */
   1369            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
   \   00000008   0x....             LDR.N    R0,??DataTable31  ;; 0x40005400
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD00A             BEQ.N    ??I2C_ClearITPendingBit_0
   \   0000000E   0x....             LDR.N    R0,??DataTable31_1  ;; 0x40005800
   \   00000010   0x4284             CMP      R4,R0
   \   00000012   0xD007             BEQ.N    ??I2C_ClearITPendingBit_0
   \   00000014   0x....             LDR.N    R0,??DataTable31_3  ;; 0x40005c00
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xD004             BEQ.N    ??I2C_ClearITPendingBit_0
   \   0000001A   0xF240 0x5159      MOVW     R1,#+1369
   \   0000001E   0x....             LDR.N    R0,??DataTable31_2
   \   00000020   0x.... 0x....      BL       assert_failed
   1370            assert_param(IS_I2C_CLEAR_IT(I2C_IT));
   \                     ??I2C_ClearITPendingBit_0: (+1)
   \   00000024   0xF242 0x00FF      MOVW     R0,#+8447
   \   00000028   0x4205             TST      R5,R0
   \   0000002A   0xD101             BNE.N    ??I2C_ClearITPendingBit_1
   \   0000002C   0x2D00             CMP      R5,#+0
   \   0000002E   0xD104             BNE.N    ??I2C_ClearITPendingBit_2
   \                     ??I2C_ClearITPendingBit_1: (+1)
   \   00000030   0xF240 0x515A      MOVW     R1,#+1370
   \   00000034   0x....             LDR.N    R0,??DataTable31_2
   \   00000036   0x.... 0x....      BL       assert_failed
   1371          
   1372            /* Get the I2C flag position */
   1373            flagpos = I2C_IT & FLAG_MASK;
   \                     ??I2C_ClearITPendingBit_2: (+1)
   \   0000003A   0x0228             LSLS     R0,R5,#+8        ;; ZeroExtS R0,R5,#+8,#+8
   \   0000003C   0x0A00             LSRS     R0,R0,#+8
   \   0000003E   0x0006             MOVS     R6,R0
   1374          
   1375            /* Clear the selected I2C flag */
   1376            I2Cx->SR1 = (uint16_t)~flagpos;
   \   00000040   0x43F0             MVNS     R0,R6
   \   00000042   0x82A0             STRH     R0,[R4, #+20]
   1377          }
   \   00000044   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   0x40005400         DC32     0x40005400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_1:
   \   00000000   0x40005800         DC32     0x40005800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_2:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   0x40005C00         DC32     0x40005c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_1:
   \   00000000   0x007A1200         DC32     0x7a1200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_2:
   \   00000000   0x00061A81         DC32     0x61a81

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_3:
   \   00000000   0x000F4240         DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30:
   \   00000000   0x000186A1         DC32     0x186a1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31:
   \   00000000   0x40005400         DC32     0x40005400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_1:
   \   00000000   0x40005800         DC32     0x40005800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_2:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_3:
   \   00000000   0x40005C00         DC32     0x40005c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_4:
   \   00000000   0x00060082         DC32     0x60082

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_5:
   \   00000000   0x00860080         DC32     0x860080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_6:
   \   00000000   0x00020040         DC32     0x20040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_7:
   \   00000000   0x00820040         DC32     0x820040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_8:
   \   00000000   0x00120040         DC32     0x120040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_9:
   \   00000000   0x00060084         DC32     0x60084

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_10:
   \   00000000   0x00860084         DC32     0x860084

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_11:
   \   00000000   0x00160084         DC32     0x160084

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_12:
   \   00000000   0x00030001         DC32     0x30001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_13:
   \   00000000   0x00070082         DC32     0x70082

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_14:
   \   00000000   0x00030002         DC32     0x30002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_15:
   \   00000000   0x00030040         DC32     0x30040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_16:
   \   00000000   0x00070084         DC32     0x70084

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_17:
   \   00000000   0x00070080         DC32     0x70080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_18:
   \   00000000   0x00030008         DC32     0x30008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_19:
   \   00000000   0x10008000         DC32     0x10008000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_20:
   \   00000000   0x10004000         DC32     0x10004000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_21:
   \   00000000   0x10000800         DC32     0x10000800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_22:
   \   00000000   0x10000400         DC32     0x10000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_23:
   \   00000000   0x10000200         DC32     0x10000200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_24:
   \   00000000   0x10000100         DC32     0x10000100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_25:
   \   00000000   0x10000080         DC32     0x10000080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_26:
   \   00000000   0x10000040         DC32     0x10000040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_27:
   \   00000000   0x10000010         DC32     0x10000010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_28:
   \   00000000   0x10000008         DC32     0x10000008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_29:
   \   00000000   0x10000004         DC32     0x10000004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_30:
   \   00000000   0x10000002         DC32     0x10000002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_31:
   \   00000000   0x10000001         DC32     0x10000001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_32:
   \   00000000   0x01008000         DC32     0x1008000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_33:
   \   00000000   0x01004000         DC32     0x1004000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_34:
   \   00000000   0x01001000         DC32     0x1001000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_35:
   \   00000000   0x01000800         DC32     0x1000800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_36:
   \   00000000   0x01000400         DC32     0x1000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_37:
   \   00000000   0x01000200         DC32     0x1000200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_38:
   \   00000000   0x06000080         DC32     0x6000080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_39:
   \   00000000   0x06000040         DC32     0x6000040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_40:
   \   00000000   0x02000010         DC32     0x2000010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_41:
   \   00000000   0x02000008         DC32     0x2000008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_42:
   \   00000000   0x02000004         DC32     0x2000004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_43:
   \   00000000   0x02000002         DC32     0x2000002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_44:
   \   00000000   0x02000001         DC32     0x2000001

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x44 0x3A          DC8 44H, 3AH, 5CH, 49H, 41H, 52H, 20H, 57H
   \              0x5C 0x49    
   \              0x41 0x52    
   \              0x20 0x57    
   \   00000008   0x6F 0x72          DC8 6FH, 72H, 6BH, 73H, 70H, 61H, 63H, 65H
   \              0x6B 0x73    
   \              0x70 0x61    
   \              0x63 0x65    
   \   00000010   0x5C 0x53          DC8 5CH, 53H, 54H, 4DH, 33H, 32H, 46H, 34H
   \              0x54 0x4D    
   \              0x33 0x32    
   \              0x46 0x34    
   \   00000018   0x30 0x37          DC8 30H, 37H, 5CH, 53H, 54H, 4DH, 33H, 32H
   \              0x5C 0x53    
   \              0x54 0x4D    
   \              0x33 0x32    
   \   00000020   0x46 0x34          DC8 46H, 34H, 2DH, 44H, 69H, 73H, 63H, 6FH
   \              0x2D 0x44    
   \              0x69 0x73    
   \              0x63 0x6F    
   \   00000028   0x76 0x65          DC8 76H, 65H, 72H, 79H, 5FH, 46H, 57H, 5FH
   \              0x72 0x79    
   \              0x5F 0x46    
   \              0x57 0x5F    
   \   00000030   0x56 0x31          DC8 56H, 31H, 2EH, 31H, 2EH, 30H, 5CH, 4CH
   \              0x2E 0x31    
   \              0x2E 0x30    
   \              0x5C 0x4C    
   \   00000038   0x69 0x62          DC8 69H, 62H, 72H, 61H, 72H, 69H, 65H, 73H
   \              0x72 0x61    
   \              0x72 0x69    
   \              0x65 0x73    
   \   00000040   0x5C 0x53          DC8 5CH, 53H, 54H, 4DH, 33H, 32H, 46H, 34H
   \              0x54 0x4D    
   \              0x33 0x32    
   \              0x46 0x34    
   \   00000048   0x78 0x78          DC8 78H, 78H, 5FH, 53H, 74H, 64H, 50H, 65H
   \              0x5F 0x53    
   \              0x74 0x64    
   \              0x50 0x65    
   \   00000050   0x72 0x69          DC8 72H, 69H, 70H, 68H, 5FH, 44H, 72H, 69H
   \              0x70 0x68    
   \              0x5F 0x44    
   \              0x72 0x69    
   \   00000058   0x76 0x65          DC8 76H, 65H, 72H, 5CH, 73H, 72H, 63H, 5CH
   \              0x72 0x5C    
   \              0x73 0x72    
   \              0x63 0x5C    
   \   00000060   0x73 0x74          DC8 73H, 74H, 6DH, 33H, 32H, 66H, 34H, 78H
   \              0x6D 0x33    
   \              0x32 0x66    
   \              0x34 0x78    
   \   00000068   0x78 0x5F          DC8 78H, 5FH, 69H, 32H, 63H, 2EH, 63H, 0
   \              0x69 0x32    
   \              0x63 0x2E    
   \              0x63 0x00    
   1378          
   1379          /**
   1380            * @}
   1381            */
   1382          
   1383          /**
   1384            * @}
   1385            */ 
   1386          
   1387          /**
   1388            * @}
   1389            */ 
   1390          
   1391          /**
   1392            * @}
   1393            */ 
   1394          
   1395          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   I2C_ARPCmd
        16   -> assert_failed
      16   I2C_AcknowledgeConfig
        16   -> assert_failed
      16   I2C_CalculatePEC
        16   -> assert_failed
      32   I2C_CheckEvent
        32   -> assert_failed
      16   I2C_ClearFlag
        16   -> assert_failed
      16   I2C_ClearITPendingBit
        16   -> assert_failed
      16   I2C_Cmd
        16   -> assert_failed
      16   I2C_DMACmd
        16   -> assert_failed
      16   I2C_DMALastTransferCmd
        16   -> assert_failed
       8   I2C_DeInit
         8   -> RCC_APB1PeriphResetCmd
         8   -> assert_failed
      16   I2C_DualAddressCmd
        16   -> assert_failed
      16   I2C_FastModeDutyCycleConfig
        16   -> assert_failed
      16   I2C_GeneralCallCmd
        16   -> assert_failed
      16   I2C_GenerateSTART
        16   -> assert_failed
      16   I2C_GenerateSTOP
        16   -> assert_failed
      24   I2C_GetFlagStatus
        24   -> assert_failed
      24   I2C_GetITStatus
        24   -> assert_failed
      24   I2C_GetLastEvent
        24   -> assert_failed
       8   I2C_GetPEC
         8   -> assert_failed
      16   I2C_ITConfig
        16   -> assert_failed
      48   I2C_Init
        48   -> RCC_GetClocksFreq
        48   -> assert_failed
      16   I2C_NACKPositionConfig
        16   -> assert_failed
      16   I2C_OwnAddress2Config
        16   -> assert_failed
      16   I2C_PECPositionConfig
        16   -> assert_failed
      16   I2C_ReadRegister
        16   -> assert_failed
       8   I2C_ReceiveData
         8   -> assert_failed
      16   I2C_SMBusAlertConfig
        16   -> assert_failed
      16   I2C_Send7bitAddress
        16   -> assert_failed
      16   I2C_SendData
        16   -> assert_failed
      16   I2C_SoftwareResetCmd
        16   -> assert_failed
      16   I2C_StretchClockCmd
        16   -> assert_failed
       0   I2C_StructInit
      16   I2C_TransmitPEC
        16   -> assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable24
       4  ??DataTable24_1
       4  ??DataTable24_2
       4  ??DataTable25
       4  ??DataTable25_1
       4  ??DataTable25_2
       4  ??DataTable25_3
       4  ??DataTable30
       4  ??DataTable31
       4  ??DataTable31_1
       4  ??DataTable31_10
       4  ??DataTable31_11
       4  ??DataTable31_12
       4  ??DataTable31_13
       4  ??DataTable31_14
       4  ??DataTable31_15
       4  ??DataTable31_16
       4  ??DataTable31_17
       4  ??DataTable31_18
       4  ??DataTable31_19
       4  ??DataTable31_2
       4  ??DataTable31_20
       4  ??DataTable31_21
       4  ??DataTable31_22
       4  ??DataTable31_23
       4  ??DataTable31_24
       4  ??DataTable31_25
       4  ??DataTable31_26
       4  ??DataTable31_27
       4  ??DataTable31_28
       4  ??DataTable31_29
       4  ??DataTable31_3
       4  ??DataTable31_30
       4  ??DataTable31_31
       4  ??DataTable31_32
       4  ??DataTable31_33
       4  ??DataTable31_34
       4  ??DataTable31_35
       4  ??DataTable31_36
       4  ??DataTable31_37
       4  ??DataTable31_38
       4  ??DataTable31_39
       4  ??DataTable31_4
       4  ??DataTable31_40
       4  ??DataTable31_41
       4  ??DataTable31_42
       4  ??DataTable31_43
       4  ??DataTable31_44
       4  ??DataTable31_5
       4  ??DataTable31_6
       4  ??DataTable31_7
       4  ??DataTable31_8
       4  ??DataTable31_9
     112  ?_0
      86  I2C_ARPCmd
      94  I2C_AcknowledgeConfig
      84  I2C_CalculatePEC
     260  I2C_CheckEvent
      70  I2C_ClearFlag
      70  I2C_ClearITPendingBit
      94  I2C_Cmd
      84  I2C_DMACmd
      84  I2C_DMALastTransferCmd
     128  I2C_DeInit
      94  I2C_DualAddressCmd
     102  I2C_FastModeDutyCycleConfig
      94  I2C_GeneralCallCmd
      94  I2C_GenerateSTART
      94  I2C_GenerateSTOP
     236  I2C_GetFlagStatus
     174  I2C_GetITStatus
      62  I2C_GetLastEvent
      42  I2C_GetPEC
     114  I2C_ITConfig
     420  I2C_Init
     102  I2C_NACKPositionConfig
      66  I2C_OwnAddress2Config
      92  I2C_PECPositionConfig
     118  I2C_ReadRegister
      38  I2C_ReceiveData
     102  I2C_SMBusAlertConfig
      90  I2C_Send7bitAddress
      40  I2C_SendData
      92  I2C_SoftwareResetCmd
      94  I2C_StretchClockCmd
      32  I2C_StructInit
      84  I2C_TransmitPEC

 
   112 bytes in section .rodata
 3 742 bytes in section .text
 
 3 742 bytes of CODE  memory
   112 bytes of CONST memory

Errors: none
Warnings: none
