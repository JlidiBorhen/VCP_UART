###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       06/May/2016  23:31:31
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\IAR
#        Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_cryp_tdes.c
#    Command line =  
#        "D:\IAR
#        Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_cryp_tdes.c"
#        -D USE_STDPERIPH_DRIVER -D STM32F4XX -D USE_FULL_ASSERT -lCN "D:\IAR
#        Workspace\STM32F407\VCP_ESP\Debug\List" -o "D:\IAR
#        Workspace\STM32F407\VCP_ESP\Debug\Obj" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\"
#        -I "D:\IAR Workspace\STM32F407\VCP_ESP\..\Libraries\CMSIS\Include\" -I
#        "D:\IAR Workspace\STM32F407\VCP_ESP\..\Utilities\STM32F4-Discovery\"
#        -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\..\Libraries\CMSIS\ST\STM32F4xx\Include\"
#        -I "D:\IAR Workspace\STM32F407\VCP_ESP\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_conf\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\cdc\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\otg\" -I "D:\IAR
#        Workspace\STM32F407\VCP_ESP\usb_lib\core\" -On --use_c++_inline -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        D:\IAR Workspace\STM32F407\VCP_ESP\Debug\List\stm32f4xx_cryp_tdes.lst
#    Object file  =  
#        D:\IAR Workspace\STM32F407\VCP_ESP\Debug\Obj\stm32f4xx_cryp_tdes.o
#
###############################################################################

D:\IAR Workspace\STM32F407\STM32F4-Discovery_FW_V1.1.0\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_cryp_tdes.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f4xx_cryp_tdes.c
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    30-September-2011
      7            * @brief   This file provides high level functions to encrypt and decrypt an 
      8            *          input message using TDES in ECB/CBC modes .
      9            *          It uses the stm32f4xx_cryp.c/.h drivers to access the STM32F4xx CRYP
     10            *          peripheral.
     11            *
     12            *  @verbatim
     13            *
     14            *          ===================================================================
     15            *                                   How to use this driver
     16            *          ===================================================================
     17            *          1. Enable The CRYP controller clock using 
     18            *            RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
     19            *
     20            *          2. Encrypt and decrypt using TDES in ECB Mode using CRYP_TDES_ECB()
     21            *             function.
     22            *
     23            *          3. Encrypt and decrypt using TDES in CBC Mode using CRYP_TDES_CBC()
     24            *             function.
     25            *
     26            *  @endverbatim
     27            *
     28            ******************************************************************************
     29            * @attention
     30            *
     31            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     32            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     33            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     34            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     35            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     36            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     37            *
     38            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     39            ******************************************************************************
     40            */ 
     41          
     42          /* Includes ------------------------------------------------------------------*/
     43          #include "stm32f4xx_cryp.h"
     44          
     45          
     46          /** @addtogroup STM32F4xx_StdPeriph_Driver
     47            * @{
     48            */
     49          
     50          /** @defgroup CRYP 
     51            * @brief CRYP driver modules
     52            * @{
     53            */
     54          
     55          /* Private typedef -----------------------------------------------------------*/
     56          /* Private define ------------------------------------------------------------*/
     57          #define TDESBUSY_TIMEOUT    ((uint32_t) 0x00010000)
     58          
     59          /* Private macro -------------------------------------------------------------*/
     60          /* Private variables ---------------------------------------------------------*/
     61          /* Private function prototypes -----------------------------------------------*/
     62          /* Private functions ---------------------------------------------------------*/
     63          
     64          
     65          /** @defgroup CRYP_Private_Functions
     66            * @{
     67            */ 
     68          
     69          /** @defgroup CRYP_Group7 High Level TDES functions
     70           *  @brief   High Level TDES functions 
     71           *
     72          @verbatim   
     73           ===============================================================================
     74                                    High Level TDES functions
     75           ===============================================================================
     76          
     77          
     78          @endverbatim
     79            * @{
     80            */
     81          
     82          /**
     83            * @brief  Encrypt and decrypt using TDES in ECB Mode
     84            * @param  Mode: encryption or decryption Mode.
     85            *           This parameter can be one of the following values:
     86            *            @arg MODE_ENCRYPT: Encryption
     87            *            @arg MODE_DECRYPT: Decryption
     88            * @param  Key: Key used for TDES algorithm.
     89            * @param  Ilength: length of the Input buffer, must be a multiple of 8.
     90            * @param  Input: pointer to the Input buffer.
     91            * @param  Output: pointer to the returned buffer.
     92            * @retval An ErrorStatus enumeration value:
     93            *          - SUCCESS: Operation done
     94            *          - ERROR: Operation failed
     95            */

   \                                 In section .text, align 2, keep-with-next
     96          ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
     97                                    uint32_t Ilength, uint8_t *Output)
     98          {
   \                     CRYP_TDES_ECB: (+1)
   \   00000000   0xE92D 0x4FF7      PUSH     {R0-R2,R4-R11,LR}
   \   00000004   0xB08C             SUB      SP,SP,#+48
   \   00000006   0x001C             MOVS     R4,R3
   \   00000008   0x9D18             LDR      R5,[SP, #+96]
     99            CRYP_InitTypeDef TDES_CRYP_InitStructure;
    100            CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
    101            __IO uint32_t counter = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x9000             STR      R0,[SP, #+0]
    102            uint32_t busystatus = 0;
   \   0000000E   0x2600             MOVS     R6,#+0
    103            ErrorStatus status = SUCCESS;
   \   00000010   0x2701             MOVS     R7,#+1
    104            uint32_t keyaddr    = (uint32_t)Key;
   \   00000012   0xF8DD 0xA034      LDR      R10,[SP, #+52]
    105            uint32_t inputaddr  = (uint32_t)Input;
   \   00000016   0xF8DD 0xB038      LDR      R11,[SP, #+56]
    106            uint32_t outputaddr = (uint32_t)Output;
   \   0000001A   0x46A8             MOV      R8,R5
    107            uint32_t i = 0;
   \   0000001C   0xF05F 0x0900      MOVS     R9,#+0
    108          
    109            /* Crypto structures initialisation*/
    110            CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
   \   00000020   0xA803             ADD      R0,SP,#+12
   \   00000022   0x.... 0x....      BL       CRYP_KeyStructInit
    111          
    112            /* Crypto Init for Encryption process */
    113            if(Mode == MODE_ENCRYPT) /* TDES encryption */
   \   00000026   0xF89D 0x0030      LDRB     R0,[SP, #+48]
   \   0000002A   0x2801             CMP      R0,#+1
   \   0000002C   0xD103             BNE.N    ??CRYP_TDES_ECB_0
    114            {
    115               TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   \   00000034   0xE002             B.N      ??CRYP_TDES_ECB_1
    116            }
    117            else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
    118            {
    119               TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
   \                     ??CRYP_TDES_ECB_0: (+1)
   \   00000036   0x2004             MOVS     R0,#+4
   \   00000038   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    120            }
    121          
    122            TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
   \                     ??CRYP_TDES_ECB_1: (+1)
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    123            TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
   \   00000042   0x2080             MOVS     R0,#+128
   \   00000044   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    124            CRYP_Init(&TDES_CRYP_InitStructure);
   \   00000048   0xA801             ADD      R0,SP,#+4
   \   0000004A   0x.... 0x....      BL       CRYP_Init
    125          
    126            /* Key Initialisation */
    127            TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
   \   0000004E   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   00000052   0xBA00             REV      R0,R0
   \   00000054   0x9005             STR      R0,[SP, #+20]
    128            keyaddr+=4;
   \   00000056   0xF11A 0x0A04      ADDS     R10,R10,#+4
    129            TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
   \   0000005A   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   0000005E   0xBA00             REV      R0,R0
   \   00000060   0x9006             STR      R0,[SP, #+24]
    130            keyaddr+=4;
   \   00000062   0xF11A 0x0A04      ADDS     R10,R10,#+4
    131            TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
   \   00000066   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   0000006A   0xBA00             REV      R0,R0
   \   0000006C   0x9007             STR      R0,[SP, #+28]
    132            keyaddr+=4;
   \   0000006E   0xF11A 0x0A04      ADDS     R10,R10,#+4
    133            TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
   \   00000072   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   00000076   0xBA00             REV      R0,R0
   \   00000078   0x9008             STR      R0,[SP, #+32]
    134            keyaddr+=4;
   \   0000007A   0xF11A 0x0A04      ADDS     R10,R10,#+4
    135            TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
   \   0000007E   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   00000082   0xBA00             REV      R0,R0
   \   00000084   0x9009             STR      R0,[SP, #+36]
    136            keyaddr+=4;
   \   00000086   0xF11A 0x0A04      ADDS     R10,R10,#+4
    137            TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
   \   0000008A   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   0000008E   0xBA00             REV      R0,R0
   \   00000090   0x900A             STR      R0,[SP, #+40]
    138            CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
   \   00000092   0xA803             ADD      R0,SP,#+12
   \   00000094   0x.... 0x....      BL       CRYP_KeyInit
    139          
    140            /* Flush IN/OUT FIFO */
    141            CRYP_FIFOFlush();
   \   00000098   0x.... 0x....      BL       CRYP_FIFOFlush
    142          
    143            /* Enable Crypto processor */
    144            CRYP_Cmd(ENABLE);
   \   0000009C   0x2001             MOVS     R0,#+1
   \   0000009E   0x.... 0x....      BL       CRYP_Cmd
    145          
    146            for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0x4681             MOV      R9,R0
   \                     ??CRYP_TDES_ECB_2: (+1)
   \   000000A6   0x45A1             CMP      R9,R4
   \   000000A8   0xD231             BCS.N    ??CRYP_TDES_ECB_3
   \   000000AA   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000AC   0x2F00             CMP      R7,#+0
   \   000000AE   0xD02E             BEQ.N    ??CRYP_TDES_ECB_3
    147            {
    148              /* Write the Input block in the Input FIFO */
    149              CRYP_DataIn(*(uint32_t*)(inputaddr));
   \   000000B0   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \   000000B4   0x.... 0x....      BL       CRYP_DataIn
    150              inputaddr+=4;
   \   000000B8   0xF11B 0x0B04      ADDS     R11,R11,#+4
    151              CRYP_DataIn(*(uint32_t*)(inputaddr));
   \   000000BC   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \   000000C0   0x.... 0x....      BL       CRYP_DataIn
    152              inputaddr+=4;
   \   000000C4   0xF11B 0x0B04      ADDS     R11,R11,#+4
    153          
    154              /* Wait until the complete message has been processed */
    155              counter = 0;
   \   000000C8   0x2000             MOVS     R0,#+0
   \   000000CA   0x9000             STR      R0,[SP, #+0]
    156              do
    157              {
    158                busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
   \                     ??CRYP_TDES_ECB_4: (+1)
   \   000000CC   0x2010             MOVS     R0,#+16
   \   000000CE   0x.... 0x....      BL       CRYP_GetFlagStatus
   \   000000D2   0x0006             MOVS     R6,R0
    159                counter++;
   \   000000D4   0x9800             LDR      R0,[SP, #+0]
   \   000000D6   0x1C40             ADDS     R0,R0,#+1
   \   000000D8   0x9000             STR      R0,[SP, #+0]
    160              }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
   \   000000DA   0x9800             LDR      R0,[SP, #+0]
   \   000000DC   0xF5B0 0x3F80      CMP      R0,#+65536
   \   000000E0   0xD001             BEQ.N    ??CRYP_TDES_ECB_5
   \   000000E2   0x2E00             CMP      R6,#+0
   \   000000E4   0xD1F2             BNE.N    ??CRYP_TDES_ECB_4
    161          
    162              if (busystatus != RESET)
   \                     ??CRYP_TDES_ECB_5: (+1)
   \   000000E6   0x2E00             CMP      R6,#+0
   \   000000E8   0xD002             BEQ.N    ??CRYP_TDES_ECB_6
    163              {
    164                 status = ERROR;
   \   000000EA   0x2000             MOVS     R0,#+0
   \   000000EC   0x0007             MOVS     R7,R0
   \   000000EE   0xE00B             B.N      ??CRYP_TDES_ECB_7
    165              }
    166              else
    167              {
    168          
    169                /* Read the Output block from the Output FIFO */
    170                *(uint32_t*)(outputaddr) = CRYP_DataOut();
   \                     ??CRYP_TDES_ECB_6: (+1)
   \   000000F0   0x.... 0x....      BL       CRYP_DataOut
   \   000000F4   0xF8C8 0x0000      STR      R0,[R8, #+0]
    171                outputaddr+=4;
   \   000000F8   0xF118 0x0804      ADDS     R8,R8,#+4
    172                *(uint32_t*)(outputaddr) = CRYP_DataOut();
   \   000000FC   0x.... 0x....      BL       CRYP_DataOut
   \   00000100   0xF8C8 0x0000      STR      R0,[R8, #+0]
    173                outputaddr+=4;
   \   00000104   0xF118 0x0804      ADDS     R8,R8,#+4
    174              }
    175            }
   \                     ??CRYP_TDES_ECB_7: (+1)
   \   00000108   0xF119 0x0908      ADDS     R9,R9,#+8
   \   0000010C   0xE7CB             B.N      ??CRYP_TDES_ECB_2
    176          
    177            /* Disable Crypto */
    178            CRYP_Cmd(DISABLE);
   \                     ??CRYP_TDES_ECB_3: (+1)
   \   0000010E   0x2000             MOVS     R0,#+0
   \   00000110   0x.... 0x....      BL       CRYP_Cmd
    179          
    180            return status; 
   \   00000114   0x0038             MOVS     R0,R7
   \   00000116   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000118   0xB00F             ADD      SP,SP,#+60
   \   0000011A   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    181          }
    182          
    183          /**
    184            * @brief  Encrypt and decrypt using TDES in CBC Mode
    185            * @param  Mode: encryption or decryption Mode.
    186            *           This parameter can be one of the following values:
    187            *            @arg MODE_ENCRYPT: Encryption
    188            *            @arg MODE_DECRYPT: Decryption
    189            * @param  Key: Key used for TDES algorithm.
    190            * @param  InitVectors: Initialisation Vectors used for TDES algorithm.
    191            * @param  Input: pointer to the Input buffer.
    192            * @param  Ilength: length of the Input buffer, must be a multiple of 8.
    193            * @param  Output: pointer to the returned buffer.
    194            * @retval An ErrorStatus enumeration value:
    195            *          - SUCCESS: Operation done
    196            *          - ERROR: Operation failed
    197            */

   \                                 In section .text, align 2, keep-with-next
    198          ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
    199                                    uint8_t *Input, uint32_t Ilength, uint8_t *Output)
    200          {
   \                     CRYP_TDES_CBC: (+1)
   \   00000000   0xE92D 0x4FFF      PUSH     {R0-R11,LR}
   \   00000004   0xB08F             SUB      SP,SP,#+60
   \   00000006   0x9C1C             LDR      R4,[SP, #+112]
    201            CRYP_InitTypeDef TDES_CRYP_InitStructure;
    202            CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
    203            CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
    204            __IO uint32_t counter = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x9000             STR      R0,[SP, #+0]
    205            uint32_t busystatus = 0;
   \   0000000C   0x2500             MOVS     R5,#+0
    206            ErrorStatus status = SUCCESS;
   \   0000000E   0x2601             MOVS     R6,#+1
    207            uint32_t keyaddr    = (uint32_t)Key;
   \   00000010   0xF8DD 0x9040      LDR      R9,[SP, #+64]
    208            uint32_t inputaddr  = (uint32_t)Input;
   \   00000014   0xF8DD 0xB048      LDR      R11,[SP, #+72]
    209            uint32_t outputaddr = (uint32_t)Output;
   \   00000018   0x9F1D             LDR      R7,[SP, #+116]
    210            uint32_t ivaddr     = (uint32_t)InitVectors;
   \   0000001A   0xF8DD 0xA044      LDR      R10,[SP, #+68]
    211            uint32_t i = 0;
   \   0000001E   0xF05F 0x0800      MOVS     R8,#+0
    212          
    213            /* Crypto structures initialisation*/
    214            CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
   \   00000022   0xA807             ADD      R0,SP,#+28
   \   00000024   0x.... 0x....      BL       CRYP_KeyStructInit
    215          
    216            /* Crypto Init for Encryption process */
    217            if(Mode == MODE_ENCRYPT) /* TDES encryption */
   \   00000028   0xF89D 0x003C      LDRB     R0,[SP, #+60]
   \   0000002C   0x2801             CMP      R0,#+1
   \   0000002E   0xD103             BNE.N    ??CRYP_TDES_CBC_0
    218            {
    219              TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   \   00000036   0xE002             B.N      ??CRYP_TDES_CBC_1
    220            }
    221            else
    222            {
    223              TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
   \                     ??CRYP_TDES_CBC_0: (+1)
   \   00000038   0x2004             MOVS     R0,#+4
   \   0000003A   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    224            }
    225            TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
   \                     ??CRYP_TDES_CBC_1: (+1)
   \   0000003E   0x2008             MOVS     R0,#+8
   \   00000040   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    226            TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
   \   00000044   0x2080             MOVS     R0,#+128
   \   00000046   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    227          
    228            CRYP_Init(&TDES_CRYP_InitStructure);
   \   0000004A   0xA801             ADD      R0,SP,#+4
   \   0000004C   0x.... 0x....      BL       CRYP_Init
    229          
    230            /* Key Initialisation */
    231            TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
   \   00000050   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000054   0xBA00             REV      R0,R0
   \   00000056   0x9009             STR      R0,[SP, #+36]
    232            keyaddr+=4;
   \   00000058   0xF119 0x0904      ADDS     R9,R9,#+4
    233            TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
   \   0000005C   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000060   0xBA00             REV      R0,R0
   \   00000062   0x900A             STR      R0,[SP, #+40]
    234            keyaddr+=4;
   \   00000064   0xF119 0x0904      ADDS     R9,R9,#+4
    235            TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
   \   00000068   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   0000006C   0xBA00             REV      R0,R0
   \   0000006E   0x900B             STR      R0,[SP, #+44]
    236            keyaddr+=4;
   \   00000070   0xF119 0x0904      ADDS     R9,R9,#+4
    237            TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
   \   00000074   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000078   0xBA00             REV      R0,R0
   \   0000007A   0x900C             STR      R0,[SP, #+48]
    238            keyaddr+=4;
   \   0000007C   0xF119 0x0904      ADDS     R9,R9,#+4
    239            TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
   \   00000080   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000084   0xBA00             REV      R0,R0
   \   00000086   0x900D             STR      R0,[SP, #+52]
    240            keyaddr+=4;
   \   00000088   0xF119 0x0904      ADDS     R9,R9,#+4
    241            TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
   \   0000008C   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000090   0xBA00             REV      R0,R0
   \   00000092   0x900E             STR      R0,[SP, #+56]
    242            CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
   \   00000094   0xA807             ADD      R0,SP,#+28
   \   00000096   0x.... 0x....      BL       CRYP_KeyInit
    243          
    244            /* Initialization Vectors */
    245            TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
   \   0000009A   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   0000009E   0xBA00             REV      R0,R0
   \   000000A0   0x9003             STR      R0,[SP, #+12]
    246            ivaddr+=4;
   \   000000A2   0xF11A 0x0A04      ADDS     R10,R10,#+4
    247            TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
   \   000000A6   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   000000AA   0xBA00             REV      R0,R0
   \   000000AC   0x9004             STR      R0,[SP, #+16]
    248            CRYP_IVInit(&TDES_CRYP_IVInitStructure);
   \   000000AE   0xA803             ADD      R0,SP,#+12
   \   000000B0   0x.... 0x....      BL       CRYP_IVInit
    249          
    250            /* Flush IN/OUT FIFO */
    251            CRYP_FIFOFlush();
   \   000000B4   0x.... 0x....      BL       CRYP_FIFOFlush
    252          
    253            /* Enable Crypto processor */
    254            CRYP_Cmd(ENABLE);
   \   000000B8   0x2001             MOVS     R0,#+1
   \   000000BA   0x.... 0x....      BL       CRYP_Cmd
    255          
    256            for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
   \   000000BE   0x2000             MOVS     R0,#+0
   \   000000C0   0x4680             MOV      R8,R0
   \                     ??CRYP_TDES_CBC_2: (+1)
   \   000000C2   0x45A0             CMP      R8,R4
   \   000000C4   0xD22D             BCS.N    ??CRYP_TDES_CBC_3
   \   000000C6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000C8   0x2E00             CMP      R6,#+0
   \   000000CA   0xD02A             BEQ.N    ??CRYP_TDES_CBC_3
    257            {
    258              /* Write the Input block in the Input FIFO */
    259              CRYP_DataIn(*(uint32_t*)(inputaddr));
   \   000000CC   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \   000000D0   0x.... 0x....      BL       CRYP_DataIn
    260              inputaddr+=4;
   \   000000D4   0xF11B 0x0B04      ADDS     R11,R11,#+4
    261              CRYP_DataIn(*(uint32_t*)(inputaddr));
   \   000000D8   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \   000000DC   0x.... 0x....      BL       CRYP_DataIn
    262              inputaddr+=4;
   \   000000E0   0xF11B 0x0B04      ADDS     R11,R11,#+4
    263          
    264              /* Wait until the complete message has been processed */
    265              counter = 0;
   \   000000E4   0x2000             MOVS     R0,#+0
   \   000000E6   0x9000             STR      R0,[SP, #+0]
    266              do
    267              {
    268                busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
   \                     ??CRYP_TDES_CBC_4: (+1)
   \   000000E8   0x2010             MOVS     R0,#+16
   \   000000EA   0x.... 0x....      BL       CRYP_GetFlagStatus
   \   000000EE   0x0005             MOVS     R5,R0
    269                counter++;
   \   000000F0   0x9800             LDR      R0,[SP, #+0]
   \   000000F2   0x1C40             ADDS     R0,R0,#+1
   \   000000F4   0x9000             STR      R0,[SP, #+0]
    270              }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
   \   000000F6   0x9800             LDR      R0,[SP, #+0]
   \   000000F8   0xF5B0 0x3F80      CMP      R0,#+65536
   \   000000FC   0xD001             BEQ.N    ??CRYP_TDES_CBC_5
   \   000000FE   0x2D00             CMP      R5,#+0
   \   00000100   0xD1F2             BNE.N    ??CRYP_TDES_CBC_4
    271          
    272              if (busystatus != RESET)
   \                     ??CRYP_TDES_CBC_5: (+1)
   \   00000102   0x2D00             CMP      R5,#+0
   \   00000104   0xD002             BEQ.N    ??CRYP_TDES_CBC_6
    273             {
    274                 status = ERROR;
   \   00000106   0x2000             MOVS     R0,#+0
   \   00000108   0x0006             MOVS     R6,R0
   \   0000010A   0xE007             B.N      ??CRYP_TDES_CBC_7
    275              }
    276              else
    277              {
    278          
    279                /* Read the Output block from the Output FIFO */
    280                *(uint32_t*)(outputaddr) = CRYP_DataOut();
   \                     ??CRYP_TDES_CBC_6: (+1)
   \   0000010C   0x.... 0x....      BL       CRYP_DataOut
   \   00000110   0x6038             STR      R0,[R7, #+0]
    281                outputaddr+=4;
   \   00000112   0x1D3F             ADDS     R7,R7,#+4
    282                *(uint32_t*)(outputaddr) = CRYP_DataOut();
   \   00000114   0x.... 0x....      BL       CRYP_DataOut
   \   00000118   0x6038             STR      R0,[R7, #+0]
    283                outputaddr+=4;
   \   0000011A   0x1D3F             ADDS     R7,R7,#+4
    284              }
    285            }
   \                     ??CRYP_TDES_CBC_7: (+1)
   \   0000011C   0xF118 0x0808      ADDS     R8,R8,#+8
   \   00000120   0xE7CF             B.N      ??CRYP_TDES_CBC_2
    286          
    287            /* Disable Crypto */
    288            CRYP_Cmd(DISABLE);
   \                     ??CRYP_TDES_CBC_3: (+1)
   \   00000122   0x2000             MOVS     R0,#+0
   \   00000124   0x.... 0x....      BL       CRYP_Cmd
    289          
    290            return status; 
   \   00000128   0x0030             MOVS     R0,R6
   \   0000012A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000012C   0xB013             ADD      SP,SP,#+76
   \   0000012E   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    291          }
    292          /**
    293            * @}
    294            */ 
    295          
    296          /**
    297            * @}
    298            */ 
    299          
    300          /**
    301            * @}
    302            */ 
    303          
    304          /**
    305            * @}
    306            */ 
    307          
    308          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     112   CRYP_TDES_CBC
       112   -> CRYP_Cmd
       112   -> CRYP_DataIn
       112   -> CRYP_DataOut
       112   -> CRYP_FIFOFlush
       112   -> CRYP_GetFlagStatus
       112   -> CRYP_IVInit
       112   -> CRYP_Init
       112   -> CRYP_KeyInit
       112   -> CRYP_KeyStructInit
      96   CRYP_TDES_ECB
        96   -> CRYP_Cmd
        96   -> CRYP_DataIn
        96   -> CRYP_DataOut
        96   -> CRYP_FIFOFlush
        96   -> CRYP_GetFlagStatus
        96   -> CRYP_Init
        96   -> CRYP_KeyInit
        96   -> CRYP_KeyStructInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     306  CRYP_TDES_CBC
     286  CRYP_TDES_ECB

 
 592 bytes in section .text
 
 592 bytes of CODE memory

Errors: none
Warnings: none
